{
  "version": 2,
  "suites": {
    "test/e2e/404-page-router/index.test.ts": {
      "passed": [
        "404-page-router 404-page-router with basePath of false and i18n of false and middleware false for /error should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of false and i18n of false and middleware false for /error?with=query should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of false and i18n of false and middleware false for /not/a/real/page should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of false and i18n of false and middleware true for /error should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of false and i18n of false and middleware true for /error?with=query should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of false and i18n of false and middleware true for /not/a/real/page should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of false and i18n of true and middleware false for /error should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of false and i18n of true and middleware false for /error?with=query should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of false and i18n of true and middleware false for /not/a/real/page should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of true and i18n of false and middleware false for /docs/error should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of true and i18n of false and middleware false for /docs/error?with=query should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of true and i18n of false and middleware false for /not/a/real/page should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of true and i18n of true and middleware false for /docs/error should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of true and i18n of true and middleware false for /docs/error?with=query should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of true and i18n of true and middleware false for /not/a/real/page should have the correct router parameters after it is ready"
      ],
      "failed": [
        "404-page-router 404-page-router with basePath of false and i18n of false and middleware false for /not/a/real/page?with=query should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of false and i18n of false and middleware false should not throw any errors when re-fetching the route info",
        "404-page-router 404-page-router with basePath of false and i18n of false and middleware true for /not/a/real/page?with=query should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of false and i18n of false and middleware true should not throw any errors when re-fetching the route info",
        "404-page-router 404-page-router with basePath of false and i18n of true and middleware false for /not/a/real/page?with=query should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of false and i18n of true and middleware false should not throw any errors when re-fetching the route info",
        "404-page-router 404-page-router with basePath of true and i18n of false and middleware false for /not/a/real/page?with=query should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of true and i18n of false and middleware false should not throw any errors when re-fetching the route info",
        "404-page-router 404-page-router with basePath of true and i18n of true and middleware false for /not/a/real/page?with=query should have the correct router parameters after it is ready",
        "404-page-router 404-page-router with basePath of true and i18n of true and middleware false should not throw any errors when re-fetching the route info"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir-legacy-edge-runtime-config/index.test.ts": {
      "passed": [
        "app-dir edge runtime config should warn the legacy object config export"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/_allow-underscored-root-directory/_allow-underscored-root-directory.test.ts": {
      "passed": [],
      "failed": [
        "_allow-underscored-root-directory should not serve app path with underscore",
        "_allow-underscored-root-directory should pages path with a underscore at the root",
        "_allow-underscored-root-directory should serve app path with %5F"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/actions-allowed-origins/app-action-allowed-origins.test.ts": {
      "passed": [
        "app-dir action allowed origins should pass if localhost is set as a safe origin"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/actions-allowed-origins/app-action-disallowed-origins.test.ts": {
      "passed": [
        "app-dir action disallowed origins should error if x-forwarded-host does not match the origin"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/actions-navigation/index.test.ts": {
      "passed": [
        "app-dir action handling should handle actions correctly after following a relative link",
        "app-dir action handling should handle actions correctly after navigation / redirection events"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/actions/app-action-export.test.ts": {
      "passed": [],
      "failed": [
        "app-dir action handling - next export should error when use export output for server actions"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/actions/app-action-form-state.test.ts": {
      "passed": [],
      "failed": [
        "app-dir action useFormState should send the action to the provided permalink with form state when JS disabled",
        "app-dir action useFormState should support hydrating the app from progressively enhanced form request",
        "app-dir action useFormState should support submitting form state with JS",
        "app-dir action useFormState should support submitting form state without JS"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/actions/app-action-progressive-enhancement.test.ts": {
      "passed": [
        "app-dir action progressive enhancement should support actions from client without JS",
        "app-dir action progressive enhancement should support formData and redirect without JS"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/actions/app-action-size-limit-invalid.test.ts": {
      "passed": [],
      "failed": [
        "app-dir action size limit invalid config should error if serverActions.bodySizeLimit config is a negative number",
        "app-dir action size limit invalid config should error if serverActions.bodySizeLimit config is a negative size",
        "app-dir action size limit invalid config should error if serverActions.bodySizeLimit config is invalid",
        "app-dir action size limit invalid config should respect the size set in serverActions.bodySizeLimit",
        "app-dir action size limit invalid config should respect the size set in serverActions.bodySizeLimit when submitting form"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/actions/app-action.test.ts": {
      "passed": [
        "app-dir action handling Edge SSR should allow cookie and header async storages",
        "app-dir action handling Edge SSR should handle basic actions correctly",
        "app-dir action handling Edge SSR should handle redirect to a relative URL in a single pass",
        "app-dir action handling Edge SSR should handle regular redirects",
        "app-dir action handling Edge SSR should handle unicode search params",
        "app-dir action handling Edge SSR should return error response for hoc auth wrappers in edge runtime",
        "app-dir action handling caching disabled by default should not override force-cache in server action",
        "app-dir action handling caching disabled by default should not override revalidate in server action",
        "app-dir action handling caching disabled by default should use no-store as default for server action",
        "app-dir action handling encryption should send encrypted values from the closed over closure",
        "app-dir action handling fetch actions should handle a fetch action initiated from a static page",
        "app-dir action handling fetch actions should handle redirect to a relative URL in a single pass",
        "app-dir action handling fetch actions should handle regular redirects",
        "app-dir action handling fetch actions should handle revalidatePath",
        "app-dir action handling fetch actions should handle revalidateTag",
        "app-dir action handling fetch actions should invalidate client cache on other routes when cookies.set is called",
        "app-dir action handling fetch actions should invalidate client cache when path is revalidated",
        "app-dir action handling fetch actions should invalidate client cache when tag is revalidated",
        "app-dir action handling fetch actions should revalidate when cookies.set is called",
        "app-dir action handling fetch actions should revalidate when cookies.set is called in a client action",
        "app-dir action handling fetch actions should store revalidation data in the prefetch cache",
        "app-dir action handling redirects displays searchParams correctly when redirecting with SearchParams",
        "app-dir action handling redirects merges cookies correctly when redirecting",
        "app-dir action handling redirects redirects properly when server action handler redirects with a 307 status code",
        "app-dir action handling redirects redirects properly when server action handler redirects with a 308 status code",
        "app-dir action handling redirects redirects properly when server action handler uses `permanentRedirect`",
        "app-dir action handling redirects redirects properly when server action handler uses `redirect`",
        "app-dir action handling server actions render client components server component imported action should support importing client components from actions",
        "app-dir action handling should 404 when POSTing an invalid server action",
        "app-dir action handling should be possible to catch network errors",
        "app-dir action handling should be possible to catch regular errors",
        "app-dir action handling should handle actions executed in quick succession",
        "app-dir action handling should handle basic actions correctly",
        "app-dir action handling should log a warning when a server action is not found but an id is provided",
        "app-dir action handling should not block navigation events while a server action is in flight",
        "app-dir action handling should only submit action once when resubmitting an action after navigation",
        "app-dir action handling should push new route when redirecting",
        "app-dir action handling should support .bind",
        "app-dir action handling should support chained .bind",
        "app-dir action handling should support formData and redirect",
        "app-dir action handling should support headers and cookies",
        "app-dir action handling should support headers in client imported actions",
        "app-dir action handling should support hoc auth wrappers",
        "app-dir action handling should support importing actions in client components",
        "app-dir action handling should support importing the same action module instance in both server and action layers",
        "app-dir action handling should support next/dynamic with ssr: false",
        "app-dir action handling should support next/dynamic with ssr: false (edge)",
        "app-dir action handling should support notFound",
        "app-dir action handling should support notFound (javascript disabled)",
        "app-dir action handling should support setting cookies in route handlers with the correct overrides",
        "app-dir action handling should support uploading files",
        "app-dir action handling should trigger a refresh for a server action that gets discarded due to a navigation",
        "app-dir action handling should work with interception routes"
      ],
      "failed": [
        "app-dir action handling should not expose action content in sourcemaps"
      ],
      "pending": [
        "app-dir action handling fetch actions should handle revalidateTag + redirect",
        "app-dir action handling server actions render client components client component imported action should support importing client components from actions"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-a11y/index.test.ts": {
      "passed": [
        "app a11y features route announcer should announce document.title changes",
        "app a11y features route announcer should announce h1 changes",
        "app a11y features route announcer should announce route changes when h1 changes inside an inner layout",
        "app a11y features route announcer should not announce the initital title"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-alias/app-alias.test.ts": {
      "passed": [
        "app-dir alias should generate app-build-manifest correctly",
        "app-dir alias should handle typescript paths alias correctly",
        "app-dir alias should not contain installed react/react-dom version in client chunks",
        "app-dir alias should resolve css imports from outside with src folder presented"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-basepath-custom-server/index.test.ts": {
      "passed": [
        "custom-app-server-action-redirect redirects with basepath properly when server action handler uses `redirect`"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-basepath/index.test.ts": {
      "passed": [
        "app dir - basepath should handle redirect in dynamic in suspense boundary routes with basePath",
        "app dir - basepath should prefix metadata og image with basePath",
        "app dir - basepath should prefix redirect() with basePath",
        "app dir - basepath should render usePathname without the basePath",
        "app dir - basepath should successfully hard navigate from pages -> app",
        "app dir - basepath should support Link with basePath prefixed",
        "app dir - basepath should support `basePath`"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-client-cache/client-cache.test.ts": {
      "passed": [
        "app dir client cache semantics prefetch={false} should not prefetch the page at all",
        "app dir client cache semantics prefetch={false} should re-use the cache only for 30 seconds",
        "app dir client cache semantics prefetch={true} should prefetch again after 5 mins if the link is visible again",
        "app dir client cache semantics prefetch={true} should prefetch the full page",
        "app dir client cache semantics prefetch={true} should re-use the cache for the full page, only for 5 mins",
        "app dir client cache semantics prefetch={undefined} - default should prefetch partially a dynamic page",
        "app dir client cache semantics prefetch={undefined} - default should re-use the full cache for only 30 seconds",
        "app dir client cache semantics prefetch={undefined} - default should refetch below the fold after 30 seconds",
        "app dir client cache semantics prefetch={undefined} - default should refetch the full page after 5 mins",
        "app dir client cache semantics prefetch={undefined} - default should renew the 30s cache once the data is revalidated",
        "app dir client cache semantics router.push should fully refetch the page after 30 seconds",
        "app dir client cache semantics router.push should re-use the cache for 30 seconds",
        "app dir client cache semantics should seed the prefetch cache with the fetched page data"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-compilation/index.test.ts": {
      "passed": [
        "app dir Loading should render loading.js in initial html for slow page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-config-crossorigin/index.test.ts": {
      "passed": ["app dir - crossOrigin config skip in start mode"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-css-pageextensions/index.test.ts": {
      "passed": [
        "app dir - css with pageextensions css support with pageextensions page in app directory with pageextention, css should work should support global css inside layout"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-css/index.test.ts": {
      "passed": [
        "app dir - css css support chunks should bundle css resources into chunks",
        "app dir - css css support client components should support css modules inside client components",
        "app dir - css css support client components should support css modules inside client page",
        "app dir - css css support client layouts should support css modules inside client layouts",
        "app dir - css css support client layouts should support global css inside client layouts",
        "app dir - css css support client pages should support css modules inside client pages",
        "app dir - css css support client pages should support global css inside client pages",
        "app dir - css css support css ordering should have inner layers take precedence over outer layers",
        "app dir - css css support server layouts should support css modules inside server layouts",
        "app dir - css css support server layouts should support external css imports",
        "app dir - css css support server pages should not contain pages css in app dir page",
        "app dir - css css support server pages should support css modules inside server pages",
        "app dir - css css support server pages should support global css inside server pages",
        "app dir - css css support special entries should include css imported in client not-found.js",
        "app dir - css css support special entries should include css imported in client template.js",
        "app dir - css css support special entries should include css imported in error.js",
        "app dir - css css support special entries should include css imported in loading.js",
        "app dir - css css support special entries should include css imported in root not-found.js",
        "app dir - css css support special entries should include css imported in server not-found.js",
        "app dir - css css support special entries should include css imported in server template.js",
        "app dir - css css support special entries should include root layout css for root not-found.js",
        "app dir - css pages dir should include css modules and global css after page transition",
        "app dir - css sass support client layouts should support global sass/scss inside client layouts",
        "app dir - css sass support client layouts should support sass/scss modules inside client layouts",
        "app dir - css sass support client pages should support global sass/scss inside client pages",
        "app dir - css sass support client pages should support sass/scss modules inside client pages",
        "app dir - css sass support server layouts should support global sass/scss inside server layouts",
        "app dir - css sass support server layouts should support sass/scss modules inside server layouts",
        "app dir - css sass support server pages should support global sass/scss inside server pages",
        "app dir - css sass support server pages should support sass/scss modules inside server pages"
      ],
      "failed": [
        "app dir - css css support page extensions should include css imported in MDX pages"
      ],
      "pending": [
        "app dir - css css support server layouts should support global css inside server layouts"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-custom-cache-handler/index.test.ts": {
      "passed": [
        "app-dir - custom-cache-handler - cjs cjs module exports should have logs from cache-handler",
        "app-dir - custom-cache-handler - cjs-default-export cjs default export should have logs from cache-handler",
        "app-dir - custom-cache-handler - esm esm default export should have logs from cache-handler"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-edge-root-layout/index.test.ts": {
      "passed": [
        "app-dir edge runtime root layout should mark static contain metadata routes as edge functions",
        "app-dir edge runtime root layout should not emit metadata files into bad paths"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-edge/app-edge.test.ts": {
      "passed": [
        "app-dir edge SSR should handle /index routes correctly",
        "app-dir edge SSR should handle edge only routes",
        "app-dir edge SSR should retrieve cookies in a server component in the edge runtime"
      ],
      "failed": [
        "app-dir edge SSR should generate matchers correctly in middleware manifest"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-esm-js/index.test.ts": {
      "passed": [],
      "failed": [
        "app-dir - esm js extension should be able to render nextjs api in app router",
        "app-dir - esm js extension should be able to use nextjs api in pages router",
        "app-dir - esm js extension should support next/og image"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-external/app-external.test.ts": {
      "passed": [
        "app dir - external dependency app route should resolve next/server api from external esm package",
        "app dir - external dependency mixed syntax external modules should handle mixed module in server and client components",
        "app dir - external dependency mixed syntax external modules should handle mixed module with next/dynamic",
        "app dir - external dependency react in external esm packages should support namespace import with ESM packages",
        "app dir - external dependency react in external esm packages should use the same react in client app",
        "app dir - external dependency react in external esm packages should use the same react in edge server app",
        "app dir - external dependency react in external esm packages should use the same react in pages",
        "app dir - external dependency react in external esm packages should use the same react in server app",
        "app dir - external dependency server actions should compile server actions from node_modules in client components",
        "app dir - external dependency server actions should not prefer to resolve esm over cjs for bundling optout packages",
        "app dir - external dependency should be able to opt-out 3rd party packages being bundled in server components",
        "app dir - external dependency should correctly collect global css imports and mark them as side effects",
        "app dir - external dependency should emit cjs helpers for external cjs modules when compiled",
        "app dir - external dependency should export client module references in esm",
        "app dir - external dependency should handle external async module libraries correctly",
        "app dir - external dependency should handle external css modules",
        "app dir - external dependency should handle external css modules in pages",
        "app dir - external dependency should handle external next/font",
        "app dir - external dependency should have proper tree-shaking for known modules in CJS",
        "app dir - external dependency should resolve 3rd party package exports based on the react-server condition",
        "app dir - external dependency should resolve the subset react in server components based on the react-server condition",
        "app dir - external dependency should support exporting multiple star re-exports",
        "app dir - external dependency should transpile specific external packages with the `transpilePackages` option",
        "app dir - external dependency should use the same async storages if imported directly",
        "app dir - external dependency should use the same export type for packages in both ssr and client"
      ],
      "failed": [],
      "pending": [
        "app dir - external dependency should not apply swc optimizer transform for external packages in browser layer in web worker"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-fetch-deduping/app-fetch-deduping.test.ts": {
      "passed": [
        "app-fetch-deduping during static generation dedupes requests amongst static workers when experimental.staticWorkerRequestDeduping is enabled"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-invalid-revalidate/app-invalid-revalidate.test.ts": {
      "passed": [
        "app-invalid-revalidate should error properly for invalid revalidate at layout",
        "app-invalid-revalidate should error properly for invalid revalidate at page",
        "app-invalid-revalidate should error properly for invalid revalidate on fetch",
        "app-invalid-revalidate should error properly for invalid revalidate on unstable_cache"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-middleware/app-middleware.test.ts": {
      "passed": [
        "app dir - middleware with middleware in src dir works without crashing when using requestAsyncStorage",
        "app dir - middleware without pages dir Updates headers",
        "app-dir with middleware Mutate request headers for Edge Functions Adds new headers",
        "app-dir with middleware Mutate request headers for Edge Functions Deletes headers",
        "app-dir with middleware Mutate request headers for Edge Functions Supports draft mode",
        "app-dir with middleware Mutate request headers for Edge Functions Updates headers",
        "app-dir with middleware Mutate request headers for Serverless Functions Adds new headers",
        "app-dir with middleware Mutate request headers for Serverless Functions Deletes headers",
        "app-dir with middleware Mutate request headers for Serverless Functions Supports draft mode",
        "app-dir with middleware Mutate request headers for Serverless Functions Updates headers",
        "app-dir with middleware Mutate request headers for next/headers Adds new headers",
        "app-dir with middleware Mutate request headers for next/headers Deletes headers",
        "app-dir with middleware Mutate request headers for next/headers Supports draft mode",
        "app-dir with middleware Mutate request headers for next/headers Updates headers"
      ],
      "failed": [
        "app-dir with middleware should filter correctly after middleware rewrite"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-prefetch-false-loading/app-prefetch-false-loading.test.ts": {
      "passed": [
        "app-prefetch-false-loading should not re-trigger loading state when navigating between pages that share a dynamic layout",
        "app-prefetch-false-loading should render loading for the initial render"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-prefetch-false/app-prefetch-false.test.ts": {
      "passed": [
        "app-prefetch-false should avoid double-fetching when optimistic navigation fails"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-prefetch-static/app-prefetch-static.test.ts": {
      "passed": [
        "app-prefetch-static should correctly navigate between static & dynamic pages"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-prefetch/prefetching.test.ts": {
      "passed": [
        "app dir - prefetching NEXT_RSC_UNION_QUERY query name is _rsc",
        "app dir - prefetching dynamic rendering /force-dynamic should not re-render layout when navigating between sub-pages",
        "app dir - prefetching dynamic rendering /force-dynamic should update search params following a link click",
        "app dir - prefetching dynamic rendering /revalidate-0 should not re-render layout when navigating between sub-pages",
        "app dir - prefetching dynamic rendering /revalidate-0 should update search params following a link click",
        "app dir - prefetching dynamic rendering should not re-fetch cached data when navigating back to a route group",
        "app dir - prefetching should calculate `_rsc` query based on `Next-Url`",
        "app dir - prefetching should navigate when prefetch is false",
        "app dir - prefetching should not fetch again when a static page was prefetched",
        "app dir - prefetching should not fetch again when a static page was prefetched when navigating to it twice",
        "app dir - prefetching should not have prefetch error for static path",
        "app dir - prefetching should not need to prefetch the layout if the prefetch is initiated at the same segment",
        "app dir - prefetching should not prefetch for a bot user agent",
        "app dir - prefetching should only prefetch the loading state and not the component tree when prefetching at the same segment",
        "app dir - prefetching should show layout eagerly when prefetched with loading one level down"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-rendering/rendering.test.ts": {
      "passed": [
        "app dir rendering ISR should revalidate the page when revalidate is configured",
        "app dir rendering SSR only should run data fetch in parallel",
        "app dir rendering SSR only should run data in layout and page",
        "app dir rendering should serve app/page.server.js at /",
        "app dir rendering static only should run data in layout and page",
        "app dir rendering static only should run data in parallel and use cached version for production"
      ],
      "failed": [],
      "pending": [
        "app dir rendering mixed static and dynamic should generate static data during build and use it"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-routes-subrequests/app-routes-subrequests.test.ts": {
      "passed": ["app-routes-subrequests shortcuts after 5 subrequests"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-routes-trailing-slash/app-routes-trailing-slash.test.ts": {
      "passed": [
        "app-routes-trailing-slash should handle trailing slash for edge runtime",
        "app-routes-trailing-slash should handle trailing slash for node runtime"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-routes/app-custom-route-base-path.test.ts": {
      "passed": [
        "app-custom-routes automatic implementations implements HEAD on routes with GET already implemented",
        "app-custom-routes automatic implementations implements OPTIONS on routes",
        "app-custom-routes basic fetch request with a response made via a DELETE request responds correctly on /basic/endpoint",
        "app-custom-routes basic fetch request with a response made via a DELETE request responds correctly on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response made via a GET request responds correctly on /basic/endpoint",
        "app-custom-routes basic fetch request with a response made via a GET request responds correctly on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response made via a PATCH request responds correctly on /basic/endpoint",
        "app-custom-routes basic fetch request with a response made via a PATCH request responds correctly on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response made via a POST request responds correctly on /basic/endpoint",
        "app-custom-routes basic fetch request with a response made via a POST request responds correctly on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response made via a PUT request responds correctly on /basic/endpoint",
        "app-custom-routes basic fetch request with a response made via a PUT request responds correctly on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response request can read query parameters",
        "app-custom-routes basic fetch request with a response request can read query parameters (edge)",
        "app-custom-routes basic fetch request with a response response supports the NextResponse.json() helper",
        "app-custom-routes basic fetch request with a response response supports the NextResponse.redirect() helper",
        "app-custom-routes basic fetch request with a response route groups routes to the correct handler",
        "app-custom-routes body can handle handle a streaming request and streaming response",
        "app-custom-routes body can handle handle a streaming request and streaming response (edge)",
        "app-custom-routes body can read a JSON encoded body",
        "app-custom-routes body can read a JSON encoded body (edge)",
        "app-custom-routes body can read a JSON encoded body for DELETE requests",
        "app-custom-routes body can read a JSON encoded body for OPTIONS requests",
        "app-custom-routes body can read a streamed JSON encoded body",
        "app-custom-routes body can read a streamed JSON encoded body (edge)",
        "app-custom-routes body can read the text body",
        "app-custom-routes body can read the text body (edge)",
        "app-custom-routes context does not provide params to routes without dynamic parameters",
        "app-custom-routes context provides params to routes with catch-all routes",
        "app-custom-routes context provides params to routes with dynamic parameters",
        "app-custom-routes customized metadata routes should work if conflict with metadata routes convention",
        "app-custom-routes dynamic = \"force-static\" strips search, headers, and domain from request",
        "app-custom-routes edge functions returns a response when headers are accessed",
        "app-custom-routes edge functions returns response using edge runtime",
        "app-custom-routes error conditions responds with 400 (Bad Request) when the requested method is not a valid HTTP method",
        "app-custom-routes error conditions responds with 405 (Method Not Allowed) when method is not implemented",
        "app-custom-routes error conditions responds with 500 (Internal Server Error) when the handler calls NextResponse.next()",
        "app-custom-routes error conditions responds with 500 (Internal Server Error) when the handler throws an error",
        "app-custom-routes hooks cookies gets the correct values",
        "app-custom-routes hooks cookies().has() gets the correct values",
        "app-custom-routes hooks headers gets the correct values",
        "app-custom-routes hooks notFound can respond correctly in edge",
        "app-custom-routes hooks notFound can respond correctly in nodejs",
        "app-custom-routes hooks permanentRedirect can respond correctly",
        "app-custom-routes hooks redirect can respond correctly",
        "app-custom-routes hooks req.cookies gets the correct values",
        "app-custom-routes no bundle error should not print bundling warning about React",
        "app-custom-routes no response returned should print an error when no response is returned",
        "app-custom-routes works with api prefix correctly does not statically generate with dynamic usage",
        "app-custom-routes works with api prefix correctly statically generates correctly with no dynamic usage",
        "app-custom-routes works with generateStaticParams correctly responds correctly on /static/first/data.json",
        "app-custom-routes works with generateStaticParams correctly responds correctly on /static/second/data.json",
        "app-custom-routes works with generateStaticParams correctly responds correctly on /static/three/data.json",
        "app-custom-routes works with generateStaticParams correctly revalidates correctly on /revalidate-1/first/data.json",
        "app-custom-routes works with generateStaticParams correctly revalidates correctly on /revalidate-1/second/data.json",
        "app-custom-routes works with generateStaticParams correctly revalidates correctly on /revalidate-1/three/data.json"
      ],
      "failed": [],
      "pending": [
        "app-custom-routes basic fetch request with a response response supports the NextResponse.rewrite() helper"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-routes/app-custom-routes.test.ts": {
      "passed": [
        "app-custom-routes automatic implementations implements HEAD on routes with GET already implemented",
        "app-custom-routes automatic implementations implements OPTIONS on routes",
        "app-custom-routes basic fetch request with a response made via a DELETE request responds correctly on /basic/endpoint",
        "app-custom-routes basic fetch request with a response made via a DELETE request responds correctly on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response made via a GET request responds correctly on /basic/endpoint",
        "app-custom-routes basic fetch request with a response made via a GET request responds correctly on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response made via a PATCH request responds correctly on /basic/endpoint",
        "app-custom-routes basic fetch request with a response made via a PATCH request responds correctly on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response made via a POST request responds correctly on /basic/endpoint",
        "app-custom-routes basic fetch request with a response made via a POST request responds correctly on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response made via a PUT request responds correctly on /basic/endpoint",
        "app-custom-routes basic fetch request with a response made via a PUT request responds correctly on /basic/vercel/endpoint",
        "app-custom-routes basic fetch request with a response request can read query parameters",
        "app-custom-routes basic fetch request with a response request can read query parameters (edge)",
        "app-custom-routes basic fetch request with a response response supports the NextResponse.json() helper",
        "app-custom-routes basic fetch request with a response response supports the NextResponse.redirect() helper",
        "app-custom-routes basic fetch request with a response route groups routes to the correct handler",
        "app-custom-routes body can handle handle a streaming request and streaming response",
        "app-custom-routes body can handle handle a streaming request and streaming response (edge)",
        "app-custom-routes body can read a JSON encoded body",
        "app-custom-routes body can read a JSON encoded body (edge)",
        "app-custom-routes body can read a JSON encoded body for DELETE requests",
        "app-custom-routes body can read a JSON encoded body for OPTIONS requests",
        "app-custom-routes body can read a streamed JSON encoded body",
        "app-custom-routes body can read a streamed JSON encoded body (edge)",
        "app-custom-routes body can read the text body",
        "app-custom-routes body can read the text body (edge)",
        "app-custom-routes context does not provide params to routes without dynamic parameters",
        "app-custom-routes context provides params to routes with catch-all routes",
        "app-custom-routes context provides params to routes with dynamic parameters",
        "app-custom-routes customized metadata routes should work if conflict with metadata routes convention",
        "app-custom-routes dynamic = \"force-static\" strips search, headers, and domain from request",
        "app-custom-routes edge functions returns a response when headers are accessed",
        "app-custom-routes edge functions returns response using edge runtime",
        "app-custom-routes error conditions responds with 400 (Bad Request) when the requested method is not a valid HTTP method",
        "app-custom-routes error conditions responds with 405 (Method Not Allowed) when method is not implemented",
        "app-custom-routes error conditions responds with 500 (Internal Server Error) when the handler calls NextResponse.next()",
        "app-custom-routes error conditions responds with 500 (Internal Server Error) when the handler throws an error",
        "app-custom-routes hooks cookies gets the correct values",
        "app-custom-routes hooks cookies().has() gets the correct values",
        "app-custom-routes hooks headers gets the correct values",
        "app-custom-routes hooks notFound can respond correctly in edge",
        "app-custom-routes hooks notFound can respond correctly in nodejs",
        "app-custom-routes hooks permanentRedirect can respond correctly",
        "app-custom-routes hooks redirect can respond correctly",
        "app-custom-routes hooks req.cookies gets the correct values",
        "app-custom-routes no bundle error should not print bundling warning about React",
        "app-custom-routes no response returned should print an error when no response is returned",
        "app-custom-routes works with api prefix correctly does not statically generate with dynamic usage",
        "app-custom-routes works with api prefix correctly statically generates correctly with no dynamic usage",
        "app-custom-routes works with generateStaticParams correctly responds correctly on /static/first/data.json",
        "app-custom-routes works with generateStaticParams correctly responds correctly on /static/second/data.json",
        "app-custom-routes works with generateStaticParams correctly responds correctly on /static/three/data.json",
        "app-custom-routes works with generateStaticParams correctly revalidates correctly on /revalidate-1/first/data.json",
        "app-custom-routes works with generateStaticParams correctly revalidates correctly on /revalidate-1/second/data.json",
        "app-custom-routes works with generateStaticParams correctly revalidates correctly on /revalidate-1/three/data.json"
      ],
      "failed": [],
      "pending": [
        "app-custom-routes basic fetch request with a response response supports the NextResponse.rewrite() helper"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-simple-routes/app-simple-routes.test.ts": {
      "passed": [
        "app-simple-routes works with simple routes renders a edge route",
        "app-simple-routes works with simple routes renders a node route"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-static/app-static-custom-handler.test.ts": {
      "passed": [
        "app-dir static/dynamic handling Incremental cache limits should cache large data when using custom cache handler and force-cache mode",
        "app-dir static/dynamic handling should allow dynamic routes to access cookies",
        "app-dir static/dynamic handling should build dynamic param with edge runtime correctly",
        "app-dir static/dynamic handling should cache correctly for cache: no-store",
        "app-dir static/dynamic handling should cache correctly for fetchCache = default-cache",
        "app-dir static/dynamic handling should cache correctly for fetchCache = force-cache",
        "app-dir static/dynamic handling should cache correctly handle JSON body",
        "app-dir static/dynamic handling should cache correctly with POST method and revalidate",
        "app-dir static/dynamic handling should cache correctly with authorization header and revalidate",
        "app-dir static/dynamic handling should cache correctly with cookie header and revalidate",
        "app-dir static/dynamic handling should cache correctly with post method and revalidate",
        "app-dir static/dynamic handling should cache correctly with post method and revalidate edge",
        "app-dir static/dynamic handling should cache correctly with utf8 encoding",
        "app-dir static/dynamic handling should cache correctly with utf8 encoding edge",
        "app-dir static/dynamic handling should correctly handle fetchCache = \"force-no-store\"",
        "app-dir static/dynamic handling should correctly handle statusCode with notFound + ISR",
        "app-dir static/dynamic handling should correctly include headers instance in cache key",
        "app-dir static/dynamic handling should correctly skip caching POST fetch for POST handler",
        "app-dir static/dynamic handling should force SSR correctly for headers usage",
        "app-dir static/dynamic handling should handle dynamicParams: true correctly",
        "app-dir static/dynamic handling should handle partial-gen-params with default dynamicParams correctly",
        "app-dir static/dynamic handling should handle partial-gen-params with layout dynamicParams = false correctly",
        "app-dir static/dynamic handling should handle partial-gen-params with page dynamicParams = false correctly",
        "app-dir static/dynamic handling should have deterministic etag across revalidates",
        "app-dir static/dynamic handling should have logs from cache-handler",
        "app-dir static/dynamic handling should honor fetch cache correctly",
        "app-dir static/dynamic handling should honor fetch cache correctly (edge)",
        "app-dir static/dynamic handling should keep querystring on static page",
        "app-dir static/dynamic handling should not cache correctly with POST method request init",
        "app-dir static/dynamic handling should not cache non-ok statusCode",
        "app-dir static/dynamic handling should not error with dynamic server usage with force-static",
        "app-dir static/dynamic handling should not error with force-dynamic and catch-all routes",
        "app-dir static/dynamic handling should not error with generateStaticParams and authed data on revalidate",
        "app-dir static/dynamic handling should not error with generateStaticParams and dynamic data",
        "app-dir static/dynamic handling should not have cache tags header for non-minimal mode",
        "app-dir static/dynamic handling should not throw Dynamic Server Usage error when using generateStaticParams with draftMode",
        "app-dir static/dynamic handling should output debug info for static bailouts",
        "app-dir static/dynamic handling should produce response with url from fetch",
        "app-dir static/dynamic handling should propagate unstable_cache tags correctly",
        "app-dir static/dynamic handling should properly error when dynamic = \"error\" page uses dynamic",
        "app-dir static/dynamic handling should render not found pages correctly and fallback to the default one",
        "app-dir static/dynamic handling should skip cache in draft mode",
        "app-dir static/dynamic handling should ssr dynamically when detected automatically with fetch cache option",
        "app-dir static/dynamic handling should ssr dynamically when forced via config",
        "app-dir static/dynamic handling should stream properly for /stale-cache-serving-edge/app-page",
        "app-dir static/dynamic handling should stream properly for /stale-cache-serving-edge/route-handler",
        "app-dir static/dynamic handling should stream properly for /stale-cache-serving/app-page",
        "app-dir static/dynamic handling should stream properly for /stale-cache-serving/route-handler",
        "app-dir static/dynamic handling should warn for too many cache tags",
        "app-dir static/dynamic handling should work with dynamic path no generateStaticParams",
        "app-dir static/dynamic handling should work with forced dynamic path",
        "app-dir static/dynamic handling unstable-cache should work in pages/api/unstable-cache-edge",
        "app-dir static/dynamic handling unstable-cache should work in pages/api/unstable-cache-node",
        "app-dir static/dynamic handling unstable-cache should work in pages/unstable-cache-edge",
        "app-dir static/dynamic handling unstable-cache should work in pages/unstable-cache-node",
        "app-dir static/dynamic handling unstable_cache should not error when retrieving the value undefined",
        "app-dir static/dynamic handling unstable_cache should retrieve the same value on second request",
        "app-dir static/dynamic handling unstable_noStore should not opt-out of static optimization when used in next/cache",
        "app-dir static/dynamic handling unstable_noStore should opt-out of static optimization",
        "app-dir static/dynamic handling usePathname should have the correct values",
        "app-dir static/dynamic handling usePathname should have values from canonical url on rewrite",
        "app-dir static/dynamic handling useSearchParams client should bailout to client rendering - with suspense boundary",
        "app-dir static/dynamic handling useSearchParams client should have values from canonical url on rewrite",
        "app-dir static/dynamic handling useSearchParams server response should bailout to client rendering - with suspense boundary"
      ],
      "failed": [
        "app-dir static/dynamic handling should have correct prerender-manifest entries",
        "app-dir static/dynamic handling should output HTML/RSC files for static paths"
      ],
      "pending": [
        "app-dir static/dynamic handling should correctly de-dupe fetch without next cache /react-fetch-deduping-edge",
        "app-dir static/dynamic handling should correctly de-dupe fetch without next cache /react-fetch-deduping-node",
        "app-dir static/dynamic handling should ssr dynamically when detected automatically with fetch revalidate option",
        "app-dir static/dynamic handling useSearchParams client should have empty search params on force-static",
        "app-dir static/dynamic handling useSearchParams server response should have empty search params on force-static"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-static/app-static.test.ts": {
      "passed": [
        "app-dir static/dynamic handling Incremental cache limits should load data only at build time even if response data size is greater than 2MB and FetchCache is possible",
        "app-dir static/dynamic handling it should revalidate correctly with edge route handler",
        "app-dir static/dynamic handling it should revalidate correctly with node route handler",
        "app-dir static/dynamic handling it should revalidate tag correctly with edge route handler",
        "app-dir static/dynamic handling it should revalidate tag correctly with node route handler",
        "app-dir static/dynamic handling should allow dynamic routes to access cookies",
        "app-dir static/dynamic handling should build dynamic param with edge runtime correctly",
        "app-dir static/dynamic handling should cache correctly for cache: no-store",
        "app-dir static/dynamic handling should cache correctly for fetchCache = default-cache",
        "app-dir static/dynamic handling should cache correctly for fetchCache = force-cache",
        "app-dir static/dynamic handling should cache correctly handle JSON body",
        "app-dir static/dynamic handling should cache correctly with POST method and revalidate",
        "app-dir static/dynamic handling should cache correctly with authorization header and revalidate",
        "app-dir static/dynamic handling should cache correctly with cookie header and revalidate",
        "app-dir static/dynamic handling should cache correctly with post method and revalidate",
        "app-dir static/dynamic handling should cache correctly with post method and revalidate edge",
        "app-dir static/dynamic handling should cache correctly with utf8 encoding",
        "app-dir static/dynamic handling should cache correctly with utf8 encoding edge",
        "app-dir static/dynamic handling should correctly error and not update cache for ISR",
        "app-dir static/dynamic handling should correctly handle fetchCache = \"force-no-store\"",
        "app-dir static/dynamic handling should correctly handle statusCode with notFound + ISR",
        "app-dir static/dynamic handling should correctly include headers instance in cache key",
        "app-dir static/dynamic handling should correctly skip caching POST fetch for POST handler",
        "app-dir static/dynamic handling should force SSR correctly for headers usage",
        "app-dir static/dynamic handling should handle dynamicParams: false correctly",
        "app-dir static/dynamic handling should handle dynamicParams: true correctly",
        "app-dir static/dynamic handling should handle partial-gen-params with default dynamicParams correctly",
        "app-dir static/dynamic handling should handle partial-gen-params with layout dynamicParams = false correctly",
        "app-dir static/dynamic handling should handle partial-gen-params with page dynamicParams = false correctly",
        "app-dir static/dynamic handling should have deterministic etag across revalidates",
        "app-dir static/dynamic handling should honor dynamic = \"force-static\" correctly",
        "app-dir static/dynamic handling should honor dynamic = \"force-static\" correctly (lazy)",
        "app-dir static/dynamic handling should honor fetch cache correctly",
        "app-dir static/dynamic handling should honor fetch cache correctly (edge)",
        "app-dir static/dynamic handling should honor fetch cache in generateStaticParams",
        "app-dir static/dynamic handling should honor force-static with fetch cache: no-store correctly",
        "app-dir static/dynamic handling should keep querystring on static page",
        "app-dir static/dynamic handling should navigate to static path correctly",
        "app-dir static/dynamic handling should not cache correctly with POST method request init",
        "app-dir static/dynamic handling should not cache non-ok statusCode",
        "app-dir static/dynamic handling should not error with dynamic server usage with force-static",
        "app-dir static/dynamic handling should not error with force-dynamic and catch-all routes",
        "app-dir static/dynamic handling should not error with generateStaticParams and authed data on revalidate",
        "app-dir static/dynamic handling should not error with generateStaticParams and dynamic data",
        "app-dir static/dynamic handling should not have cache tags header for non-minimal mode",
        "app-dir static/dynamic handling should not revalidate / when revalidate is not used",
        "app-dir static/dynamic handling should not throw Dynamic Server Usage error when using generateStaticParams with draftMode",
        "app-dir static/dynamic handling should output debug info for static bailouts",
        "app-dir static/dynamic handling should produce response with url from fetch",
        "app-dir static/dynamic handling should propagate unstable_cache tags correctly",
        "app-dir static/dynamic handling should properly error when dynamic = \"error\" page uses dynamic",
        "app-dir static/dynamic handling should properly revalidate a route handler that triggers dynamic usage with force-static",
        "app-dir static/dynamic handling should render not found pages correctly and fallback to the default one",
        "app-dir static/dynamic handling should revalidate all fetches during on-demand revalidate",
        "app-dir static/dynamic handling should revalidate correctly with config and fetch revalidate",
        "app-dir static/dynamic handling should skip cache in draft mode",
        "app-dir static/dynamic handling should ssr dynamically when detected automatically with fetch cache option",
        "app-dir static/dynamic handling should ssr dynamically when forced via config",
        "app-dir static/dynamic handling should stream properly for /stale-cache-serving-edge/app-page",
        "app-dir static/dynamic handling should stream properly for /stale-cache-serving-edge/route-handler",
        "app-dir static/dynamic handling should stream properly for /stale-cache-serving/app-page",
        "app-dir static/dynamic handling should stream properly for /stale-cache-serving/route-handler",
        "app-dir static/dynamic handling should warn for too many cache tags",
        "app-dir static/dynamic handling should work with dynamic path no generateStaticParams",
        "app-dir static/dynamic handling should work with forced dynamic path",
        "app-dir static/dynamic handling unstable-cache should work in pages/api/unstable-cache-edge",
        "app-dir static/dynamic handling unstable-cache should work in pages/api/unstable-cache-node",
        "app-dir static/dynamic handling unstable-cache should work in pages/unstable-cache-edge",
        "app-dir static/dynamic handling unstable-cache should work in pages/unstable-cache-node",
        "app-dir static/dynamic handling unstable_cache should not error when retrieving the value undefined",
        "app-dir static/dynamic handling unstable_cache should retrieve the same value on second request",
        "app-dir static/dynamic handling unstable_noStore should not opt-out of static optimization when used in next/cache",
        "app-dir static/dynamic handling unstable_noStore should opt-out of static optimization",
        "app-dir static/dynamic handling usePathname should have the correct values",
        "app-dir static/dynamic handling usePathname should have values from canonical url on rewrite",
        "app-dir static/dynamic handling useSearchParams client should bailout to client rendering - with suspense boundary",
        "app-dir static/dynamic handling useSearchParams client should have values from canonical url on rewrite",
        "app-dir static/dynamic handling useSearchParams server response should bailout to client rendering - with suspense boundary"
      ],
      "failed": [
        "app-dir static/dynamic handling should have correct prerender-manifest entries",
        "app-dir static/dynamic handling should output HTML/RSC files for static paths"
      ],
      "pending": [
        "app-dir static/dynamic handling should correctly de-dupe fetch without next cache /react-fetch-deduping-edge",
        "app-dir static/dynamic handling should correctly de-dupe fetch without next cache /react-fetch-deduping-node",
        "app-dir static/dynamic handling should ssr dynamically when detected automatically with fetch revalidate option",
        "app-dir static/dynamic handling useSearchParams client should have empty search params on force-static",
        "app-dir static/dynamic handling useSearchParams server response should have empty search params on force-static"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app-validation/validation.test.ts": {
      "passed": [
        "app dir - validation should error when passing invalid router state tree"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app/experimental-compile.test.ts": {
      "passed": [
        "app dir - basic <Link /> should allow linking from app page to pages page",
        "app dir - basic <Link /> should be soft for back navigation",
        "app dir - basic <Link /> should be soft for forward navigation",
        "app dir - basic <Link /> should hard push",
        "app dir - basic <Link /> should hard replace",
        "app dir - basic <Link /> should navigate to pages dynamic route from pages page if it overlaps with an app page",
        "app dir - basic <Link /> should push to external url",
        "app dir - basic <Link /> should replace to external url",
        "app dir - basic <Link /> should soft push",
        "app dir - basic bootstrap scripts should only bootstrap with one script, prinitializing the rest",
        "app dir - basic bootstrap scripts should successfully bootstrap even when using CSP",
        "app dir - basic data fetch with response over 16KB with chunked encoding should load page when fetching a large amount of data",
        "app dir - basic known bugs should handle as on next/link",
        "app dir - basic known bugs should handle next/link back to initially loaded page",
        "app dir - basic known bugs should handle router.refresh without resetting state",
        "app dir - basic known bugs should not do additional pushState when already on the page",
        "app dir - basic known bugs should not share flight data between requests",
        "app dir - basic known bugs should support React cache client component",
        "app dir - basic known bugs should support React cache client component client-navigation",
        "app dir - basic known bugs should support React cache middleware overriding headers",
        "app dir - basic known bugs should support React cache server component",
        "app dir - basic known bugs should support React cache server component client-navigation",
        "app dir - basic known bugs should support React fetch instrumentation server component",
        "app dir - basic known bugs should support React fetch instrumentation server component client-navigation",
        "app dir - basic next/script should insert preload tags for beforeInteractive and afterInteractive scripts",
        "app dir - basic next/script should load stylesheets for next/scripts",
        "app dir - basic next/script should pass on extra props for beforeInteractive scripts with a src prop",
        "app dir - basic next/script should pass on extra props for beforeInteractive scripts without a src prop",
        "app dir - basic next/script should support next/script and render in correct order",
        "app dir - basic rewrites should support rewrites on client-side navigation",
        "app dir - basic rewrites should support rewrites on client-side navigation from pages to app with existing pages path",
        "app dir - basic rewrites should support rewrites on initial load",
        "app dir - basic searchParams prop client component should have the correct search params",
        "app dir - basic searchParams prop client component should have the correct search params on middleware rewrite",
        "app dir - basic searchParams prop client component should have the correct search params on rewrite",
        "app dir - basic searchParams prop server component should have the correct search params",
        "app dir - basic searchParams prop server component should have the correct search params on middleware rewrite",
        "app dir - basic searchParams prop server component should have the correct search params on rewrite",
        "app dir - basic server components Loading should render loading.js in browser for slow layout",
        "app dir - basic server components Loading should render loading.js in browser for slow layout and page",
        "app dir - basic server components Loading should render loading.js in browser for slow page",
        "app dir - basic server components Loading should render loading.js in initial html for slow layout",
        "app dir - basic server components Loading should render loading.js in initial html for slow layout and page",
        "app dir - basic server components Loading should render loading.js in initial html for slow page",
        "app dir - basic server components catch-all routes should handle catch-all segments link",
        "app dir - basic server components catch-all routes should handle optional catch-all segments link",
        "app dir - basic server components catch-all routes should handle optional segments",
        "app dir - basic server components catch-all routes should handle optional segments root",
        "app dir - basic server components catch-all routes should handle required segments",
        "app dir - basic server components catch-all routes should handle required segments root as not found",
        "app dir - basic server components client components should have consistent query and params handling",
        "app dir - basic server components dynamic routes should only pass params that apply to the layout",
        "app dir - basic server components middleware should strip internal query parameters from requests to middleware for redirect",
        "app dir - basic server components middleware should strip internal query parameters from requests to middleware for rewrite",
        "app dir - basic server components next/router should support router.back and router.forward",
        "app dir - basic server components should include client component layout with server component route should include it client-side",
        "app dir - basic server components should include client component layout with server component route should include it server-side",
        "app dir - basic server components should not serve .client.js as a path",
        "app dir - basic server components should not serve .server.js as a path",
        "app dir - basic server components should serve client component should serve client-side",
        "app dir - basic server components should serve client component should serve server-side",
        "app dir - basic server components should serve shared component",
        "app dir - basic should encode chunk path correctly",
        "app dir - basic should ensure the </body></html> suffix is at the end of the stream",
        "app dir - basic should generate build traces correctly",
        "app dir - basic should handle hash in initial url",
        "app dir - basic should have correct searchParams and params (client)",
        "app dir - basic should have correct searchParams and params (server)",
        "app dir - basic should include document html and body",
        "app dir - basic should include layouts when no direct parent layout",
        "app dir - basic should include parent document when no direct parent layout",
        "app dir - basic should match redirects in pages correctly $path",
        "app dir - basic should not apply client router filter on shallow",
        "app dir - basic should not create new root layout when nested (optional)",
        "app dir - basic should not include parent when not in parent directory",
        "app dir - basic should not rerender layout when navigating between routes in the same layout",
        "app dir - basic should not serve when layout is provided but no folder index",
        "app dir - basic should not share edge workers",
        "app dir - basic should pass props from getServerSideProps in root layout",
        "app dir - basic should provide query for getStaticProps page correctly",
        "app dir - basic should return normalized dynamic route params for catch-all edge page",
        "app dir - basic should return the `vary` header from edge runtime",
        "app dir - basic should return the `vary` header from pages for flight requests",
        "app dir - basic should serve /index as separate page",
        "app dir - basic should serve dynamic parameter",
        "app dir - basic should serve dynamic route from pages",
        "app dir - basic should serve from app",
        "app dir - basic should serve from pages",
        "app dir - basic should serve from public",
        "app dir - basic should serve nested parent",
        "app dir - basic should serve page as a segment name correctly",
        "app dir - basic should serve polyfills for browsers that do not support modules",
        "app dir - basic should successfully detect app route during prefetch",
        "app dir - basic should use new root layout when provided",
        "app dir - basic should use text/x-component for flight",
        "app dir - basic should use text/x-component for flight with edge runtime",
        "app dir - basic should work for catch-all edge page",
        "app dir - basic template component should render the template that holds state in a client component and reset on navigation",
        "app dir - basic template component should render the template that is a server component and rerender on navigation"
      ],
      "failed": [],
      "pending": [
        "app dir - basic <Link /> should soft replace",
        "app dir - basic known bugs should support React fetch instrumentation client component",
        "app dir - basic known bugs should support React fetch instrumentation client component client-navigation",
        "app dir - basic should handle css imports in next/dynamic correctly",
        "app dir - basic should match partial parameters",
        "app dir - basic should not include parent when not in parent directory with route in directory"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app/index.test.ts": {
      "passed": [],
      "failed": [
        "app dir - basic <Link /> should allow linking from app page to pages page",
        "app dir - basic <Link /> should be soft for back navigation",
        "app dir - basic <Link /> should be soft for forward navigation",
        "app dir - basic <Link /> should hard push",
        "app dir - basic <Link /> should hard replace",
        "app dir - basic <Link /> should navigate to pages dynamic route from pages page if it overlaps with an app page",
        "app dir - basic <Link /> should push to external url",
        "app dir - basic <Link /> should replace to external url",
        "app dir - basic <Link /> should soft push",
        "app dir - basic bootstrap scripts should only bootstrap with one script, prinitializing the rest",
        "app dir - basic bootstrap scripts should successfully bootstrap even when using CSP",
        "app dir - basic data fetch with response over 16KB with chunked encoding should load page when fetching a large amount of data",
        "app dir - basic known bugs should handle as on next/link",
        "app dir - basic known bugs should handle next/link back to initially loaded page",
        "app dir - basic known bugs should handle router.refresh without resetting state",
        "app dir - basic known bugs should not do additional pushState when already on the page",
        "app dir - basic known bugs should not share flight data between requests",
        "app dir - basic known bugs should support React cache client component",
        "app dir - basic known bugs should support React cache client component client-navigation",
        "app dir - basic known bugs should support React cache middleware overriding headers",
        "app dir - basic known bugs should support React cache server component",
        "app dir - basic known bugs should support React cache server component client-navigation",
        "app dir - basic known bugs should support React fetch instrumentation server component",
        "app dir - basic known bugs should support React fetch instrumentation server component client-navigation",
        "app dir - basic next/script should insert preload tags for beforeInteractive and afterInteractive scripts",
        "app dir - basic next/script should load stylesheets for next/scripts",
        "app dir - basic next/script should pass `nonce`",
        "app dir - basic next/script should pass on extra props for beforeInteractive scripts with a src prop",
        "app dir - basic next/script should pass on extra props for beforeInteractive scripts without a src prop",
        "app dir - basic next/script should support next/script and render in correct order",
        "app dir - basic rewrites should support rewrites on client-side navigation",
        "app dir - basic rewrites should support rewrites on client-side navigation from pages to app with existing pages path",
        "app dir - basic rewrites should support rewrites on initial load",
        "app dir - basic searchParams prop client component should have the correct search params",
        "app dir - basic searchParams prop client component should have the correct search params on middleware rewrite",
        "app dir - basic searchParams prop client component should have the correct search params on rewrite",
        "app dir - basic searchParams prop server component should have the correct search params",
        "app dir - basic searchParams prop server component should have the correct search params on middleware rewrite",
        "app dir - basic searchParams prop server component should have the correct search params on rewrite",
        "app dir - basic server components Loading should render loading.js in browser for slow layout",
        "app dir - basic server components Loading should render loading.js in browser for slow layout and page",
        "app dir - basic server components Loading should render loading.js in browser for slow page",
        "app dir - basic server components Loading should render loading.js in initial html for slow layout",
        "app dir - basic server components Loading should render loading.js in initial html for slow layout and page",
        "app dir - basic server components Loading should render loading.js in initial html for slow page",
        "app dir - basic server components catch-all routes should handle catch-all segments link",
        "app dir - basic server components catch-all routes should handle optional catch-all segments link",
        "app dir - basic server components catch-all routes should handle optional segments",
        "app dir - basic server components catch-all routes should handle optional segments root",
        "app dir - basic server components catch-all routes should handle required segments",
        "app dir - basic server components catch-all routes should handle required segments root as not found",
        "app dir - basic server components client components should have consistent query and params handling",
        "app dir - basic server components dynamic routes should only pass params that apply to the layout",
        "app dir - basic server components middleware should strip internal query parameters from requests to middleware for redirect",
        "app dir - basic server components middleware should strip internal query parameters from requests to middleware for rewrite",
        "app dir - basic server components next/router should support router.back and router.forward",
        "app dir - basic server components should include client component layout with server component route should include it client-side",
        "app dir - basic server components should include client component layout with server component route should include it server-side",
        "app dir - basic server components should not serve .client.js as a path",
        "app dir - basic server components should not serve .server.js as a path",
        "app dir - basic server components should serve client component should serve client-side",
        "app dir - basic server components should serve client component should serve server-side",
        "app dir - basic server components should serve shared component",
        "app dir - basic should encode chunk path correctly",
        "app dir - basic should ensure the </body></html> suffix is at the end of the stream",
        "app dir - basic should generate build traces correctly",
        "app dir - basic should handle hash in initial url",
        "app dir - basic should have correct preferredRegion values in manifest",
        "app dir - basic should have correct searchParams and params (client)",
        "app dir - basic should have correct searchParams and params (server)",
        "app dir - basic should have correct size in build output",
        "app dir - basic should include document html and body",
        "app dir - basic should include layouts when no direct parent layout",
        "app dir - basic should include parent document when no direct parent layout",
        "app dir - basic should match redirects in pages correctly $path",
        "app dir - basic should not apply client router filter on shallow",
        "app dir - basic should not create new root layout when nested (optional)",
        "app dir - basic should not have loader generated function for edge runtime",
        "app dir - basic should not include parent when not in parent directory",
        "app dir - basic should not rerender layout when navigating between routes in the same layout",
        "app dir - basic should not serve when layout is provided but no folder index",
        "app dir - basic should not share edge workers",
        "app dir - basic should pass props from getServerSideProps in root layout",
        "app dir - basic should return normalized dynamic route params for catch-all edge page",
        "app dir - basic should return the `vary` header from edge runtime",
        "app dir - basic should return the `vary` header from pages for flight requests",
        "app dir - basic should serve /index as separate page",
        "app dir - basic should serve dynamic parameter",
        "app dir - basic should serve dynamic route from pages",
        "app dir - basic should serve from app",
        "app dir - basic should serve from pages",
        "app dir - basic should serve from public",
        "app dir - basic should serve nested parent",
        "app dir - basic should serve page as a segment name correctly",
        "app dir - basic should serve polyfills for browsers that do not support modules",
        "app dir - basic should successfully detect app route during prefetch",
        "app dir - basic should use new root layout when provided",
        "app dir - basic should use text/x-component for flight",
        "app dir - basic should use text/x-component for flight with edge runtime",
        "app dir - basic should work for catch-all edge page",
        "app dir - basic template component should render the template that holds state in a client component and reset on navigation",
        "app dir - basic template component should render the template that is a server component and rerender on navigation"
      ],
      "pending": [
        "app dir - basic <Link /> should soft replace",
        "app dir - basic known bugs should support React fetch instrumentation client component",
        "app dir - basic known bugs should support React fetch instrumentation client component client-navigation",
        "app dir - basic should handle css imports in next/dynamic correctly",
        "app dir - basic should match partial parameters",
        "app dir - basic should not include parent when not in parent directory with route in directory"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app/standalone-gsp.test.ts": {
      "passed": [],
      "failed": [
        "output: standalone with getStaticProps should work correctly with output standalone"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app/standalone.test.ts": {
      "passed": [],
      "failed": [
        "output: standalone with app dir should handle trace files correctly for route groups (nodejs only)",
        "output: standalone with app dir should work correctly with output standalone"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app/useReportWebVitals.test.ts": {
      "passed": [],
      "failed": [
        "useReportWebVitals hook should send web-vitals to vercel-insights"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/app/vercel-speed-insights.test.ts": {
      "passed": [],
      "failed": [
        "vercel speed insights with assetPrefix Vercel analytics should send web vitals to Vercel analytics",
        "vercel speed insights without assetPrefix Vercel analytics should send web vitals to Vercel analytics"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/asset-prefix/asset-prefix.test.ts": {
      "passed": [
        "app-dir assetPrefix handling should redirect route when clicking link",
        "app-dir assetPrefix handling should redirect route when requesting it directly",
        "app-dir assetPrefix handling should redirect route when requesting it directly by browser",
        "app-dir assetPrefix handling should render link"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/async-component-preload/async-component-preload.test.ts": {
      "passed": [
        "async-component-preload should handle redirect in an async page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/autoscroll-with-css-modules/index.test.ts": {
      "passed": [
        "router autoscrolling on navigation with css modules vertical scroll when page imports css modules should scroll to top of document when navigating between to pages without layout when",
        "router autoscrolling on navigation with css modules vertical scroll when page imports css modules should scroll when clicking in JS"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/back-button-download-bug/back-button-download-bug.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "app-dir back button download bug app-dir back button download bug should redirect route when clicking link"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/build-size/index.test.ts": {
      "passed": ["app-dir build size should have correct size in build output"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/conflicting-page-segments/conflicting-page-segments.test.ts": {
      "passed": [],
      "failed": [
        "conflicting-page-segments should throw an error when a route groups causes a conflict with a parallel segment"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/create-root-layout/create-root-layout.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "app-dir create root layout build should break the build if a page is missing root layout"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/crypto-globally-available/crypto-globally-available.test.ts": {
      "passed": [
        "Web Crypto API is available globally should be available in Route Handlers",
        "Web Crypto API is available globally should be available in Server Components"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/css-order/css-order.test.ts": {
      "passed": [
        "css-order turbo should load correct styles navigating back again big-interleaved-a -> big-interleaved-b -> big-interleaved-a -> big-interleaved-b",
        "css-order turbo should load correct styles navigating back again interleaved-a -> interleaved-b -> interleaved-a -> interleaved-b",
        "css-order turbo should load correct styles navigating back again pages-first -> pages-second -> pages-first -> pages-second",
        "css-order turbo should load correct styles navigating back again pages-first -> pages-third -> pages-first -> pages-third",
        "css-order turbo should load correct styles navigating back again pages-interleaved-a -> pages-interleaved-b -> pages-interleaved-a -> pages-interleaved-b",
        "css-order turbo should load correct styles navigating back again pages-interleaved-b -> pages-interleaved-a -> pages-interleaved-b -> pages-interleaved-a",
        "css-order turbo should load correct styles navigating back again pages-partial-reversed-a -> pages-partial-reversed-b -> pages-partial-reversed-a -> pages-partial-reversed-b",
        "css-order turbo should load correct styles navigating back again pages-partial-reversed-b -> pages-partial-reversed-a -> pages-partial-reversed-b -> pages-partial-reversed-a",
        "css-order turbo should load correct styles navigating back again pages-reversed-a -> pages-reversed-b -> pages-reversed-a -> pages-reversed-b",
        "css-order turbo should load correct styles navigating back again pages-reversed-b -> pages-reversed-a -> pages-reversed-b -> pages-reversed-a",
        "css-order turbo should load correct styles navigating back again pages-second -> pages-first -> pages-second -> pages-first",
        "css-order turbo should load correct styles navigating back again pages-second -> pages-third -> pages-second -> pages-third",
        "css-order turbo should load correct styles navigating back again pages-third -> pages-first -> pages-third -> pages-first",
        "css-order turbo should load correct styles navigating back again pages-third -> pages-second -> pages-third -> pages-second",
        "css-order turbo should load correct styles navigating big-interleaved-a -> big-interleaved-b",
        "css-order turbo should load correct styles navigating big-interleaved-b -> big-interleaved-a",
        "css-order turbo should load correct styles navigating first -> first-client",
        "css-order turbo should load correct styles navigating first -> second",
        "css-order turbo should load correct styles navigating first -> second-client",
        "css-order turbo should load correct styles navigating first -> third",
        "css-order turbo should load correct styles navigating first-client -> first",
        "css-order turbo should load correct styles navigating first-client -> second",
        "css-order turbo should load correct styles navigating first-client -> second-client",
        "css-order turbo should load correct styles navigating first-client -> third",
        "css-order turbo should load correct styles navigating interleaved-a -> interleaved-b",
        "css-order turbo should load correct styles navigating interleaved-b -> interleaved-a",
        "css-order turbo should load correct styles navigating pages-first -> pages-second",
        "css-order turbo should load correct styles navigating pages-first -> pages-third",
        "css-order turbo should load correct styles navigating pages-partial-reversed-a -> pages-partial-reversed-b",
        "css-order turbo should load correct styles navigating pages-partial-reversed-b -> pages-partial-reversed-a",
        "css-order turbo should load correct styles navigating pages-reversed-a -> pages-reversed-b",
        "css-order turbo should load correct styles navigating pages-reversed-b -> pages-reversed-a",
        "css-order turbo should load correct styles navigating pages-second -> pages-first",
        "css-order turbo should load correct styles navigating pages-second -> pages-third",
        "css-order turbo should load correct styles navigating pages-third -> pages-first",
        "css-order turbo should load correct styles navigating pages-third -> pages-second",
        "css-order turbo should load correct styles navigating partial-reversed-a -> partial-reversed-b",
        "css-order turbo should load correct styles navigating partial-reversed-b -> partial-reversed-a",
        "css-order turbo should load correct styles navigating reversed-a -> reversed-b",
        "css-order turbo should load correct styles navigating reversed-b -> reversed-a",
        "css-order turbo should load correct styles navigating second -> first",
        "css-order turbo should load correct styles navigating second -> first-client",
        "css-order turbo should load correct styles navigating second -> second-client",
        "css-order turbo should load correct styles navigating second -> third",
        "css-order turbo should load correct styles navigating second-client -> first",
        "css-order turbo should load correct styles navigating second-client -> first-client",
        "css-order turbo should load correct styles navigating second-client -> second",
        "css-order turbo should load correct styles navigating second-client -> third",
        "css-order turbo should load correct styles navigating third -> first",
        "css-order turbo should load correct styles navigating third -> first-client",
        "css-order turbo should load correct styles navigating third -> second",
        "css-order turbo should load correct styles navigating third -> second-client",
        "css-order turbo should load correct styles on big-interleaved-a",
        "css-order turbo should load correct styles on big-interleaved-b",
        "css-order turbo should load correct styles on first",
        "css-order turbo should load correct styles on first-client",
        "css-order turbo should load correct styles on interleaved-a",
        "css-order turbo should load correct styles on interleaved-b",
        "css-order turbo should load correct styles on pages-first",
        "css-order turbo should load correct styles on pages-interleaved-a",
        "css-order turbo should load correct styles on pages-interleaved-b",
        "css-order turbo should load correct styles on pages-partial-reversed-a",
        "css-order turbo should load correct styles on pages-partial-reversed-b",
        "css-order turbo should load correct styles on pages-reversed-a",
        "css-order turbo should load correct styles on pages-reversed-b",
        "css-order turbo should load correct styles on pages-second",
        "css-order turbo should load correct styles on pages-third",
        "css-order turbo should load correct styles on partial-reversed-a",
        "css-order turbo should load correct styles on partial-reversed-b",
        "css-order turbo should load correct styles on reversed-a",
        "css-order turbo should load correct styles on reversed-b",
        "css-order turbo should load correct styles on second",
        "css-order turbo should load correct styles on second-client",
        "css-order turbo should load correct styles on third"
      ],
      "failed": [
        "css-order turbo should load correct styles navigating back again big-interleaved-b -> big-interleaved-a -> big-interleaved-b -> big-interleaved-a",
        "css-order turbo should load correct styles navigating back again first -> first-client -> first -> first-client",
        "css-order turbo should load correct styles navigating back again first -> second -> first -> second",
        "css-order turbo should load correct styles navigating back again first -> second-client -> first -> second-client",
        "css-order turbo should load correct styles navigating back again first -> third -> first -> third",
        "css-order turbo should load correct styles navigating back again first-client -> first -> first-client -> first",
        "css-order turbo should load correct styles navigating back again first-client -> second -> first-client -> second",
        "css-order turbo should load correct styles navigating back again first-client -> second-client -> first-client -> second-client",
        "css-order turbo should load correct styles navigating back again first-client -> third -> first-client -> third",
        "css-order turbo should load correct styles navigating back again interleaved-b -> interleaved-a -> interleaved-b -> interleaved-a",
        "css-order turbo should load correct styles navigating back again second -> first -> second -> first",
        "css-order turbo should load correct styles navigating back again second -> first-client -> second -> first-client",
        "css-order turbo should load correct styles navigating back again second -> second-client -> second -> second-client",
        "css-order turbo should load correct styles navigating back again second -> third -> second -> third",
        "css-order turbo should load correct styles navigating back again second-client -> first -> second-client -> first",
        "css-order turbo should load correct styles navigating back again second-client -> first-client -> second-client -> first-client",
        "css-order turbo should load correct styles navigating back again second-client -> second -> second-client -> second",
        "css-order turbo should load correct styles navigating back again second-client -> third -> second-client -> third",
        "css-order turbo should load correct styles navigating back again third -> first -> third -> first",
        "css-order turbo should load correct styles navigating back again third -> first-client -> third -> first-client",
        "css-order turbo should load correct styles navigating back again third -> second -> third -> second",
        "css-order turbo should load correct styles navigating back again third -> second-client -> third -> second-client"
      ],
      "pending": [
        "css-order turbo should load correct styles navigating pages-interleaved-a -> pages-interleaved-b",
        "css-order turbo should load correct styles navigating pages-interleaved-b -> pages-interleaved-a"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/draft-mode/draft-mode.test.ts": {
      "passed": [
        "app dir - draft mode in edge runtime should be disabled from api route handler",
        "app dir - draft mode in edge runtime should be enabled from api route handler when draft mode enabled",
        "app dir - draft mode in edge runtime should have set-cookie header on enable",
        "app dir - draft mode in edge runtime should have set-cookie header with redirect location",
        "app dir - draft mode in edge runtime should not perform full page navigation on router.refresh()",
        "app dir - draft mode in edge runtime should not read other cookies when draft mode disabled during next start",
        "app dir - draft mode in edge runtime should use initial rand when draft mode is disabled on /with-edge/index",
        "app dir - draft mode in edge runtime should use initial rand when draft mode is disabled on /with-edge/with-cookies",
        "app dir - draft mode in nodejs runtime should be disabled from api route handler",
        "app dir - draft mode in nodejs runtime should be enabled from api route handler when draft mode enabled",
        "app dir - draft mode in nodejs runtime should genenerate rand when draft mode enabled",
        "app dir - draft mode in nodejs runtime should have set-cookie header on enable",
        "app dir - draft mode in nodejs runtime should have set-cookie header with redirect location",
        "app dir - draft mode in nodejs runtime should not generate rand when draft mode disabled during next start",
        "app dir - draft mode in nodejs runtime should not perform full page navigation on router.refresh()",
        "app dir - draft mode in nodejs runtime should not read other cookies when draft mode disabled during next start",
        "app dir - draft mode in nodejs runtime should read other cookies when draft mode enabled",
        "app dir - draft mode in nodejs runtime should use initial rand when draft mode is disabled on /index",
        "app dir - draft mode in nodejs runtime should use initial rand when draft mode is disabled on /with-cookies"
      ],
      "failed": [
        "app dir - draft mode in edge runtime should genenerate rand when draft mode enabled",
        "app dir - draft mode in edge runtime should read other cookies when draft mode enabled"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/dynamic-data/dynamic-data.test.ts": {
      "passed": [
        "dynamic-data inside cache scope error when the build when accessing dynamic data inside a cache scope",
        "dynamic-data should render empty objects for dynamic APIs when rendering with force-static",
        "dynamic-data should render the dynamic apis dynamically when used in a top-level scope",
        "dynamic-data should render the dynamic apis dynamically when used in a top-level scope with force dynamic",
        "dynamic-data should track dynamic apis when rendering app routes",
        "dynamic-data should track searchParams access as dynamic when the Page is a client component",
        "dynamic-data with dynamic = \"error\" error when the build when `dynamic = \"error\"` and dynamic data is read"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/dynamic-href/dynamic-href.test.ts": {
      "passed": [
        "dynamic-href should not error on /object in prod",
        "dynamic-href should not error on /string in prod"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/dynamic-in-generate-params/index.test.ts": {
      "passed": [],
      "failed": [
        "app-dir - dynamic in generate params should be able to call fetch while generating multiple dynamic pages",
        "app-dir - dynamic in generate params should be able to call while generating multiple dynamic sitemaps",
        "app-dir - dynamic in generate params should render sitemap with generateSitemaps in force-dynamic config dynamically"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/dynamic-interception-route-revalidate/dynamic-interception-route-revalidate.test.ts": {
      "passed": [],
      "failed": [
        "dynamic-interception-route-revalidate should refresh the dynamic intercepted route when the interception route is revalidated"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/dynamic-requests/dynamic-requests.test.ts": {
      "passed": [
        "dynamic-requests should not error for dynamic requests in pages",
        "dynamic-requests should not error for dynamic requests in routes"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/dynamic/dynamic.test.ts": {
      "passed": [
        "app dir - next/dynamic no SSR should not render client component imported through ssr: false in client components",
        "app dir - next/dynamic no SSR should support dynamic import with accessing named exports from client component",
        "app dir - next/dynamic should generate correct client manifest for dynamic chunks",
        "app dir - next/dynamic should handle next/dynamic in SSR correctly",
        "app dir - next/dynamic should handle next/dynamic in hydration correctly",
        "app dir - next/dynamic should handle ssr: false in pages when appDir is enabled"
      ],
      "failed": [
        "app dir - next/dynamic no SSR should not render client component imported through ssr: false in client components in edge runtime"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/edge-route-catchall/edge-route-catchall.test.ts": {
      "passed": [
        "edge-route-catchall should correctly normalize edge route catch-all with a single param",
        "edge-route-catchall should correctly normalize edge route catch-all with multiple params"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/edge-route-rewrite/edge-route-rewrite.test.ts": {
      "passed": [
        "edge-route-rewrite it should support a rewrite to a dynamic edge route",
        "edge-route-rewrite it should support a rewrite to an edge route"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/edge-runtime-node-compatibility/edge-runtime-node-compatibility.test.ts": {
      "passed": [
        "edge runtime node compatibility [app] supports node:buffer",
        "edge runtime node compatibility [pages/api] supports node:buffer"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/emotion-js/index.test.ts": {
      "passed": [
        "app dir - emotion-js should render emotion-js css with compiler.emotion option correctly"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/error-boundary-navigation/index.test.ts": {
      "passed": [
        "app dir - not found navigation should allow navigating to a non-existent page",
        "app dir - not found navigation should allow navigating to a page calling notfound",
        "app dir - not found navigation should allow navigation back to route that was initially not-found",
        "app dir - not found navigation should allow navigation on error",
        "app dir - not found navigation should allow navigation on not-found",
        "app dir - not found navigation should allow navigation to other routes on route that was initially not-found",
        "app dir - not found navigation should be able to navigate to other page from root not-found page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/error-boundary-navigation/override-node-env.test.ts": {
      "passed": [
        "app dir - not found navigation - with overridden node env should allow navigating to a non-existent page",
        "app dir - not found navigation - with overridden node env should allow navigating to a page calling notfound",
        "app dir - not found navigation - with overridden node env should allow navigation back to route that was initially not-found",
        "app dir - not found navigation - with overridden node env should allow navigation on error",
        "app dir - not found navigation - with overridden node env should allow navigation on not-found",
        "app dir - not found navigation - with overridden node env should allow navigation to other routes on route that was initially not-found",
        "app dir - not found navigation - with overridden node env should be able to navigate to other page from root not-found page",
        "app dir - not found navigation should allow navigating to a non-existent page",
        "app dir - not found navigation should allow navigating to a page calling notfound",
        "app dir - not found navigation should allow navigation back to route that was initially not-found",
        "app dir - not found navigation should allow navigation on error",
        "app dir - not found navigation should allow navigation on not-found",
        "app dir - not found navigation should allow navigation to other routes on route that was initially not-found",
        "app dir - not found navigation should be able to navigate to other page from root not-found page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/errors/index.test.ts": {
      "passed": [
        "app-dir - errors error component should allow resetting error boundary",
        "app-dir - errors error component should display error digest for error in server component with default error boundary",
        "app-dir - errors error component should hydrate empty shell to handle server-side rendering errors",
        "app-dir - errors error component should log the original RSC error trace in production",
        "app-dir - errors error component should log the original Server Actions error trace in production",
        "app-dir - errors error component should trigger error component when an error happens during rendering",
        "app-dir - errors error component should trigger error component when an error happens during server components rendering",
        "app-dir - errors error component should use default error boundary for prod and overlay for dev when no error component specified"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/front-redirect-issue/front-redirect-issue.test.ts": {
      "passed": ["app dir - front redirect issue should redirect"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/global-error/basic/index.test.ts": {
      "passed": [
        "app dir - global error should catch metadata error in error boundary if presented"
      ],
      "failed": [
        "app dir - global error should catch metadata error in global-error if no error boundary is presented",
        "app dir - global error should catch the client error thrown in the nested routes",
        "app dir - global error should render global error for error in client components",
        "app dir - global error should render global error for error in server components",
        "app dir - global error should trigger error component when an error happens during rendering"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/global-error/catch-all/index.test.ts": {
      "passed": [
        "app dir - global error - with catch-all route should render 404 page correctly",
        "app dir - global error - with catch-all route should render catch-all route correctly"
      ],
      "failed": [
        "app dir - global error - with catch-all route should render global error correctly"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/global-error/layout-error/index.test.ts": {
      "passed": [],
      "failed": [
        "app dir - global error - layout error should render global error for error in server components"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/headers-static-bailout/headers-static-bailout.test.ts": {
      "passed": [
        "headers-static-bailout it provides a helpful link in case static generation bailout is uncaught",
        "headers-static-bailout should bailout when using an import from next/headers",
        "headers-static-bailout should not bailout when not using headers"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/hello-world/hello-world.test.ts": {
      "passed": [
        "hello-world should work using browser",
        "hello-world should work using cheerio",
        "hello-world should work with fetch",
        "hello-world should work with html"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/hooks/hooks.test.ts": {
      "passed": [
        "app dir - hooks useDraftMode should generate rand when draft mode enabled",
        "app dir - hooks useDraftMode should use initial rand when draft mode be disabled",
        "app dir - hooks usePathname should have the canonical url pathname on rewrite",
        "app dir - hooks usePathname should have the correct pathname",
        "app dir - hooks useRouter should allow access to the router",
        "app dir - hooks useSearchParams should have the canonical url search params on rewrite",
        "app dir - hooks useSearchParams should have the correct search params",
        "app dir - hooks useSelectedLayoutSegment should have the correct layout segment at /hooks/use-selected-layout-segment/first",
        "app dir - hooks useSelectedLayoutSegment should have the correct layout segment at /hooks/use-selected-layout-segment/first/slug1",
        "app dir - hooks useSelectedLayoutSegment should have the correct layout segment at /hooks/use-selected-layout-segment/first/slug2/second/a/b",
        "app dir - hooks useSelectedLayoutSegment should return null in pages",
        "app dir - hooks useSelectedLayoutSegments should have the correct layout segments at /hooks/use-selected-layout-segment/first",
        "app dir - hooks useSelectedLayoutSegments should have the correct layout segments at /hooks/use-selected-layout-segment/first/slug1",
        "app dir - hooks useSelectedLayoutSegments should have the correct layout segments at /hooks/use-selected-layout-segment/first/slug2/second",
        "app dir - hooks useSelectedLayoutSegments should have the correct layout segments at /hooks/use-selected-layout-segment/first/slug2/second/a/b",
        "app dir - hooks useSelectedLayoutSegments should have the correct layout segments at /hooks/use-selected-layout-segment/rewritten",
        "app dir - hooks useSelectedLayoutSegments should have the correct layout segments at /hooks/use-selected-layout-segment/rewritten-middleware",
        "app dir - hooks useSelectedLayoutSegments should return an empty array in pages"
      ],
      "failed": [
        "app dir - hooks from pages should have the correct hooks at /adapter-hooks/1",
        "app dir - hooks from pages should have the correct hooks at /adapter-hooks/1/account",
        "app dir - hooks from pages should have the correct hooks at /adapter-hooks/2",
        "app dir - hooks from pages should have the correct hooks at /adapter-hooks/static"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/i18n-hybrid/i18n-hybrid.test.js": {
      "passed": [
        "i18n-hybrid does not resolve /en-CA/blog/first-post",
        "i18n-hybrid does not resolve /en-US/blog/first-post",
        "i18n-hybrid does not resolve /fr-CA/blog/first-post",
        "i18n-hybrid does not resolve /fr-FR/blog/first-post",
        "i18n-hybrid does resolve /about",
        "i18n-hybrid does resolve /blog/first-post",
        "i18n-hybrid does resolve /en-CA/about",
        "i18n-hybrid does resolve /en-US/about",
        "i18n-hybrid does resolve /fr-CA/about",
        "i18n-hybrid does resolve /fr-FR/about"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/import/import.test.ts": {
      "passed": [
        "app dir - imports we can import all components from .js",
        "app dir - imports we can import all components from .jsx",
        "app dir - imports we can import all components from .ts",
        "app dir - imports we can import all components from .tsx"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/interception-dynamic-segment/interception-dynamic-segment.test.ts": {
      "passed": [
        "interception-dynamic-segment should work when interception route is paired with a dynamic segment"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/interception-middleware-rewrite/interception-middleware-rewrite.test.ts": {
      "passed": [
        "interception-middleware-rewrite should continue to show the intercepted page when revisiting it",
        "interception-middleware-rewrite should continue to work after using browser back button and following another intercepting route",
        "interception-middleware-rewrite should support intercepting routes with a middleware rewrite"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/interception-route-prefetch-cache/interception-route-prefetch-cache.test.ts": {
      "passed": [
        "interception-route-prefetch-cache runtime = nodejs should not be a cache HIT when prefetching an interception route",
        "interception-route-prefetch-cache runtime = nodejs should render the correct interception when two distinct layouts share the same path structure"
      ],
      "failed": [
        "interception-route-prefetch-cache runtime = edge should render the correct interception when two distinct layouts share the same path structure"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/interception-routes-root-catchall/interception-routes-root-catchall.test.ts": {
      "passed": [
        "interception-routes-root-catchall should handle non-intercepted catch-all pages",
        "interception-routes-root-catchall should support having a root catch-all and a catch-all in a parallel route group"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/interoperability-with-pages/navigation.test.ts": {
      "passed": [
        "navigation between pages and app dir It should be able to navigate app -> pages",
        "navigation between pages and app dir It should be able to navigate app -> pages and go back and forward",
        "navigation between pages and app dir It should be able to navigate pages -> app",
        "navigation between pages and app dir It should be able to navigate pages -> app and go back an forward"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/layout-params/layout-params.test.ts": {
      "passed": [
        "app dir - layout params basic params check layout renders just it's params",
        "app dir - layout params basic params check layout without params get no params",
        "app dir - layout params basic params check topmost layout renders all params",
        "app dir - layout params catchall params should give catchall params just to last layout",
        "app dir - layout params catchall params should give empty optional catchall params won't give params to any layout",
        "app dir - layout params catchall params should give optional catchall params just to last layout"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/logging/fetch-logging.test.ts": {
      "passed": [],
      "failed": [
        "app-dir - logging with default logging should not log fetch requests at all",
        "app-dir - logging with fetches default logging should only log requests in development mode",
        "app-dir - logging with fetches verbose logging should only log requests in development mode",
        "app-dir - logging with verbose logging for edge runtime should not log fetch requests at all"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": true
    },
    "test/e2e/app-dir/logging/fetch-warning.test.ts": {
      "passed": [],
      "failed": [
        "app-dir - fetch warnings should log when request input is a Request instance",
        "app-dir - fetch warnings should log when request input is a string",
        "app-dir - fetch warnings should not log when overriding cache within the Request object"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/mdx/mdx.test.ts": {
      "passed": [],
      "failed": [
        "mdx with-mdx-rs app directory should allow importing client components",
        "mdx with-mdx-rs app directory should allow overriding components",
        "mdx with-mdx-rs app directory should work in initial html",
        "mdx with-mdx-rs app directory should work in initial html with mdx import",
        "mdx with-mdx-rs app directory should work using browser",
        "mdx with-mdx-rs app directory should work using browser with mdx import",
        "mdx with-mdx-rs pages directory should allow overriding components",
        "mdx with-mdx-rs pages directory should work in initial html",
        "mdx with-mdx-rs pages directory should work in initial html with mdx import",
        "mdx with-mdx-rs pages directory should work using browser",
        "mdx with-mdx-rs pages directory should work using browser with mdx import"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/metadata-dynamic-routes/index.test.ts": {
      "passed": [],
      "failed": [
        "app dir - metadata dynamic routes icon image routes should render apple icon with dynamic routes",
        "app dir - metadata dynamic routes icon image routes should render icon with dynamic routes",
        "app dir - metadata dynamic routes route segment config should generate dynamic route if dynamic config is force-dynamic",
        "app dir - metadata dynamic routes should generate static paths of dynamic sitemap in production",
        "app dir - metadata dynamic routes should generate unique path for image routes under group routes",
        "app dir - metadata dynamic routes should include default og font files in file trace",
        "app dir - metadata dynamic routes should inject dynamic metadata properly to head",
        "app dir - metadata dynamic routes should optimize routes without multiple generation API as static routes",
        "app dir - metadata dynamic routes should pick configured metadataBase instead of deployment url for canonical url",
        "app dir - metadata dynamic routes should support edge runtime of image routes",
        "app dir - metadata dynamic routes should use localhost for local prod and fallback to deployment url when metadataBase is falsy",
        "app dir - metadata dynamic routes social image routes should fill params into dynamic routes url of metadata images",
        "app dir - metadata dynamic routes social image routes should fill params into routes groups url of static images",
        "app dir - metadata dynamic routes social image routes should handle custom fonts in both edge and nodejs runtime",
        "app dir - metadata dynamic routes social image routes should handle manifest.[ext] dynamic routes",
        "app dir - metadata dynamic routes social image routes should render og image with opengraph-image dynamic routes",
        "app dir - metadata dynamic routes social image routes should render og image with twitter-image dynamic routes",
        "app dir - metadata dynamic routes social image routes should support generate multi images with generateImageMetadata",
        "app dir - metadata dynamic routes social image routes should support generate multi sitemaps with generateSitemaps",
        "app dir - metadata dynamic routes social image routes should support params as argument in dynamic routes",
        "app dir - metadata dynamic routes text routes should handle robots.[ext] dynamic routes",
        "app dir - metadata dynamic routes text routes should handle sitemap.[ext] dynamic routes",
        "app dir - metadata dynamic routes text routes should not throw if client components are imported but not used",
        "app dir - metadata dynamic routes text routes should support alternate.languages in sitemap"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/metadata-edge/index.test.ts": {
      "passed": [],
      "failed": [
        "app dir - Metadata API on the Edge runtime OG image route should not bundle `ImageResponse` into the page worker",
        "app dir - Metadata API on the Edge runtime should render OpenGraph image meta tag correctly"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/metadata-json-manifest/index.test.ts": {
      "passed": [
        "app-dir metadata-json-manifest should support metadata.json manifest"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/metadata-suspense/index.test.ts": {
      "passed": [
        "app dir - metadata dynamic routes suspense should render metadata in head even root layout is wrapped with Suspense"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/metadata-warnings/index.test.ts": {
      "passed": [
        "app dir - metadata missing metadataBase should fallback to localhost if metadataBase is missing for absolute urls resolving",
        "app dir - metadata missing metadataBase should warn for unsupported metadata properties"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/metadata/metadata.test.ts": {
      "passed": [
        "app dir - metadata basic should apply metadata when navigating client-side",
        "app dir - metadata basic should handle metadataBase for urls resolved as only URL type",
        "app dir - metadata basic should relative canonical url",
        "app dir - metadata basic should support alternate tags",
        "app dir - metadata basic should support appLinks tags",
        "app dir - metadata basic should support apple related tags `itunes` and `appWebApp`",
        "app dir - metadata basic should support generateMetadata export",
        "app dir - metadata basic should support other basic tags",
        "app dir - metadata basic should support other basic tags (edge)",
        "app dir - metadata basic should support robots tags",
        "app dir - metadata basic should support stashed title in one layer of page and layout",
        "app dir - metadata basic should support stashed title in two layers of page and layout",
        "app dir - metadata basic should support title and description",
        "app dir - metadata basic should support title template",
        "app dir - metadata basic should support verification tags",
        "app dir - metadata basic should use parent layout title when no title is defined in page",
        "app dir - metadata file based icons should not render if image file is not specified",
        "app dir - metadata file based icons should render icon and apple touch icon meta if their images are specified",
        "app dir - metadata icons should merge icons from layout if no static icons files are specified",
        "app dir - metadata icons should not hoist meta[itemProp] to head",
        "app dir - metadata icons should support basic complex descriptor icons field",
        "app dir - metadata icons should support basic object icons field",
        "app dir - metadata icons should support basic string icons field",
        "app dir - metadata icons should support root level of favicon.ico",
        "app dir - metadata navigation should render root not-found with default metadata",
        "app dir - metadata navigation should support notFound in generateMetadata",
        "app dir - metadata navigation should support redirect in generateMetadata",
        "app dir - metadata opengraph should override file based images when opengraph-image and twitter-image specify images property",
        "app dir - metadata opengraph should pick up opengraph-image and twitter-image as static metadata files",
        "app dir - metadata opengraph should support opengraph tags",
        "app dir - metadata opengraph should support opengraph with article type",
        "app dir - metadata react cache should have same title and page value on initial load",
        "app dir - metadata react cache should have same title and page value when navigating",
        "app dir - metadata should not crash from error thrown during preloading nested generateMetadata",
        "app dir - metadata should not effect metadata images convention like files under pages directory",
        "app dir - metadata static optimization should build static files into static route",
        "app dir - metadata static routes should build favicon.ico as a custom route",
        "app dir - metadata static routes should have /favicon.ico as route",
        "app dir - metadata static routes should have icons as route",
        "app dir - metadata static routes should support root dir robots.txt",
        "app dir - metadata static routes should support sitemap.xml under every routes",
        "app dir - metadata static routes should support static manifest.webmanifest",
        "app dir - metadata twitter should render twitter card summary when image is not present",
        "app dir - metadata twitter should support default twitter app card",
        "app dir - metadata twitter should support default twitter player card",
        "app dir - metadata twitter should support twitter card summary_large_image when image present",
        "app dir - metadata viewport should support dynamic viewport export"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/missing-suspense-with-csr-bailout/missing-suspense-with-csr-bailout.test.ts": {
      "passed": [
        "missing-suspense-with-csr-bailout next/dynamic does not emit errors related to bailing out of client side rendering",
        "missing-suspense-with-csr-bailout useSearchParams should pass build if useSearchParams is wrapped in a suspense boundary"
      ],
      "failed": [
        "missing-suspense-with-csr-bailout useSearchParams should fail build if useSearchParams is not wrapped in a suspense boundary",
        "missing-suspense-with-csr-bailout useSearchParams should pass build if missingSuspenseWithCSRBailout os set to false"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/mjs-as-extension/mjs-as-extension.test.ts": {
      "passed": ["mjs as extension should render the page correctly"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/modularizeimports/modularizeimports.test.ts": {
      "passed": [],
      "failed": [
        "modularizeImports should work",
        "modularizeImports should work with MDX"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/navigation/navigation.test.ts": {
      "passed": [
        "app dir - navigation SEO should contain default meta tags in error page",
        "app dir - navigation SEO should emit noindex meta tag for not found page when streaming",
        "app dir - navigation SEO should emit refresh meta tag (permanent) for redirect page when streaming",
        "app dir - navigation SEO should emit refresh meta tag for redirect page when streaming",
        "app dir - navigation SEO should not log 404 errors in ipc server",
        "app dir - navigation bots should block rendering for bots and return 404 status",
        "app dir - navigation browser back to a revalidated page should load the page",
        "app dir - navigation external push should push external url without affecting hooks",
        "app dir - navigation hash should not scroll to hash when scroll={false} is set",
        "app dir - navigation hash should scroll to the specified hash",
        "app dir - navigation hash-link-back-to-same-page should scroll to the specified hash",
        "app dir - navigation hash-with-scroll-offset should scroll to the specified hash",
        "app dir - navigation navigating to a page with async metadata should render the final state of the page with correct metadata",
        "app dir - navigation navigating to dynamic params & changing the casing should load the page correctly",
        "app dir - navigation navigation between pages and app should not contain _rsc query while navigating from app to pages",
        "app dir - navigation navigation between pages and app should not contain _rsc query while navigating from pages to app",
        "app dir - navigation navigation between pages and app should not continously initiate a mpa navigation to the same URL when router state changes",
        "app dir - navigation navigation between pages and app should not omit the hash while navigating from app to pages",
        "app dir - navigation navigations when attaching a Proxy to `window.Promise` should navigate without issue",
        "app dir - navigation nested navigation should load chunks correctly without double encoding of url",
        "app dir - navigation nested navigation should navigate to nested pages",
        "app dir - navigation not-found should trigger not-found client-side",
        "app dir - navigation not-found should trigger not-found in a client component",
        "app dir - navigation not-found should trigger not-found in a server component",
        "app dir - navigation not-found should trigger not-found while streaming",
        "app dir - navigation query string should handle unicode search params",
        "app dir - navigation query string should not reset shallow url updates on prefetch",
        "app dir - navigation query string should set query correctly",
        "app dir - navigation query string useParams identity between renders should be stable in app",
        "app dir - navigation redirect components should redirect client-side",
        "app dir - navigation redirect components should redirect in a client component",
        "app dir - navigation redirect components should redirect in a server component",
        "app dir - navigation redirect components should redirect to external url",
        "app dir - navigation redirect components should redirect to external url, initiating only once",
        "app dir - navigation redirect middleware redirects should redirect from middleware",
        "app dir - navigation redirect middleware redirects should redirect from middleware with link navigation",
        "app dir - navigation redirect next.config.js redirects should redirect from next.config.js",
        "app dir - navigation redirect next.config.js redirects should redirect from next.config.js with link navigation",
        "app dir - navigation redirect status code should respond with 307 status code in client component",
        "app dir - navigation redirect status code should respond with 307 status code in server component",
        "app dir - navigation redirect status code should respond with 308 status code if permanent flag is set",
        "app dir - navigation relative hashes and queries should work with a hash-only `router.push(...)`",
        "app dir - navigation relative hashes and queries should work with a hash-only href",
        "app dir - navigation relative hashes and queries should work with a query-only href",
        "app dir - navigation relative hashes and queries should work with both relative hashes and queries",
        "app dir - navigation scroll restoration should restore original scroll position when navigating back"
      ],
      "failed": [
        "app dir - navigation query string useParams identity between renders should be stable in pages"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/next-config/index.test.ts": {
      "passed": [
        "app dir - next config should support importing webpack in next.config"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/next-font/next-font.test.ts": {
      "passed": [
        "app dir - next/font app app dir - next-font computed styles should have correct styles at /",
        "app dir - next/font app app dir - next-font computed styles should have correct styles at /client",
        "app dir - next/font app app dir - next-font import values should have correct values at /",
        "app dir - next/font app app dir - next-font import values should have correct values at /client",
        "app dir - next/font app app dir - next-font import values should transform code in node_modules",
        "app dir - next/font app app dir - next-font navigation should not have duplicate preload tags on navigation",
        "app dir - next/font app app dir - next-font preconnect should add preconnect when preloading is disabled in component",
        "app dir - next/font app app dir - next-font preconnect should add preconnect when preloading is disabled in layout",
        "app dir - next/font app app dir - next-font preconnect should not preconnect when css is used but no fonts",
        "app dir - next/font app app dir - next-font preload should preload correctly with client components",
        "app dir - next/font app app dir - next-font preload should preload correctly with layout using fonts",
        "app dir - next/font app app dir - next-font preload should preload correctly with page using fonts"
      ],
      "failed": [
        "app dir - next/font app app dir - next-font preconnect should add preconnect when preloading is disabled in page",
        "app dir - next/font app app dir - next-font preload should preload correctly with server components"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/next-image/next-image-https.test.ts": {
      "passed": [
        "app dir - next-image (with https) only runs on CI as it requires administrator privileges"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/next-image/next-image-proxy.test.ts": {
      "passed": [
        "next-image-proxy loads images without any errors",
        "next-image-proxy should work with connection upgrade by removing it via filterReqHeaders()"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/next-image/next-image.test.ts": {
      "passed": [
        "app dir - next-image browser content should render images nested under page dir on /nested route",
        "app dir - next-image browser content should render images on / route",
        "app dir - next-image image content should render images nested under page dir on /nested route",
        "app dir - next-image image content should render images on / route",
        "app dir - next-image image content should render images on /client route",
        "app dir - next-image image content should render legacy images in edge runtime on /legacy-edge-runtime route",
        "app dir - next-image image content should render legacy images under /legacy route",
        "app dir - next-image ssr content should render images nested under page dir on /nested route",
        "app dir - next-image ssr content should render images on / route",
        "app dir - next-image ssr content should render images on /client route"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/not-found-default/index.test.ts": {
      "passed": [
        "app dir - not found with default 404 page should be able to navigate to page calling not-found",
        "app dir - not found with default 404 page should be able to navigate to page with calling not-found in metadata",
        "app dir - not found with default 404 page should error on client notFound from root layout in browser",
        "app dir - not found with default 404 page should error on server notFound from root layout on server-side",
        "app dir - not found with default 404 page should render default 404 with root layout for non-existent page",
        "app dir - not found with default 404 page should render default not found for group routes if not found is not defined"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/not-found/basic/index.test.ts": {
      "passed": [
        "app dir - not-found - basic should not output /404 in tree view logs",
        "app dir - not-found - basic should propagate notFound errors past a segment's error boundary",
        "app dir - not-found - basic should use root not-found content for 404 html",
        "app dir - not-found - basic with default runtime should create the 404 mapping and copy the file to pages",
        "app dir - not-found - basic with default runtime should escalate notFound to parent layout if no not-found boundary present in current layer",
        "app dir - not-found - basic with default runtime should match dynamic route not-found boundary correctly",
        "app dir - not-found - basic with default runtime should use the not-found page for non-matching routes",
        "app dir - not-found - basic with runtime = edge should escalate notFound to parent layout if no not-found boundary present in current layer",
        "app dir - not-found - basic with runtime = edge should match dynamic route not-found boundary correctly",
        "app dir - not-found - basic with runtime = edge should use the not-found page for non-matching routes"
      ],
      "failed": [
        "app dir - not-found - basic should include not found client reference manifest in the file trace"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/not-found/conflict-route/index.test.ts": {
      "passed": [
        "app dir - not-found - conflict route with default runtime should allow to have a valid /not-found route",
        "app dir - not-found - conflict route with default runtime should use the not-found page for non-matching routes",
        "app dir - not-found - conflict route with runtime = edge should allow to have a valid /not-found route",
        "app dir - not-found - conflict route with runtime = edge should use the not-found page for non-matching routes"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/not-found/css-precedence/index.test.ts": {
      "passed": [
        "not-found app dir css should load css while navigation between not-found and page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/not-found/group-route-root-not-found/index.test.ts": {
      "passed": [
        "app dir - group routes with root not-found should render default 404 with root layout for non-existent page",
        "app dir - group routes with root not-found should render root not found for group routes if hit 404"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/not-found/group-route/index.test.ts": {
      "passed": [
        "app dir - not-found - group route with default runtime should use the not-found page under group routes",
        "app dir - not-found - group route with runtime = edge should use the not-found page under group routes"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/pages-to-app-routing/pages-to-app-routing.test.ts": {
      "passed": ["pages-to-app-routing should work using browser"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/parallel-route-not-found-params/parallel-route-not-found-params.test.ts": {
      "passed": [
        "parallel-route-not-found should behave correctly without any errors",
        "parallel-route-not-found should handle the not found case correctly without any errors"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/parallel-route-not-found/parallel-route-not-found.test.ts": {
      "passed": [
        "parallel-route-not-found should handle a layout that attempts to render a missing parallel route",
        "parallel-route-not-found should handle multiple missing parallel routes",
        "parallel-route-not-found should render the page & slots if all parallel routes are found"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/parallel-routes-and-interception-basepath/parallel-routes-and-interception-basepath.test.ts": {
      "passed": [
        "parallel-routes-and-interception-basepath should show normal route via direct link with basepath when parallel intercepted slot exist",
        "parallel-routes-and-interception-basepath should show parallel intercepted slot with basepath"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/parallel-routes-and-interception/parallel-routes-and-interception.test.ts": {
      "passed": [
        "parallel-routes-and-interception parallel routes should apply the catch-all route to the parallel route if no matching route is found",
        "parallel-routes-and-interception parallel routes should display all parallel route params with useParams",
        "parallel-routes-and-interception parallel routes should gracefully handle when two page segments match the `children` parallel slot",
        "parallel-routes-and-interception parallel routes should handle a loading state",
        "parallel-routes-and-interception parallel routes should load CSS for a default page that exports another page",
        "parallel-routes-and-interception parallel routes should match parallel routes",
        "parallel-routes-and-interception parallel routes should match parallel routes in route groups",
        "parallel-routes-and-interception parallel routes should match the catch-all routes of the more specific path, if there is more than one catch-all route",
        "parallel-routes-and-interception parallel routes should navigate with a link with prefetch=false",
        "parallel-routes-and-interception parallel routes should only scroll to the parallel route that was navigated to",
        "parallel-routes-and-interception parallel routes should render nested parallel routes",
        "parallel-routes-and-interception parallel routes should support parallel route tab bars",
        "parallel-routes-and-interception parallel routes should throw a 404 when no matching parallel route is found",
        "parallel-routes-and-interception route intercepting should not have /default paths in the prerender manifest",
        "parallel-routes-and-interception route intercepting should re-render the layout on the server when it had a default child route",
        "parallel-routes-and-interception route intercepting should render intercepted route",
        "parallel-routes-and-interception route intercepting should render intercepted route from a nested route",
        "parallel-routes-and-interception route intercepting should render modal when paired with parallel routes",
        "parallel-routes-and-interception route intercepting should support intercepting local dynamic sibling routes",
        "parallel-routes-and-interception route intercepting should support intercepting with beforeFiles rewrites",
        "parallel-routes-and-interception route intercepting with dynamic catch-all routes should render intercepted route",
        "parallel-routes-and-interception route intercepting with dynamic optional catch-all routes should render intercepted route",
        "parallel-routes-and-interception route intercepting with dynamic routes should render intercepted route"
      ],
      "failed": [
        "parallel-routes-and-interception parallel routes should support layout files in parallel routes",
        "parallel-routes-and-interception route intercepting should render an intercepted route at the top level from a nested path",
        "parallel-routes-and-interception route intercepting should render an intercepted route from a slot"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/parallel-routes-catchall-children-slot/parallel-routes-catchall-children-slot.test.ts": {
      "passed": [
        "parallel-routes-catchall-children-slot should match the @children slot for a page before attempting to match the catchall"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/parallel-routes-catchall-default/parallel-routes-catchall-default.test.ts": {
      "passed": [
        "parallel-routes-catchall-default should match default paths before catch-all"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/parallel-routes-catchall-dynamic-segment/parallel-routes-catchall-dynamic-segment.test.ts": {
      "passed": [
        "parallel-routes-catchall-dynamic-segment should match default and dynamic segment paths before catch-all"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/parallel-routes-catchall-groups/parallel-routes-catchall-groups.test.ts": {
      "passed": [
        "parallel-routes-catchall-groups should work without throwing any errors about conflicting paths"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/parallel-routes-catchall-slotted-non-catchalls/parallel-routes-catchall-slotted-non-catchalls.test.ts": {
      "passed": [
        "parallel-routes-catchall-slotted-non-catchalls should match default and dynamic segment paths before catch-all"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/parallel-routes-catchall-specificity/parallel-routes-catchall-specificity.test.ts": {
      "passed": [],
      "failed": [
        "parallel-routes-catchall-specificity should match the catch-all route when navigating from a page with a similar path depth as the previously matched slot"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/parallel-routes-catchall/parallel-routes-catchall.test.ts": {
      "passed": [
        "parallel-routes-catchall should match correctly when defining an explicit page & slot",
        "parallel-routes-catchall should match correctly when defining an explicit slot but no page"
      ],
      "failed": [
        "parallel-routes-catchall should match both the catch-all page & slot",
        "parallel-routes-catchall should match correctly when defining an explicit page but no slot"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/parallel-routes-layouts/parallel-routes-layouts.test.ts": {
      "passed": [
        "parallel-routes-layouts should properly render layouts for multiple slots"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/parallel-routes-not-found/parallel-routes-not-found.test.ts": {
      "passed": [
        "parallel-routes-and-interception should not render the @children slot when the @slot is not found"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/parallel-routes-revalidation/parallel-routes-revalidation.test.ts": {
      "passed": [
        "parallel-routes-revalidation should not trigger interception when calling router.refresh() on an intercepted route (/catchall/foobar)",
        "parallel-routes-revalidation should not trigger interception when calling router.refresh() on an intercepted route (/detail-page)",
        "parallel-routes-revalidation should not trigger interception when calling router.refresh() on an intercepted route (/dynamic/foobar)",
        "parallel-routes-revalidation should submit the action and revalidate the page data"
      ],
      "failed": [
        "parallel-routes-revalidation should handle a redirect action when called in a slot",
        "parallel-routes-revalidation should handle router.refresh() when called in a slot",
        "parallel-routes-revalidation should not trigger full page when calling router.refresh() on an intercepted route",
        "parallel-routes-revalidation router.refresh should correctly refresh data for the intercepted route and previously active page slot",
        "parallel-routes-revalidation router.refresh should correctly refresh data for previously intercepted modal and active page slot",
        "parallel-routes-revalidation server action revalidation handles refreshing when multiple parallel slots are active"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/parallel-routes-use-selected-layout-segment/parallel-routes-use-selected-layout-segment.test.ts": {
      "passed": [
        "parallel-routes-use-selected-layout-segment hard nav to parallel route",
        "parallel-routes-use-selected-layout-segment hard nav to router page and soft nav around other router pages",
        "parallel-routes-use-selected-layout-segment hard nav to router page and soft nav to parallel route and soft nav back to another router page",
        "parallel-routes-use-selected-layout-segment hard nav to router page and soft nav to parallel routes"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/params-hooks-compat/index.test.ts": {
      "passed": [],
      "failed": [
        "app-dir - params hooks compat should only access path params with useParams",
        "app-dir - params hooks compat should only access search params with useSearchParams"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/ppr-errors/ppr-errors.test.ts": {
      "passed": [
        "ppr build errors production mode outside of a suspense boundary should fail the build for uncaught errors",
        "ppr build errors production mode when a postpone call is caught and logged it should should include a message telling why",
        "ppr build errors production mode within a suspense boundary should fail the build for uncaught prerender errors"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/ppr-full/ppr-full.test.ts": {
      "passed": [
        "ppr-full Dynamic Data pages Incidental postpones should initially render with optimistic UI",
        "ppr-full Dynamic Data pages Incidental postpones should render entirely dynamically when force-dynamic",
        "ppr-full Dynamic Data pages Incidental postpones should render entirely statically with force-static",
        "ppr-full Dynamic Data pages Optimistic UI should initially render with optimistic UI",
        "ppr-full Dynamic Data pages Optimistic UI should render entirely dynamically when force-dynamic",
        "ppr-full Dynamic Data pages Optimistic UI should render entirely statically with force-static",
        "ppr-full Dynamic RSC Response for / should contain dynamic content",
        "ppr-full Dynamic RSC Response for / should have correct headers",
        "ppr-full Dynamic RSC Response for /dynamic/force-dynamic should contain dynamic content",
        "ppr-full Dynamic RSC Response for /dynamic/force-dynamic should have correct headers",
        "ppr-full Dynamic RSC Response for /dynamic/force-dynamic/nested/a should contain dynamic content",
        "ppr-full Dynamic RSC Response for /dynamic/force-dynamic/nested/a should have correct headers",
        "ppr-full Dynamic RSC Response for /dynamic/force-dynamic/nested/b should contain dynamic content",
        "ppr-full Dynamic RSC Response for /dynamic/force-dynamic/nested/b should have correct headers",
        "ppr-full Dynamic RSC Response for /dynamic/force-dynamic/nested/c should contain dynamic content",
        "ppr-full Dynamic RSC Response for /dynamic/force-dynamic/nested/c should have correct headers",
        "ppr-full Dynamic RSC Response for /dynamic/force-static should have correct headers",
        "ppr-full Dynamic RSC Response for /dynamic/force-static should not contain dynamic content",
        "ppr-full Dynamic RSC Response for /loading/a should contain dynamic content",
        "ppr-full Dynamic RSC Response for /loading/a should have correct headers",
        "ppr-full Dynamic RSC Response for /loading/b should contain dynamic content",
        "ppr-full Dynamic RSC Response for /loading/b should have correct headers",
        "ppr-full Dynamic RSC Response for /loading/c should contain dynamic content",
        "ppr-full Dynamic RSC Response for /loading/c should have correct headers",
        "ppr-full Dynamic RSC Response for /nested/a should contain dynamic content",
        "ppr-full Dynamic RSC Response for /nested/a should have correct headers",
        "ppr-full Dynamic RSC Response for /nested/b should contain dynamic content",
        "ppr-full Dynamic RSC Response for /nested/b should have correct headers",
        "ppr-full Dynamic RSC Response for /nested/c should contain dynamic content",
        "ppr-full Dynamic RSC Response for /nested/c should have correct headers",
        "ppr-full Dynamic RSC Response for /no-suspense should contain dynamic content",
        "ppr-full Dynamic RSC Response for /no-suspense should have correct headers",
        "ppr-full Dynamic RSC Response for /no-suspense/nested/a should contain dynamic content",
        "ppr-full Dynamic RSC Response for /no-suspense/nested/a should have correct headers",
        "ppr-full Dynamic RSC Response for /no-suspense/nested/b should contain dynamic content",
        "ppr-full Dynamic RSC Response for /no-suspense/nested/b should have correct headers",
        "ppr-full Dynamic RSC Response for /no-suspense/nested/c should contain dynamic content",
        "ppr-full Dynamic RSC Response for /no-suspense/nested/c should have correct headers",
        "ppr-full Dynamic RSC Response for /on-demand/a should contain dynamic content",
        "ppr-full Dynamic RSC Response for /on-demand/a should have correct headers",
        "ppr-full Dynamic RSC Response for /on-demand/b should contain dynamic content",
        "ppr-full Dynamic RSC Response for /on-demand/b should have correct headers",
        "ppr-full Dynamic RSC Response for /on-demand/c should contain dynamic content",
        "ppr-full Dynamic RSC Response for /on-demand/c should have correct headers",
        "ppr-full Dynamic RSC Response for /static should have correct headers",
        "ppr-full Dynamic RSC Response for /static should not contain dynamic content",
        "ppr-full HTML Response for / should allow navigations to and from a pages/ page",
        "ppr-full HTML Response for / should cache the static part",
        "ppr-full HTML Response for / should have correct headers",
        "ppr-full HTML Response for / should resume with dynamic content",
        "ppr-full HTML Response for /dynamic/force-dynamic should allow navigations to and from a pages/ page",
        "ppr-full HTML Response for /dynamic/force-dynamic should have correct headers",
        "ppr-full HTML Response for /dynamic/force-dynamic should resume with dynamic content",
        "ppr-full HTML Response for /dynamic/force-dynamic/nested/a should allow navigations to and from a pages/ page",
        "ppr-full HTML Response for /dynamic/force-dynamic/nested/a should have correct headers",
        "ppr-full HTML Response for /dynamic/force-dynamic/nested/a should resume with dynamic content",
        "ppr-full HTML Response for /dynamic/force-dynamic/nested/b should allow navigations to and from a pages/ page",
        "ppr-full HTML Response for /dynamic/force-dynamic/nested/b should have correct headers",
        "ppr-full HTML Response for /dynamic/force-dynamic/nested/b should resume with dynamic content",
        "ppr-full HTML Response for /dynamic/force-dynamic/nested/c should allow navigations to and from a pages/ page",
        "ppr-full HTML Response for /dynamic/force-dynamic/nested/c should have correct headers",
        "ppr-full HTML Response for /dynamic/force-dynamic/nested/c should resume with dynamic content",
        "ppr-full HTML Response for /dynamic/force-static should allow navigations to and from a pages/ page",
        "ppr-full HTML Response for /dynamic/force-static should have correct headers",
        "ppr-full HTML Response for /dynamic/force-static should not contain dynamic content",
        "ppr-full HTML Response for /loading/a should allow navigations to and from a pages/ page",
        "ppr-full HTML Response for /loading/a should cache the static part",
        "ppr-full HTML Response for /loading/a should have correct headers",
        "ppr-full HTML Response for /loading/a should resume with dynamic content",
        "ppr-full HTML Response for /loading/b should allow navigations to and from a pages/ page",
        "ppr-full HTML Response for /loading/b should cache the static part",
        "ppr-full HTML Response for /loading/b should have correct headers",
        "ppr-full HTML Response for /loading/b should resume with dynamic content",
        "ppr-full HTML Response for /loading/c should allow navigations to and from a pages/ page",
        "ppr-full HTML Response for /loading/c should cache the static part",
        "ppr-full HTML Response for /loading/c should have correct headers",
        "ppr-full HTML Response for /loading/c should resume with dynamic content",
        "ppr-full HTML Response for /nested/a should allow navigations to and from a pages/ page",
        "ppr-full HTML Response for /nested/a should cache the static part",
        "ppr-full HTML Response for /nested/a should have correct headers",
        "ppr-full HTML Response for /nested/a should resume with dynamic content",
        "ppr-full HTML Response for /nested/b should allow navigations to and from a pages/ page",
        "ppr-full HTML Response for /nested/b should cache the static part",
        "ppr-full HTML Response for /nested/b should have correct headers",
        "ppr-full HTML Response for /nested/b should resume with dynamic content",
        "ppr-full HTML Response for /nested/c should allow navigations to and from a pages/ page",
        "ppr-full HTML Response for /nested/c should cache the static part",
        "ppr-full HTML Response for /nested/c should have correct headers",
        "ppr-full HTML Response for /nested/c should resume with dynamic content",
        "ppr-full HTML Response for /no-suspense should allow navigations to and from a pages/ page",
        "ppr-full HTML Response for /no-suspense should cache the static part",
        "ppr-full HTML Response for /no-suspense should have correct headers",
        "ppr-full HTML Response for /no-suspense should resume with dynamic content",
        "ppr-full HTML Response for /no-suspense/nested/a should allow navigations to and from a pages/ page",
        "ppr-full HTML Response for /no-suspense/nested/a should cache the static part",
        "ppr-full HTML Response for /no-suspense/nested/a should have correct headers",
        "ppr-full HTML Response for /no-suspense/nested/a should resume with dynamic content",
        "ppr-full HTML Response for /no-suspense/nested/b should allow navigations to and from a pages/ page",
        "ppr-full HTML Response for /no-suspense/nested/b should cache the static part",
        "ppr-full HTML Response for /no-suspense/nested/b should have correct headers",
        "ppr-full HTML Response for /no-suspense/nested/b should resume with dynamic content",
        "ppr-full HTML Response for /no-suspense/nested/c should allow navigations to and from a pages/ page",
        "ppr-full HTML Response for /no-suspense/nested/c should cache the static part",
        "ppr-full HTML Response for /no-suspense/nested/c should have correct headers",
        "ppr-full HTML Response for /no-suspense/nested/c should resume with dynamic content",
        "ppr-full HTML Response for /on-demand/a should allow navigations to and from a pages/ page",
        "ppr-full HTML Response for /on-demand/a should cache the static part",
        "ppr-full HTML Response for /on-demand/a should have correct headers",
        "ppr-full HTML Response for /on-demand/a should resume with dynamic content",
        "ppr-full HTML Response for /on-demand/b should allow navigations to and from a pages/ page",
        "ppr-full HTML Response for /on-demand/b should cache the static part",
        "ppr-full HTML Response for /on-demand/b should have correct headers",
        "ppr-full HTML Response for /on-demand/b should resume with dynamic content",
        "ppr-full HTML Response for /on-demand/c should allow navigations to and from a pages/ page",
        "ppr-full HTML Response for /on-demand/c should cache the static part",
        "ppr-full HTML Response for /on-demand/c should have correct headers",
        "ppr-full HTML Response for /on-demand/c should resume with dynamic content",
        "ppr-full HTML Response for /static should allow navigations to and from a pages/ page",
        "ppr-full HTML Response for /static should have correct headers",
        "ppr-full HTML Response for /static should not contain dynamic content",
        "ppr-full Navigation Signals notFound() for /navigation/not-found should have correct headers",
        "ppr-full Navigation Signals notFound() for /navigation/not-found/dynamic should cache the static part",
        "ppr-full Navigation Signals notFound() for /navigation/not-found/dynamic should have correct headers",
        "ppr-full Navigation Signals redirect() for /navigation/redirect should have correct headers",
        "ppr-full Navigation Signals redirect() for /navigation/redirect/dynamic should cache the static part",
        "ppr-full Navigation Signals redirect() for /navigation/redirect/dynamic should have correct headers",
        "ppr-full Prefetch RSC Response for / should have correct headers",
        "ppr-full Prefetch RSC Response for / should not contain dynamic content",
        "ppr-full Prefetch RSC Response for /dynamic/force-dynamic should have correct headers",
        "ppr-full Prefetch RSC Response for /dynamic/force-dynamic should not contain dynamic content",
        "ppr-full Prefetch RSC Response for /dynamic/force-dynamic/nested/a should have correct headers",
        "ppr-full Prefetch RSC Response for /dynamic/force-dynamic/nested/a should not contain dynamic content",
        "ppr-full Prefetch RSC Response for /dynamic/force-dynamic/nested/b should have correct headers",
        "ppr-full Prefetch RSC Response for /dynamic/force-dynamic/nested/b should not contain dynamic content",
        "ppr-full Prefetch RSC Response for /dynamic/force-dynamic/nested/c should have correct headers",
        "ppr-full Prefetch RSC Response for /dynamic/force-dynamic/nested/c should not contain dynamic content",
        "ppr-full Prefetch RSC Response for /dynamic/force-static should have correct headers",
        "ppr-full Prefetch RSC Response for /dynamic/force-static should not contain dynamic content",
        "ppr-full Prefetch RSC Response for /loading/a should have correct headers",
        "ppr-full Prefetch RSC Response for /loading/a should not contain dynamic content",
        "ppr-full Prefetch RSC Response for /loading/b should have correct headers",
        "ppr-full Prefetch RSC Response for /loading/b should not contain dynamic content",
        "ppr-full Prefetch RSC Response for /loading/c should have correct headers",
        "ppr-full Prefetch RSC Response for /loading/c should not contain dynamic content",
        "ppr-full Prefetch RSC Response for /nested/a should have correct headers",
        "ppr-full Prefetch RSC Response for /nested/a should not contain dynamic content",
        "ppr-full Prefetch RSC Response for /nested/b should have correct headers",
        "ppr-full Prefetch RSC Response for /nested/b should not contain dynamic content",
        "ppr-full Prefetch RSC Response for /nested/c should have correct headers",
        "ppr-full Prefetch RSC Response for /nested/c should not contain dynamic content",
        "ppr-full Prefetch RSC Response for /no-suspense should have correct headers",
        "ppr-full Prefetch RSC Response for /no-suspense should not contain dynamic content",
        "ppr-full Prefetch RSC Response for /no-suspense/nested/a should have correct headers",
        "ppr-full Prefetch RSC Response for /no-suspense/nested/a should not contain dynamic content",
        "ppr-full Prefetch RSC Response for /no-suspense/nested/b should have correct headers",
        "ppr-full Prefetch RSC Response for /no-suspense/nested/b should not contain dynamic content",
        "ppr-full Prefetch RSC Response for /no-suspense/nested/c should have correct headers",
        "ppr-full Prefetch RSC Response for /no-suspense/nested/c should not contain dynamic content",
        "ppr-full Prefetch RSC Response for /on-demand/a should have correct headers",
        "ppr-full Prefetch RSC Response for /on-demand/a should not contain dynamic content",
        "ppr-full Prefetch RSC Response for /on-demand/b should have correct headers",
        "ppr-full Prefetch RSC Response for /on-demand/b should not contain dynamic content",
        "ppr-full Prefetch RSC Response for /on-demand/c should have correct headers",
        "ppr-full Prefetch RSC Response for /on-demand/c should not contain dynamic content",
        "ppr-full Prefetch RSC Response for /static should have correct headers",
        "ppr-full Prefetch RSC Response for /static should not contain dynamic content"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/ppr-navigations/avoid-popstate-flash/avoid-popstate-flash.test.ts": {
      "passed": [
        "avoid-popstate-flash does not flash back to partial PPR data during back/forward navigation"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/ppr-navigations/loading-tsx-no-partial-rendering/loading-tsx-no-partial-rendering.test.ts": {
      "passed": [],
      "failed": [
        "loading-tsx-no-partial-rendering when PPR is enabled, loading.tsx boundaries do not cause a partial prefetch"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/ppr-navigations/search-params/search-params.test.ts": {
      "passed": [
        "search-params updates page data during a nav even if no shared layouts have changed (e.g. updating a search param on the current page)"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/ppr-navigations/stale-prefetch-entry/stale-prefetch-entry.test.ts": {
      "passed": [
        "stale-prefetch-entry works if a prefetched route entry has become stale (too much time has elapsed since it was prefetched)"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/ppr/ppr.test.ts": {
      "passed": [
        "ppr /no-suspense/node/gsp/[slug] should serve the static & dynamic parts",
        "ppr /suspense/node/gsp/[slug] should not have the dynamic part",
        "ppr /suspense/node/gsp/[slug] should serve the static part first",
        "ppr build output correctly marks pages as being partially prerendered in the build output",
        "ppr for /loading/nested/1 should not have the dynamic part",
        "ppr for /loading/nested/1 should serve the static part",
        "ppr for /loading/nested/2 should not have the dynamic part",
        "ppr for /loading/nested/2 should serve the static part",
        "ppr for /loading/nested/3 should not have the dynamic part",
        "ppr for /loading/nested/3 should serve the static part",
        "ppr for /suspense/node should not have the dynamic part",
        "ppr for /suspense/node should serve the static part",
        "ppr for /suspense/node/nested/1 should not have the dynamic part",
        "ppr for /suspense/node/nested/1 should serve the static part",
        "ppr for /suspense/node/nested/2 should not have the dynamic part",
        "ppr for /suspense/node/nested/2 should serve the static part",
        "ppr for /suspense/node/nested/3 should not have the dynamic part",
        "ppr for /suspense/node/nested/3 should serve the static part",
        "ppr search parameters should render the page with the search parameters",
        "ppr should indicate the feature is experimental",
        "ppr with suspense for /suspense/edge should eventually render the dynamic part",
        "ppr with suspense for /suspense/node should eventually render the dynamic part",
        "ppr without suspense for /no-suspense should immediately render the dynamic part"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/prefetching-not-found/prefetching-not-found.test.ts": {
      "passed": [
        "prefetching-not-found should correctly navigate to/from a global 404 page when following links with prefetch=auto"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/resolve-extensions/resolve-extensions.test.ts": {
      "passed": [
        "turbo-resolve-extensions should SSR",
        "turbo-resolve-extensions should work using browser"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/revalidate-dynamic/revalidate-dynamic.test.ts": {
      "passed": [
        "app-dir revalidate-dynamic should correctly mark a route handler that uses revalidateTag as dynamic",
        "app-dir revalidate-dynamic should revalidate the data with /api/revalidate-path",
        "app-dir revalidate-dynamic should revalidate the data with /api/revalidate-tag"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/rewrites-redirects/rewrites-redirects.test.ts": {
      "passed": [
        "redirects and rewrites navigation using button should redirect from middleware correctly",
        "redirects and rewrites navigation using button should redirect from next.config.js correctly",
        "redirects and rewrites navigation using button should redirect using catchall from next.config.js correctly",
        "redirects and rewrites navigation using button should rewrite from middleware correctly",
        "redirects and rewrites navigation using button should rewrite from next.config.js correctly",
        "redirects and rewrites navigation using link should redirect from middleware correctly",
        "redirects and rewrites navigation using link should redirect from next.config.js correctly",
        "redirects and rewrites navigation using link should redirect using catchall from next.config.js correctly",
        "redirects and rewrites navigation using link should rewrite from middleware correctly",
        "redirects and rewrites navigation using link should rewrite from next.config.js correctly"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/root-layout-redirect/root-layout-redirect.test.ts": {
      "passed": ["root-layout-redirect should work using browser"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/root-layout-render-once/index.test.ts": {
      "passed": [
        "app-dir root layout render once should only render root layout once"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/root-layout/root-layout.test.ts": {
      "passed": [
        "app-dir root layout Should do a mpa navigation when switching root layout should work with basic routes",
        "app-dir root layout Should do a mpa navigation when switching root layout should work with route groups"
      ],
      "failed": [
        "app-dir root layout Should do a mpa navigation when switching root layout should work with dynamic catchall routes",
        "app-dir root layout Should do a mpa navigation when switching root layout should work with dynamic routes",
        "app-dir root layout Should do a mpa navigation when switching root layout should work with parallel routes",
        "app-dir root layout Should do a mpa navigation when switching root layout should work with static routes",
        "app-dir root layout should correctly handle navigation between multiple root layouts"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/route-page-manifest-bug/route-page-manifest-bug.test.ts": {
      "passed": [
        "route-page-manifest-bug should work when requesting route handler after page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/router-autoscroll/router-autoscroll.test.ts": {
      "passed": [
        "router autoscrolling on navigation bugs Should apply scroll when loading.js is used",
        "router autoscrolling on navigation bugs Should scroll to the top of the layout when the first child is display none",
        "router autoscrolling on navigation bugs Should scroll to the top of the layout when the first child is position fixed",
        "router autoscrolling on navigation bugs Should scroll to the top of the layout when the first child is position sticky",
        "router autoscrolling on navigation horizontal scroll should't scroll horizontally",
        "router autoscrolling on navigation router.refresh() should not scroll when called alone",
        "router autoscrolling on navigation router.refresh() should not stop router.push() from scrolling",
        "router autoscrolling on navigation vertical scroll should not scroll to top of document if page in viewport",
        "router autoscrolling on navigation vertical scroll should not scroll when the top of the page is in the viewport",
        "router autoscrolling on navigation vertical scroll should scroll down to the navigated page when it's below viewort",
        "router autoscrolling on navigation vertical scroll should scroll to top of document if possible while giving focus to page",
        "router autoscrolling on navigation vertical scroll should scroll to top of document when navigating between to pages without layout",
        "router autoscrolling on navigation vertical scroll should scroll to top of page when scrolling to phe top of the document wouldn't have the page in the viewport"
      ],
      "failed": [],
      "pending": [
        "router autoscrolling on navigation router.refresh() should not scroll the page when we hot reload"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/router-stuck-dynamic-static-segment/router-stuck-dynamic-static-segment.test.ts": {
      "passed": [
        "router-stuck-dynamic-static-segment should allow navigation between dynamic parameter and static parameter of the same value"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/rsc-basic/rsc-basic.test.ts": {
      "passed": [],
      "failed": [
        "app dir - rsc basics react@experimental should opt into the react@experimental when enabling ppr",
        "app dir - rsc basics react@experimental should opt into the react@experimental when enabling taint",
        "app dir - rsc basics should be able to call legacy react-dom/server APIs in client components",
        "app dir - rsc basics should be able to navigate between rsc routes",
        "app dir - rsc basics should correctly render component returning null",
        "app dir - rsc basics should correctly render component returning undefined",
        "app dir - rsc basics should correctly render layout returning null",
        "app dir - rsc basics should correctly render layout returning undefined",
        "app dir - rsc basics should correctly render page returning null",
        "app dir - rsc basics should correctly render page returning undefined",
        "app dir - rsc basics should create client reference successfully for all file conventions",
        "app dir - rsc basics should escape streaming data correctly",
        "app dir - rsc basics should generate edge SSR manifests for Node.js",
        "app dir - rsc basics should handle streaming server components correctly",
        "app dir - rsc basics should handle various kinds of exports correctly",
        "app dir - rsc basics should link correctly with next/link without mpa navigation to the page",
        "app dir - rsc basics should not apply rsc syntax checks in pages/api",
        "app dir - rsc basics should not use bundled react for pages with app",
        "app dir - rsc basics should render built-in 404 page for missing route if pagesDir is not presented",
        "app dir - rsc basics should render css-in-js suspense boundary correctly",
        "app dir - rsc basics should render initial styles of css-in-js in edge SSR correctly",
        "app dir - rsc basics should render initial styles of css-in-js in nodejs SSR correctly",
        "app dir - rsc basics should render server components correctly",
        "app dir - rsc basics should resolve different kinds of components correctly",
        "app dir - rsc basics should reuse the inline flight response without sending extra requests",
        "app dir - rsc basics should stick to the url without trailing /page suffix",
        "app dir - rsc basics should support multi-level server component imports",
        "app dir - rsc basics should support native modules in server component",
        "app dir - rsc basics should support next/link in server components",
        "app dir - rsc basics should support partial hydration with inlined server data",
        "app dir - rsc basics should support streaming for flight response",
        "app dir - rsc basics should suspense next/image in server components",
        "app dir - rsc basics should suspense next/legacy/image in server components",
        "app dir - rsc basics should track client components in dynamic imports",
        "app dir - rsc basics should use canary react for app"
      ],
      "pending": [
        "app dir - rsc basics should support partial hydration with inlined server data in browser",
        "app dir - rsc basics should support webpack loader rules"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/3rd-party-module/3rd-party-module.test.ts": {
      "passed": ["3rd Party CSS Module Support should render the module"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/basic-module-additional-data/basic-module-additional-data.test.ts": {
      "passed": [
        "Basic Module Additional Data Support should render the module"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/basic-module-include-paths/basic-module-include-paths.test.ts": {
      "passed": ["Basic Module Include Paths Support should render the module"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/basic-module-prepend-data/basic-module-prepend-data.test.ts": {
      "passed": ["Basic Module Prepend Data Support should render the module"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/basic-module/basic-module.test.ts": {
      "passed": ["Basic SCSS Module Support should render the module"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/catch-all-module/catch-all-module.test.ts": {
      "passed": ["Catch-all Route CSS Module Usage should render the module"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/compilation-and-prefixing/compilation-and-prefixing.test.ts": {
      "passed": [],
      "failed": [
        "SCSS Support Production only CSS Compilation and Prefixing should've compiled and prefixed",
        "SCSS Support Production only CSS Compilation and Prefixing should've emitted a source map"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/composes-basic/composes-basic.test.ts": {
      "passed": ["CSS Module Composes Usage (Basic) should render the module"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/composes-external/composes-external.test.ts": {
      "passed": [
        "CSS Module Composes Usage (External) should render the module"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/data-url/data-url.test.ts": {
      "passed": [
        "SCSS Support loader handling Data Urls should render the module"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/dev-module/dev-module.test.ts": {
      "passed": [
        "Has CSS Module in computed styles in Development should have CSS for page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/dynamic-route-module/dynamic-route-module.test.ts": {
      "passed": [
        "Dynamic Route CSS Module Usage should apply styles correctly"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/external-url/external-url.test.ts": {
      "passed": [
        "SCSS Support loader handling External imports should include font on the page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/hmr-module/hmr-module.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "Can hot reload CSS Module without losing state development only should update CSS color without remounting <input>"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/invalid-global-module/invalid-global-module.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "Invalid CSS Global Module Usage in node_modules production only should fail to build"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/invalid-global-with-app/invalid-global-with-app.test.ts": {
      "passed": [],
      "failed": [
        "Invalid Global CSS with Custom App production only should fail to build"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/invalid-global/invalid-global.test.ts": {
      "passed": [],
      "failed": ["Invalid Global CSS production only should fail to build"],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/invalid-module-document/invalid-module-document.test.ts": {
      "passed": [],
      "failed": [
        "Invalid SCSS in _document production only should fail to build"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/invalid-module/invalid-module.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "Invalid CSS Module Usage in node_modules production only should fail to build"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/loader-order/loader-order.test.ts": {
      "passed": [
        "SCSS Support loader handling Preprocessor loader order should render the module"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/multi-global-reversed/multi-global-reversed.test.ts": {
      "passed": [
        "(SCSS) Multi Global Support (reversed) should render the page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/multi-global/multi-global.test.ts": {
      "passed": ["Multi Global Support should render the page"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/multi-page/multi-page.test.ts": {
      "passed": [
        "SCSS Support Has CSS in computed styles in Development should have CSS for page",
        "SCSS Support Has CSS in computed styles in Production should have CSS for page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/nested-global/nested-global.test.ts": {
      "passed": ["Nested @import() Global Support should render the page"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/nm-module-nested/nm-module-nested.test.ts": {
      "passed": [
        "Valid Nested CSS Module Usage from within node_modules should render the page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/nm-module/nm-module.test.ts": {
      "passed": [
        "Valid CSS Module Usage from within node_modules should render the page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/npm-import-bad/npm-import-bad.test.ts": {
      "passed": [
        "CSS Import from node_modules production only should fail the build"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/npm-import-nested/npm-import-nested.test.ts": {
      "passed": [
        "Good Nested CSS Import from node_modules should render the page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/npm-import-tilde/npm-import-tilde.test.ts": {
      "passed": [
        "Good CSS Import from node_modules with tilde should render the page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/npm-import/npm-import.test.ts": {
      "passed": ["Good CSS Import from node_modules should render the page"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/prod-module/prod-module.test.ts": {
      "passed": [
        "Has CSS Module in computed styles in Production should render the page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/scss-mixins/scss-mixins.test.ts": {
      "passed": ["Scss Mixins should work using browser"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/single-global-src/single-global-src.test.ts": {
      "passed": ["Basic Global Support with src/ dir should render the page"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/single-global/single-global.test.ts": {
      "passed": ["Basic Global Support scss should render the page"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/unused/unused.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "unused scss Body is not hidden when broken in Development development only should have body visible",
        "unused scss Body is not hidden when unused in Development development only should have body visible"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/url-global-asset-prefix-1/url-global-asset-prefix-1.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "SCSS Support loader handling CSS URL via `file-loader` and asset prefix (1) should render the page"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/url-global-asset-prefix-2/url-global-asset-prefix-2.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "SCSS Support loader handling CSS URL via `file-loader` and asset prefix (2) should render the page"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/url-global-partial/url-global-partial.test.ts": {
      "passed": [
        "SCSS Support loader handling CSS URL via file-loader sass partial should render the page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/url-global/url-global.test.ts": {
      "passed": [
        "SCSS Support loader handling CSS URL via `file-loader` should render the page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/valid-and-invalid-global/valid-and-invalid-global.test.ts": {
      "passed": [],
      "failed": [
        "Valid and Invalid Global CSS with Custom App production only should fail to build"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/webpack-error/webpack-error.test.ts": {
      "passed": [],
      "failed": [
        "SCSS Support production only Friendly Webpack Error should be a friendly error successfully"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/scss/with-styled-jsx/with-styled-jsx.test.ts": {
      "passed": [
        "Ordering with styled-jsx should have the correct color (css ordering)"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/search-params-react-key/layout-params.test.ts": {
      "passed": [
        "app dir - search params keys should keep the React router instance the same when changing the search params"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/searchparams-static-bailout/searchparams-static-bailout.test.ts": {
      "passed": [
        "searchparams-static-bailout client component should bailout when using searchParams",
        "searchparams-static-bailout client component should bailout when using searchParams is passed to client component",
        "searchparams-static-bailout server component should bailout when using searchParams",
        "searchparams-static-bailout server component should not bailout when not using searchParams"
      ],
      "failed": [
        "searchparams-static-bailout client component should not bailout when not using searchParams"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/server-actions-relative-redirect/server-actions-relative-redirect.test.ts": {
      "passed": [
        "server-actions-relative-redirect should work with absolute redirect",
        "server-actions-relative-redirect should work with relative redirect"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/server-components-externals/index.test.ts": {
      "passed": [
        "app-dir - server components externals should externalize serverComponentsExternalPackages for server rendering layer",
        "app-dir - server components externals should have externals for those in config.experimental.serverComponentsExternalPackages",
        "app-dir - server components externals uses externals for predefined list in server-external-packages.json"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/set-cookies/set-cookies.test.ts": {
      "passed": [
        "set-cookies for edge runtime for /app should set two set-cookie headers",
        "set-cookies for edge runtime for /pages should set two set-cookie headers",
        "set-cookies for experimental-edge runtime for /app should set two set-cookie headers",
        "set-cookies for experimental-edge runtime for /pages should set two set-cookie headers",
        "set-cookies for node runtime for /app should set two set-cookie headers",
        "set-cookies for node runtime for /pages should set two set-cookie headers"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/shallow-routing/shallow-routing.test.ts": {
      "passed": [
        "shallow-routing back and forward client-side navigation should support setting a different pathname reflected on usePathname and then still support navigating back and forward",
        "shallow-routing back and forward mpa navigation should support hash navigations while continuing to work for pushState/replaceState APIs",
        "shallow-routing back and forward mpa navigation should support setting data and then still support navigating back and forward",
        "shallow-routing pushState should support setting a different pathname reflected on usePathname",
        "shallow-routing pushState should support setting a different searchParam reflected on useSearchParams",
        "shallow-routing pushState should support setting a different url using a string",
        "shallow-routing pushState should support setting data",
        "shallow-routing pushState should work when given a null state value",
        "shallow-routing replaceState should support setting a different pathname reflected on usePathname",
        "shallow-routing replaceState should support setting a different searchParam reflected on useSearchParams",
        "shallow-routing replaceState should support setting a different url using a string",
        "shallow-routing replaceState should support setting data",
        "shallow-routing replaceState should work when given a null state value",
        "shallow-routing replaceState should work when given an undefined state value",
        "shallow-routing should work when given an undefined state value"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/similar-pages-paths/similar-pages-paths.test.ts": {
      "passed": [
        "app-dir similar pages paths should not have conflicts for similar pattern page paths between app and pages"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/syntax-highlighter-crash/syntax-highlighter-crash.test.ts": {
      "passed": ["syntax-highlighter-crash should render the page"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/taint/process-taint.test.ts": {
      "passed": [
        "app dir - taint should error when passing process env to client component"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/test-template/{{ toFileName name }}/{{ toFileName name }}.test.ts": {
      "passed": [
        "{{name}} should work using browser",
        "{{name}} should work using cheerio",
        "{{name}} should work with fetch",
        "{{name}} should work with html"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/third-parties/basic.test.ts": {
      "passed": [
        "@next/third-parties basic usage renders GA",
        "@next/third-parties basic usage renders GTM",
        "@next/third-parties basic usage renders GoogleMapsEmbed",
        "@next/third-parties basic usage renders YoutubeEmbed"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/trailingslash/trailingslash.test.ts": {
      "passed": [
        "app-dir trailingSlash handling should contain trailing slash to canonical url",
        "app-dir trailingSlash handling should not add trailing slash to external url or relative url with query",
        "app-dir trailingSlash handling should redirect route when clicking link",
        "app-dir trailingSlash handling should redirect route when requesting it directly",
        "app-dir trailingSlash handling should redirect route when requesting it directly by browser",
        "app-dir trailingSlash handling should render link with trailing slash"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/turbopack-reports/turbopack-reports.test.ts": {
      "passed": ["turbopack-reports should render page importing sqlite3"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/underscore-ignore-app-paths/underscore-ignore-app-paths.test.ts": {
      "passed": [],
      "failed": [
        "underscore-ignore-app-paths should not serve app path with underscore",
        "underscore-ignore-app-paths should serve app path with %5F",
        "underscore-ignore-app-paths should serve pages path with underscore"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/use-params/use-params.test.ts": {
      "passed": [
        "use-params should work for catch all params",
        "use-params should work for nested dynamic params",
        "use-params should work for nested dynamic params client navigating",
        "use-params should work for single dynamic param",
        "use-params should work for single dynamic param client navigating",
        "use-params shouldn't rerender host component when prefetching"
      ],
      "failed": ["use-params should work on pages router"],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/use-selected-layout-segment-s/use-selected-layout-segment-s.test.ts": {
      "passed": [
        "useSelectedLayoutSegment(s) should correctly update when changing catchall segment",
        "useSelectedLayoutSegment(s) should correctly update when changing param segment",
        "useSelectedLayoutSegment(s) should correctly update when changing static segment",
        "useSelectedLayoutSegment(s) should return correct values for root layout",
        "useSelectedLayoutSegment(s) should return correct values in layout after last segment",
        "useSelectedLayoutSegment(s) should return correct values in layout before catchall segment",
        "useSelectedLayoutSegment(s) should return correct values in layout before param segment",
        "useSelectedLayoutSegment(s) should return correct values in layout before static segment"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/webpack-loader-conditions/webpack-loader-conditions.test.ts": {
      "passed": [
        "webpack-loader-conditions should only run the test in turbopack"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/with-babel/with-babel.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "with babel with babel should contain og package files in middleware",
        "with babel with babel should support babel in app dir"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/with-exported-function-config/with-exported-function-config.test.ts": {
      "passed": [
        "with-exported-function-config should have correct values in function config manifest"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/app-dir/x-forwarded-headers/x-forwarded-headers.test.ts": {
      "passed": [
        "x-forwarded-headers already assigned should not override existing x-forwarded-* headers",
        "x-forwarded-headers already assigned should work with multiple x-forwarded-* headers",
        "x-forwarded-headers host header exists should include x-forwarded-* headers relative to host",
        "x-forwarded-headers should include x-forwarded-* headers"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/basepath-trailing-slash.test.ts": {
      "passed": [
        "basePath + trailingSlash should allow URL query strings on index without refresh"
      ],
      "failed": [
        "basePath + trailingSlash should allow URL query strings without refresh",
        "basePath + trailingSlash should correctly replace state when same asPath but different url"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/basepath.test.ts": {
      "passed": [
        "basePath should 404 for public file without basePath",
        "basePath should 404 when manually adding basePath with <Link>",
        "basePath should 404 when manually adding basePath with router.push",
        "basePath should 404 when manually adding basePath with router.replace",
        "basePath should add basePath to routes-manifest",
        "basePath should add header with basePath by default",
        "basePath should add header without basePath when set to false",
        "basePath should allow URL query strings on index without refresh",
        "basePath should handle 404 urls that start with basePath",
        "basePath should handle query/hash correctly during query updating ## $search",
        "basePath should handle query/hash correctly during query updating ##? $search",
        "basePath should handle query/hash correctly during query updating ##hello $search",
        "basePath should handle query/hash correctly during query updating ##hello? $search",
        "basePath should handle query/hash correctly during query updating #? $search",
        "basePath should handle query/hash correctly during query updating #hello? $search",
        "basePath should handle query/hash correctly during query updating #hello?world $search",
        "basePath should have basePath field on Router",
        "basePath should have correct href for a link",
        "basePath should have correct href for a link to /",
        "basePath should have correct router paths on first load of /",
        "basePath should navigate an absolute local url without basePath",
        "basePath should navigate an absolute url",
        "basePath should navigate to external site and back",
        "basePath should not add header with basePath when set to false",
        "basePath should not add header without basePath without disabling",
        "basePath should not redirect with basePath when set to false",
        "basePath should not redirect without basePath without disabling",
        "basePath should not rewrite with basePath when set to false",
        "basePath should not rewrite without basePath without disabling",
        "basePath should not update URL for a 404",
        "basePath should redirect trailing slash correctly",
        "basePath should redirect trailing slash on root correctly",
        "basePath should redirect with basePath by default",
        "basePath should redirect without basePath when set to false",
        "basePath should respect basePath in amphtml link rel",
        "basePath should rewrite with basePath by default",
        "basePath should rewrite without basePath when set to false",
        "basePath should serve public file with basePath correctly",
        "basePath should show 404 for page not under the /docs prefix",
        "basePath should show the hello page under the /docs prefix",
        "basePath should show the other-page page under the /docs prefix",
        "basePath should use urls with basepath in router events for hash changes",
        "basePath should work with hash links",
        "basePath should work with nested folder with same name as basePath"
      ],
      "failed": [
        "basePath should allow URL query strings without refresh",
        "basePath should correctly replace state when same asPath but different url",
        "basePath should fetch data for getServerSideProps without reloading",
        "basePath should fetch data for getStaticProps without reloading",
        "basePath should handle query/hash correctly during query updating #a ?hello",
        "basePath should handle query/hash correctly during query updating #a ?hello=",
        "basePath should handle query/hash correctly during query updating #a ?hello=world",
        "basePath should have correct router paths on first load of /hello",
        "basePath should navigate an absolute local url with basePath",
        "basePath should navigate back correctly to a dynamic route",
        "basePath should navigate to /404 correctly client-side",
        "basePath should navigate to /_error correctly client-side",
        "basePath should navigate to index page with getStaticProps",
        "basePath should navigate to the page without refresh",
        "basePath should prefetch pages correctly in viewport with <Link>",
        "basePath should prefetch pages correctly when manually called",
        "basePath should update dynamic params after mount correctly",
        "basePath should use urls with basepath in router events",
        "basePath should use urls with basepath in router events for cancelled routes",
        "basePath should use urls with basepath in router events for failed route change",
        "basePath should work with catch-all page",
        "basePath should work with normal dynamic page"
      ],
      "pending": [
        "basePath should navigate back to a non-basepath 404 that starts with basepath",
        "basePath should navigate to nested index page with getStaticProps"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/browserslist-extends/index.test.ts": {
      "passed": ["browserslist-extends should work"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/browserslist/browserslist.test.ts": {
      "passed": [],
      "failed": [],
      "pending": ["Browserslist should apply browserslist target"],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/browserslist/default-target.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "default browserslist target should apply default browserslist target"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/cancel-request/stream-cancel.test.ts": {
      "passed": [
        "streaming responses cancel inner stream after disconnect edge app route handler cancels stalled stream",
        "streaming responses cancel inner stream after disconnect edge app route handler cancels stream making progress",
        "streaming responses cancel inner stream after disconnect edge app route handler cancels stream that never sent data",
        "streaming responses cancel inner stream after disconnect edge pages api cancels stalled stream",
        "streaming responses cancel inner stream after disconnect edge pages api cancels stream making progress",
        "streaming responses cancel inner stream after disconnect edge pages api cancels stream that never sent data",
        "streaming responses cancel inner stream after disconnect middleware cancels stalled stream",
        "streaming responses cancel inner stream after disconnect middleware cancels stream making progress",
        "streaming responses cancel inner stream after disconnect middleware cancels stream that never sent data",
        "streaming responses cancel inner stream after disconnect node app route handler cancels stalled stream",
        "streaming responses cancel inner stream after disconnect node app route handler cancels stream making progress",
        "streaming responses cancel inner stream after disconnect node app route handler cancels stream that never sent data",
        "streaming responses cancel inner stream after disconnect node pages api cancels stalled stream",
        "streaming responses cancel inner stream after disconnect node pages api cancels stream making progress",
        "streaming responses cancel inner stream after disconnect node pages api cancels stream that never sent data"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/children-page/index.test.ts": {
      "passed": [
        "children-page with app dir should show the content if you have a page named children",
        "children-page with pages dir should show the content if you have a page named children"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/config-promise-export/async-function.test.ts": {
      "passed": ["async export should work"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/config-promise-export/promise.test.ts": {
      "passed": ["promise export should work"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/config-schema-check/index.test.ts": {
      "passed": [
        "next.config.js schema validating - defaultConfig should validate against defaultConfig",
        "next.config.js schema validating - invalid config should warn the invalid next config"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/conflicting-app-page-error/index.test.ts": {
      "passed": [
        "Conflict between app file and pages file should print error for conflicting app/page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/custom-app-render/custom-app-render.test.ts": {
      "passed": [
        "custom-app-render should render /",
        "custom-app-render should render /render"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/disable-js-preload/test/index.test.js": {
      "passed": [
        "disabled JS preloads should not have JS preload links",
        "disabled JS preloads should render the page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/dynamic-route-interpolation/index.test.ts": {
      "passed": [
        "Dynamic Route Interpolation should work",
        "Dynamic Route Interpolation should work with brackets",
        "Dynamic Route Interpolation should work with brackets in API routes",
        "Dynamic Route Interpolation should work with parameter itself",
        "Dynamic Route Interpolation should work with parameter itself in API routes"
      ],
      "failed": [
        "Dynamic Route Interpolation should bust data cache",
        "Dynamic Route Interpolation should bust data cache with symbol",
        "Dynamic Route Interpolation should support both encoded and decoded nextjs reserved path convention characters in path"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/edge-api-endpoints-can-receive-body/index.test.ts": {
      "passed": [
        "Edge API endpoints can receive body reads the body as text",
        "Edge API endpoints can receive body reads the body from index"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/edge-async-local-storage/index.test.ts": {
      "passed": [
        "edge api can use async local storage cans use a single instance per request",
        "edge api can use async local storage cans use multiple instances per request"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/edge-can-read-request-body/index.test.ts": {
      "passed": [
        "Edge can read request body middleware reads a JSON body",
        "Edge can read request body middleware reads a multipart form data",
        "Edge can read request body middleware reads a text body",
        "Edge can read request body middleware reads an URL encoded form data",
        "Edge can read request body renders the static page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/edge-can-use-wasm-files/index.test.ts": {
      "passed": [
        "edge api endpoints can use wasm files uses the wasm file",
        "middleware can use wasm files can be called twice",
        "middleware can use wasm files lists the necessary wasm bindings in the manifest",
        "middleware can use wasm files uses the wasm file",
        "middleware can use wasm files with the experimental modes on uses the wasm file"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/edge-compiler-can-import-blob-assets/index.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "Edge Compiler can import asset assets allows to assets from node_modules",
        "Edge Compiler can import asset assets allows to fetch a remote URL",
        "Edge Compiler can import asset assets allows to fetch a remote URL with a path and basename",
        "Edge Compiler can import asset assets allows to fetch image assets",
        "Edge Compiler can import asset assets allows to fetch text assets",
        "Edge Compiler can import asset assets extracts all the assets from the bundle"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/edge-compiler-module-exports-preference/index.test.ts": {
      "passed": [
        "Edge compiler module exports preference favors the browser export"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/edge-configurable-runtime/index.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "Configurable runtime for pages and API routes In start mode builds with API route on the edge runtime and page on the experimental edge runtime",
        "Configurable runtime for pages and API routes In start mode does not build with page on the edge runtime",
        "Configurable runtime for src/pages and API routes In start mode builds with API route on the edge runtime and page on the experimental edge runtime",
        "Configurable runtime for src/pages and API routes In start mode does not build with page on the edge runtime"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/edge-pages-support/edge-document.test.ts": {
      "passed": [],
      "failed": [
        "edge render - custom _document with edge runtime should render page properly"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/edge-pages-support/index.test.ts": {
      "passed": [
        "edge-render-getserversideprops should have correct query for pages/api",
        "edge-render-getserversideprops should have correct query for pages/api dynamic",
        "edge-render-getserversideprops should have correct query/params on /[id]",
        "edge-render-getserversideprops should have correct query/params on dynamic rewrite",
        "edge-render-getserversideprops should have correct query/params on index",
        "edge-render-getserversideprops should have correct query/params on rewrite",
        "edge-render-getserversideprops should have data routes in routes-manifest",
        "edge-render-getserversideprops should respond to _next/data for [id] correctly",
        "edge-render-getserversideprops should respond to _next/data for index correctly"
      ],
      "failed": [
        "edge-render-getserversideprops should not output trace files for edge routes"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/edge-runtime-pages-api-route/edge-runtime-pages-api-route.test.ts": {
      "passed": [
        "Edge runtime pages-api route should work edge runtime",
        "Edge runtime pages-api route should work with node runtime"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/edge-runtime-uses-edge-light-import-specifier-for-packages/edge-runtime-uses-edge-light-import-specifier-for-packages.test.ts": {
      "passed": [
        "edge-runtime uses edge-light import specifier for packages app-dir imports the correct module",
        "edge-runtime uses edge-light import specifier for packages pages import the correct module",
        "edge-runtime uses edge-light import specifier for packages pages/api endpoints import the correct module"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/esm-externals/esm-externals.test.ts": {
      "passed": [
        "esm-externals should render the correct page for /client",
        "esm-externals should render the correct page for /server",
        "esm-externals should render the correct page for /static",
        "esm-externals should return the correct SSR HTML for /client",
        "esm-externals should return the correct SSR HTML for /server"
      ],
      "failed": [
        "esm-externals should render the correct page for /ssg",
        "esm-externals should render the correct page for /ssr",
        "esm-externals should return the correct SSR HTML for /ssg",
        "esm-externals should return the correct SSR HTML for /ssr",
        "esm-externals should return the correct SSR HTML for /static"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/favicon-short-circuit/favicon-short-circuit.test.ts": {
      "passed": [],
      "failed": [
        "favicon-short-circuit should not short circuit the favicon in production"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/fetch-failures-have-good-stack-traces-in-edge-runtime/fetch-failures-have-good-stack-traces-in-edge-runtime.test.ts": {
      "passed": [],
      "failed": [
        "fetch failures have good stack traces in edge runtime when awaiting `fetch` using an unknown domain, stack traces are preserved",
        "fetch failures have good stack traces in edge runtime when returning `fetch` using an unknown domain, stack traces are preserved"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/getserversideprops/test/index.test.ts": {
      "passed": [
        "getServerSideProps should SSR getServerSideProps page correctly",
        "getServerSideProps should SSR normal page correctly",
        "getServerSideProps should allow POST request for getServerSideProps page",
        "getServerSideProps should always call getServerSideProps without caching",
        "getServerSideProps should handle throw ENOENT correctly",
        "getServerSideProps should have correct req.url and query for direct visit",
        "getServerSideProps should have correct req.url and query for direct visit dynamic page",
        "getServerSideProps should have correct req.url and query for direct visit dynamic page rewrite direct",
        "getServerSideProps should have correct req.url and query for direct visit dynamic page rewrite direct with internal query",
        "getServerSideProps should have correct req.url and query for direct visit dynamic page rewrite param",
        "getServerSideProps should have correct req.url and query for direct visit dynamic page with query",
        "getServerSideProps should have gssp in __NEXT_DATA__",
        "getServerSideProps should have original req.url for /_next/data request",
        "getServerSideProps should have original req.url for /_next/data request dynamic page",
        "getServerSideProps should have original req.url for /_next/data request dynamic page with query",
        "getServerSideProps should have original req.url for /_next/data request with query",
        "getServerSideProps should load a fast refresh page",
        "getServerSideProps should navigate to a normal page and back",
        "getServerSideProps should not fetch data on mount",
        "getServerSideProps should not have gssp in __NEXT_DATA__ for non-GSSP page",
        "getServerSideProps should not re-call getServerSideProps when updating query",
        "getServerSideProps should not show error for accessing res after gssp returns",
        "getServerSideProps should not show error for invalid JSON returned from getServerSideProps",
        "getServerSideProps should not show error for invalid JSON returned from getStaticProps on CST",
        "getServerSideProps should not warn for accessing res after gssp returns",
        "getServerSideProps should output routes-manifest correctly",
        "getServerSideProps should parse query values on mount correctly",
        "getServerSideProps should pass query for data request",
        "getServerSideProps should provide correct query value for dynamic page",
        "getServerSideProps should reload page on failed data request",
        "getServerSideProps should render 404 correctly when notFound is returned (dynamic)",
        "getServerSideProps should render 404 correctly when notFound is returned (non-dynamic)",
        "getServerSideProps should render correctly when notFound is false (dynamic)",
        "getServerSideProps should render correctly when notFound is false (non-dynamic)",
        "getServerSideProps should respect custom caching header",
        "getServerSideProps should return data correctly",
        "getServerSideProps should return data correctly for dynamic page",
        "getServerSideProps should return data correctly when props is a promise",
        "getServerSideProps should set default caching header",
        "getServerSideProps should supply params values for catchall correctly",
        "getServerSideProps should supply query values SSR",
        "getServerSideProps should work with early request ending"
      ],
      "failed": [
        "getServerSideProps should dedupe server data requests",
        "getServerSideProps should navigate between pages successfully",
        "getServerSideProps should pass query for data request on navigation",
        "getServerSideProps should render 404 correctly when notFound is returned client-transition (dynamic)",
        "getServerSideProps should render 404 correctly when notFound is returned client-transition (non-dynamic)"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/handle-non-hoisted-swc-helpers/index.test.ts": {
      "passed": ["handle-non-hoisted-swc-helpers should work"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/hello-world/hello-world.test.ts": {
      "passed": [
        "hello-world should work using browser",
        "hello-world should work using cheerio",
        "hello-world should work with fetch",
        "hello-world should work with html"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/i18n-api-support/index.test.ts": {
      "passed": [
        "i18n API support should fallback rewrite non-matching API request",
        "i18n API support should respond to normal API request",
        "i18n API support should respond to normal dynamic API request"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/i18n-data-fetching-redirect/index.test.ts": {
      "passed": [
        "i18n-data-fetching-redirect Redirect to another locale gsp-blocking-redirect en -> sv",
        "i18n-data-fetching-redirect Redirect to another locale gsp-blocking-redirect sv -> en",
        "i18n-data-fetching-redirect Redirect to another locale gssp-redirect en -> sv",
        "i18n-data-fetching-redirect Redirect to another locale gssp-redirect sv -> en",
        "i18n-data-fetching-redirect Redirect to locale from context gsp-blocking-redirect en",
        "i18n-data-fetching-redirect Redirect to locale from context gsp-blocking-redirect sv",
        "i18n-data-fetching-redirect Redirect to locale from context gssp-redirect en",
        "i18n-data-fetching-redirect Redirect to locale from context gssp-redirect sv"
      ],
      "failed": [
        "i18n-data-fetching-redirect Redirect to another locale gsp-fallback-redirect en -> sv",
        "i18n-data-fetching-redirect Redirect to another locale gsp-fallback-redirect sv -> en",
        "i18n-data-fetching-redirect Redirect to another locale next/link gsp-blocking-redirect en -> sv",
        "i18n-data-fetching-redirect Redirect to another locale next/link gsp-blocking-redirect sv -> en",
        "i18n-data-fetching-redirect Redirect to another locale next/link gsp-fallback-redirect en -> sv",
        "i18n-data-fetching-redirect Redirect to another locale next/link gsp-fallback-redirect sv -> en",
        "i18n-data-fetching-redirect Redirect to another locale next/link gssp-redirect en -> sv",
        "i18n-data-fetching-redirect Redirect to another locale next/link gssp-redirect sv -> en",
        "i18n-data-fetching-redirect Redirect to locale from context gsp-fallback-redirect en",
        "i18n-data-fetching-redirect Redirect to locale from context gsp-fallback-redirect sv",
        "i18n-data-fetching-redirect Redirect to locale from context next/link gsp-blocking-redirect en",
        "i18n-data-fetching-redirect Redirect to locale from context next/link gsp-blocking-redirect sv",
        "i18n-data-fetching-redirect Redirect to locale from context next/link gsp-fallback-redirect en",
        "i18n-data-fetching-redirect Redirect to locale from context next/link gsp-fallback-redirect sv",
        "i18n-data-fetching-redirect Redirect to locale from context next/link gssp-redirect en",
        "i18n-data-fetching-redirect Redirect to locale from context next/link gssp-redirect sv"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/i18n-data-route/i18n-data-route.test.ts": {
      "passed": [
        "i18n-data-route with locale prefix /en-CA should render /[slug]/about via /en-CA/blog/about",
        "i18n-data-route with locale prefix /en-CA should render /about via /en-CA/about",
        "i18n-data-route with locale prefix /en-CA should serve data for /[slug]/about",
        "i18n-data-route with locale prefix /en-CA should serve data for /about",
        "i18n-data-route with locale prefix /fr-CA should render /[slug]/about via /fr-CA/blog/about",
        "i18n-data-route with locale prefix /fr-CA should render /about via /fr-CA/about",
        "i18n-data-route with locale prefix /fr-CA should serve data for /[slug]/about",
        "i18n-data-route with locale prefix /fr-CA should serve data for /about",
        "i18n-data-route without locale prefix should render /[slug]/about via /blog/about",
        "i18n-data-route without locale prefix should render /about via /about",
        "i18n-data-route without locale prefix should serve data for /[slug]/about",
        "i18n-data-route without locale prefix should serve data for /about"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/i18n-default-locale-redirect/i18n-default-locale-redirect.test.ts": {
      "passed": [
        "i18-default-locale-redirect should not request a path prefixed with default locale",
        "i18-default-locale-redirect should request a path prefixed with non-default locale"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/i18n-disallow-multiple-locales/i18n-disallow-multiple-locales.test.ts": {
      "passed": [
        "i18n-disallow-multiple-locales /en should 200",
        "i18n-disallow-multiple-locales /en-US should 200",
        "i18n-disallow-multiple-locales /en-US/en should 404",
        "i18n-disallow-multiple-locales /en-US/en-US should 404",
        "i18n-disallow-multiple-locales /en-US/fr should 404",
        "i18n-disallow-multiple-locales /en-US/fr-BE should 404",
        "i18n-disallow-multiple-locales /en-US/nl should 404",
        "i18n-disallow-multiple-locales /en-US/nl-BE should 404",
        "i18n-disallow-multiple-locales /en-US/nl-NL should 404",
        "i18n-disallow-multiple-locales /en/en should 404",
        "i18n-disallow-multiple-locales /en/en-US should 404",
        "i18n-disallow-multiple-locales /en/fr should 404",
        "i18n-disallow-multiple-locales /en/fr-BE should 404",
        "i18n-disallow-multiple-locales /en/nl should 404",
        "i18n-disallow-multiple-locales /en/nl-BE should 404",
        "i18n-disallow-multiple-locales /en/nl-NL should 404",
        "i18n-disallow-multiple-locales /fr should 200",
        "i18n-disallow-multiple-locales /fr-BE should 200",
        "i18n-disallow-multiple-locales /fr-BE/en should 404",
        "i18n-disallow-multiple-locales /fr-BE/en-US should 404",
        "i18n-disallow-multiple-locales /fr-BE/fr should 404",
        "i18n-disallow-multiple-locales /fr-BE/fr-BE should 404",
        "i18n-disallow-multiple-locales /fr-BE/nl should 404",
        "i18n-disallow-multiple-locales /fr-BE/nl-BE should 404",
        "i18n-disallow-multiple-locales /fr-BE/nl-NL should 404",
        "i18n-disallow-multiple-locales /fr/en should 404",
        "i18n-disallow-multiple-locales /fr/en-US should 404",
        "i18n-disallow-multiple-locales /fr/fr should 404",
        "i18n-disallow-multiple-locales /fr/fr-BE should 404",
        "i18n-disallow-multiple-locales /fr/nl should 404",
        "i18n-disallow-multiple-locales /fr/nl-BE should 404",
        "i18n-disallow-multiple-locales /fr/nl-NL should 404",
        "i18n-disallow-multiple-locales /nl should 200",
        "i18n-disallow-multiple-locales /nl-BE should 200",
        "i18n-disallow-multiple-locales /nl-BE/en should 404",
        "i18n-disallow-multiple-locales /nl-BE/en-US should 404",
        "i18n-disallow-multiple-locales /nl-BE/fr should 404",
        "i18n-disallow-multiple-locales /nl-BE/fr-BE should 404",
        "i18n-disallow-multiple-locales /nl-BE/nl should 404",
        "i18n-disallow-multiple-locales /nl-BE/nl-BE should 404",
        "i18n-disallow-multiple-locales /nl-BE/nl-NL should 404",
        "i18n-disallow-multiple-locales /nl-NL should 200",
        "i18n-disallow-multiple-locales /nl-NL/en should 404",
        "i18n-disallow-multiple-locales /nl-NL/en-US should 404",
        "i18n-disallow-multiple-locales /nl-NL/fr should 404",
        "i18n-disallow-multiple-locales /nl-NL/fr-BE should 404",
        "i18n-disallow-multiple-locales /nl-NL/nl should 404",
        "i18n-disallow-multiple-locales /nl-NL/nl-BE should 404",
        "i18n-disallow-multiple-locales /nl-NL/nl-NL should 404",
        "i18n-disallow-multiple-locales /nl/en should 404",
        "i18n-disallow-multiple-locales /nl/en-US should 404",
        "i18n-disallow-multiple-locales /nl/fr should 404",
        "i18n-disallow-multiple-locales /nl/fr-BE should 404",
        "i18n-disallow-multiple-locales /nl/nl should 404",
        "i18n-disallow-multiple-locales /nl/nl-BE should 404",
        "i18n-disallow-multiple-locales /nl/nl-NL should 404",
        "i18n-disallow-multiple-locales should verify the default locale works"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/i18n-ignore-redirect-source-locale/redirects-with-basepath.test.ts": {
      "passed": [
        "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from and to: ",
        "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from and to: /en",
        "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from and to: /nl",
        "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from and to: /sv",
        "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from:  to: /",
        "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from:  to: en",
        "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from:  to: sv",
        "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from: /en to: /",
        "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from: /en to: en",
        "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from: /en to: sv",
        "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from: /nl to: /",
        "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from: /nl to: en",
        "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from: /nl to: sv",
        "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from: /sv to: /",
        "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from: /sv to: en",
        "i18n-ignore-redirect-source-locale with basepath get redirected to the new page, from: /sv to: sv"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/i18n-ignore-redirect-source-locale/redirects.test.ts": {
      "passed": [
        "i18n-ignore-redirect-source-locale get redirected to the new page, from and to: ",
        "i18n-ignore-redirect-source-locale get redirected to the new page, from and to: /en",
        "i18n-ignore-redirect-source-locale get redirected to the new page, from and to: /nl",
        "i18n-ignore-redirect-source-locale get redirected to the new page, from and to: /sv",
        "i18n-ignore-redirect-source-locale get redirected to the new page, from:  to: /",
        "i18n-ignore-redirect-source-locale get redirected to the new page, from:  to: en",
        "i18n-ignore-redirect-source-locale get redirected to the new page, from:  to: sv",
        "i18n-ignore-redirect-source-locale get redirected to the new page, from: /en to: /",
        "i18n-ignore-redirect-source-locale get redirected to the new page, from: /en to: en",
        "i18n-ignore-redirect-source-locale get redirected to the new page, from: /en to: sv",
        "i18n-ignore-redirect-source-locale get redirected to the new page, from: /nl to: /",
        "i18n-ignore-redirect-source-locale get redirected to the new page, from: /nl to: en",
        "i18n-ignore-redirect-source-locale get redirected to the new page, from: /nl to: sv",
        "i18n-ignore-redirect-source-locale get redirected to the new page, from: /sv to: /",
        "i18n-ignore-redirect-source-locale get redirected to the new page, from: /sv to: en",
        "i18n-ignore-redirect-source-locale get redirected to the new page, from: /sv to: sv"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/i18n-ignore-rewrite-source-locale/rewrites-with-basepath.test.ts": {
      "passed": [
        "i18n-ignore-rewrite-source-locale with basepath call api by skipping locale in rewrite, locale: ",
        "i18n-ignore-rewrite-source-locale with basepath call api by skipping locale in rewrite, locale: /en",
        "i18n-ignore-rewrite-source-locale with basepath call api by skipping locale in rewrite, locale: /nl",
        "i18n-ignore-rewrite-source-locale with basepath call api by skipping locale in rewrite, locale: /sv",
        "i18n-ignore-rewrite-source-locale with basepath get public file by skipping locale in rewrite, locale: ",
        "i18n-ignore-rewrite-source-locale with basepath get public file by skipping locale in rewrite, locale: /en",
        "i18n-ignore-rewrite-source-locale with basepath get public file by skipping locale in rewrite, locale: /nl",
        "i18n-ignore-rewrite-source-locale with basepath get public file by skipping locale in rewrite, locale: /sv"
      ],
      "failed": [],
      "pending": [
        "i18n-ignore-rewrite-source-locale with basepath get _next/static/ files by skipping locale in rewrite, locale: ",
        "i18n-ignore-rewrite-source-locale with basepath get _next/static/ files by skipping locale in rewrite, locale: /en",
        "i18n-ignore-rewrite-source-locale with basepath get _next/static/ files by skipping locale in rewrite, locale: /nl",
        "i18n-ignore-rewrite-source-locale with basepath get _next/static/ files by skipping locale in rewrite, locale: /sv"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/i18n-ignore-rewrite-source-locale/rewrites.test.ts": {
      "passed": [
        "i18n-ignore-rewrite-source-locale call api by skipping locale in rewrite, locale: ",
        "i18n-ignore-rewrite-source-locale call api by skipping locale in rewrite, locale: /en",
        "i18n-ignore-rewrite-source-locale call api by skipping locale in rewrite, locale: /nl",
        "i18n-ignore-rewrite-source-locale call api by skipping locale in rewrite, locale: /sv",
        "i18n-ignore-rewrite-source-locale get public file by skipping locale in rewrite, locale: ",
        "i18n-ignore-rewrite-source-locale get public file by skipping locale in rewrite, locale: /en",
        "i18n-ignore-rewrite-source-locale get public file by skipping locale in rewrite, locale: /nl",
        "i18n-ignore-rewrite-source-locale get public file by skipping locale in rewrite, locale: /sv"
      ],
      "failed": [],
      "pending": [
        "i18n-ignore-rewrite-source-locale get _next/static/ files by skipping locale in rewrite, locale: ",
        "i18n-ignore-rewrite-source-locale get _next/static/ files by skipping locale in rewrite, locale: /en",
        "i18n-ignore-rewrite-source-locale get _next/static/ files by skipping locale in rewrite, locale: /nl",
        "i18n-ignore-rewrite-source-locale get _next/static/ files by skipping locale in rewrite, locale: /sv"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/i18n-preferred-locale-detection/i18n-preferred-locale-detection.test.ts": {
      "passed": [
        "i18-preferred-locale-redirect should request a path prefixed with my preferred detected locale when accessing index",
        "i18-preferred-locale-redirect should request a path prefixed with my preferred detected locale when clicking link to index from a locale-prefixed path"
      ],
      "failed": [
        "i18-preferred-locale-redirect should not request a path prefixed with my preferred detected locale when clicking link to index from a non-locale-prefixed path"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/ignore-invalid-popstateevent/with-i18n.test.ts": {
      "passed": [],
      "failed": [
        "i18n: Event with stale state - static route previously was dynamic Don't ignore event with different locale",
        "i18n: Event with stale state - static route previously was dynamic Ignore event with query param",
        "i18n: Event with stale state - static route previously was dynamic Ignore event without query param"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/ignore-invalid-popstateevent/without-i18n.test.ts": {
      "passed": [],
      "failed": [
        "Event with stale state - static route previously was dynamic Ignore event with query param",
        "Event with stale state - static route previously was dynamic Ignore event without query param"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/instrumentation-hook-src/instrumentation-hook-src.test.ts": {
      "passed": [
        "instrumentation-hook-rsc instrumentation should not overlap with a instrumentation page",
        "instrumentation-hook-rsc instrumentation should run the edge instrumentation compiled version with the edge runtime",
        "instrumentation-hook-rsc instrumentation should run the instrumentation hook"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/instrumentation-hook/instrumentation-hook.test.ts": {
      "passed": [
        "Instrumentation Hook general should not overlap with a instrumentation page",
        "Instrumentation Hook with-async-edge-page with-async-edge-page should run the instrumentation hook",
        "Instrumentation Hook with-async-node-page with-async-node-page should run the instrumentation hook",
        "Instrumentation Hook with-edge-api with-edge-api should run the instrumentation hook",
        "Instrumentation Hook with-edge-page with-edge-page should run the instrumentation hook",
        "Instrumentation Hook with-middleware with-middleware should run the instrumentation hook",
        "Instrumentation Hook with-node-api with-node-api should run the instrumentation hook",
        "Instrumentation Hook with-node-page with-node-page should run the instrumentation hook"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/link-with-api-rewrite/index.test.ts": {
      "passed": [
        "link-with-api-rewrite should perform hard navigation for direct urls",
        "link-with-api-rewrite should perform hard navigation for rewritten urls"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/manual-client-base-path/index.test.ts": {
      "passed": [
        "manual-client-base-path should not update with basePath on mount /another",
        "manual-client-base-path should not warn for flag in output"
      ],
      "failed": [
        "manual-client-base-path should navigate correctly from another",
        "manual-client-base-path should navigate correctly from index",
        "manual-client-base-path should not update with basePath on mount /",
        "manual-client-base-path should not update with basePath on mount /dynamic/first",
        "manual-client-base-path should not update with basePath on mount /dynamic/second"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/middleware-base-path/test/index.test.ts": {
      "passed": ["Middleware base tests should execute from absolute paths"],
      "failed": [
        "Middleware base tests router.query must exist when Link clicked page routing"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/middleware-custom-matchers-basepath/test/index.test.ts": {
      "passed": ["Middleware custom matchers basePath should not match"],
      "failed": [
        "Middleware custom matchers basePath should match",
        "Middleware custom matchers basePath should match has query on client routing"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/middleware-custom-matchers-i18n/test/index.test.ts": {
      "passed": [
        "Middleware custom matchers i18n should not match",
        "Middleware custom matchers with root should not match"
      ],
      "failed": [
        "Middleware custom matchers i18n should match",
        "Middleware custom matchers i18n should match has query on client routing"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/middleware-custom-matchers/test/index.test.ts": {
      "passed": [
        "Middleware custom matchers should match missing header correctly",
        "Middleware custom matchers should match missing query correctly"
      ],
      "failed": [
        "Middleware custom matchers should match has cookie",
        "Middleware custom matchers should match has cookie on client routing",
        "Middleware custom matchers should match has header",
        "Middleware custom matchers should match has header value",
        "Middleware custom matchers should match has host",
        "Middleware custom matchers should match has query",
        "Middleware custom matchers should match has query on client routing",
        "Middleware custom matchers should match source path"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/middleware-dynamic-basepath-matcher/test/index.test.ts": {
      "passed": [
        "Middleware custom matchers basePath should match",
        "Middleware custom matchers basePath should not match"
      ],
      "failed": ["Middleware custom matchers basePath should match query path"],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/middleware-fetches-with-any-http-method/index.test.ts": {
      "passed": [
        "Middleware fetches with any HTTP method passes the method on a direct fetch request",
        "Middleware fetches with any HTTP method passes the method when providing a Request object"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/middleware-fetches-with-body/index.test.ts": {
      "passed": [
        "Middleware fetches with body should return 413 for body equal to 10mb",
        "Middleware fetches with body with bodyParser = false should be able to send and return with body greater than 16KiB",
        "Middleware fetches with body with bodyParser = false should be able to send and return with body size equal to 16KiB",
        "Middleware fetches with body with custom bodyParser sizeLimit (5kb) should be able to send and return body size equal to 5kb",
        "Middleware fetches with body with custom bodyParser sizeLimit (5kb) should return 413 for body greater than 5kb",
        "Middleware fetches with body with custom bodyParser sizeLimit (5mb) should be able to send and return body size equal to 5mb",
        "Middleware fetches with body with custom bodyParser sizeLimit (5mb) should return 413 for body greater than 5mb",
        "Middleware fetches with body with default bodyParser sizeLimit (1mb) should be able to send and return body greater than default highWaterMark (16KiB)",
        "Middleware fetches with body with default bodyParser sizeLimit (1mb) should be able to send and return body size equal to 1mb",
        "Middleware fetches with body with default bodyParser sizeLimit (1mb) should return 413 for body greater than 1mb"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/middleware-general/test/index.test.ts": {
      "passed": [
        "Middleware Runtime with i18n allows to access env variables",
        "Middleware Runtime with i18n passes search params with rewrites",
        "Middleware Runtime with i18n should accept a URL instance for fetch",
        "Middleware Runtime with i18n should add a rewrite header on data requests for rewrites",
        "Middleware Runtime with i18n should allow to abort a fetch request",
        "Middleware Runtime with i18n should be able to rewrite on _next/static/chunks/pages/ 404",
        "Middleware Runtime with i18n should contain `globalThis`",
        "Middleware Runtime with i18n should contain crypto APIs",
        "Middleware Runtime with i18n should have init header for NextResponse.redirect",
        "Middleware Runtime with i18n should keep non data requests in their original shape",
        "Middleware Runtime with i18n should normalize data requests into page requests",
        "Middleware Runtime with i18n should not run middleware for on-demand revalidate",
        "Middleware Runtime with i18n should respond with 400 on decode failure",
        "Middleware Runtime with i18n should set fetch user agent correctly",
        "Middleware Runtime with i18n should throw when using NextRequest with a relative URL",
        "Middleware Runtime with i18n should throw when using NextResponse.rewrite with a relative URL",
        "Middleware Runtime with i18n should throw when using Request with a relative URL",
        "Middleware Runtime with i18n should throw when using URL with a relative URL",
        "Middleware Runtime with i18n should trigger middleware for data requests",
        "Middleware Runtime with i18n should validate & parse request url from a dynamic route with params",
        "Middleware Runtime with i18n should validate & parse request url from a dynamic route with params and no query",
        "Middleware Runtime with i18n should validate & parse request url from a dynamic route with params and query",
        "Middleware Runtime with i18n should validate & parse request url from any route",
        "Middleware Runtime with i18n should warn when using NextResponse.redirect with a relative URL",
        "Middleware Runtime with i18n should warn when using Response.redirect with a relative URL",
        "Middleware Runtime with i18n should work with notFound: true correctly",
        "Middleware Runtime without i18n allows to access env variables",
        "Middleware Runtime without i18n hard-navigates when the data request failed",
        "Middleware Runtime without i18n passes search params with rewrites",
        "Middleware Runtime without i18n should accept a URL instance for fetch",
        "Middleware Runtime without i18n should add a rewrite header on data requests for rewrites",
        "Middleware Runtime without i18n should allow to abort a fetch request",
        "Middleware Runtime without i18n should be able to rewrite on _next/static/chunks/pages/ 404",
        "Middleware Runtime without i18n should contain `globalThis`",
        "Middleware Runtime without i18n should contain crypto APIs",
        "Middleware Runtime without i18n should have correct dynamic route params for middleware rewrite to dynamic route",
        "Middleware Runtime without i18n should have correct dynamic route params on client-transition to dynamic route",
        "Middleware Runtime without i18n should have correct route params for chained rewrite from middleware to config rewrite",
        "Middleware Runtime without i18n should have correct route params for rewrite from config dynamic route",
        "Middleware Runtime without i18n should have correct route params for rewrite from config non-dynamic route",
        "Middleware Runtime without i18n should have init header for NextResponse.redirect",
        "Middleware Runtime without i18n should keep non data requests in their original shape",
        "Middleware Runtime without i18n should normalize data requests into page requests",
        "Middleware Runtime without i18n should not run middleware for on-demand revalidate",
        "Middleware Runtime without i18n should redirect the same for direct visit and client-transition",
        "Middleware Runtime without i18n should respond with 400 on decode failure",
        "Middleware Runtime without i18n should rewrite correctly for non-SSG/SSP page",
        "Middleware Runtime without i18n should set fetch user agent correctly",
        "Middleware Runtime without i18n should throw when using NextRequest with a relative URL",
        "Middleware Runtime without i18n should throw when using NextResponse.rewrite with a relative URL",
        "Middleware Runtime without i18n should throw when using Request with a relative URL",
        "Middleware Runtime without i18n should throw when using URL with a relative URL",
        "Middleware Runtime without i18n should trigger middleware for data requests",
        "Middleware Runtime without i18n should validate & parse request url from a dynamic route with params and query",
        "Middleware Runtime without i18n should validate & parse request url from any route",
        "Middleware Runtime without i18n should warn when using NextResponse.redirect with a relative URL",
        "Middleware Runtime without i18n should warn when using Response.redirect with a relative URL",
        "Middleware Runtime without i18n should work with notFound: true correctly"
      ],
      "failed": [
        "Middleware Runtime with i18n allows shallow linking with middleware",
        "Middleware Runtime with i18n hard-navigates when the data request failed",
        "Middleware Runtime with i18n should have correct dynamic route params for middleware rewrite to dynamic route",
        "Middleware Runtime with i18n should have correct dynamic route params on client-transition to dynamic route",
        "Middleware Runtime with i18n should have correct files in manifest",
        "Middleware Runtime with i18n should have correct query values for rewrite to ssg page",
        "Middleware Runtime with i18n should have correct route params for chained rewrite from middleware to config rewrite",
        "Middleware Runtime with i18n should have correct route params for rewrite from config dynamic route",
        "Middleware Runtime with i18n should have correct route params for rewrite from config non-dynamic route",
        "Middleware Runtime with i18n should have the custom config in the manifest",
        "Middleware Runtime with i18n should have valid middleware field in manifest",
        "Middleware Runtime with i18n should redirect the same for direct visit and client-transition",
        "Middleware Runtime with i18n should rewrite correctly for non-SSG/SSP page",
        "Middleware Runtime with i18n should rewrite the same for direct visit and client-transition",
        "Middleware Runtime without i18n allows shallow linking with middleware",
        "Middleware Runtime without i18n should have correct files in manifest",
        "Middleware Runtime without i18n should have correct query values for rewrite to ssg page",
        "Middleware Runtime without i18n should have the custom config in the manifest",
        "Middleware Runtime without i18n should have valid middleware field in manifest",
        "Middleware Runtime without i18n should rewrite the same for direct visit and client-transition"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/middleware-matcher/index.test.ts": {
      "passed": [
        "Middleware can set the matcher in its config adds the header for a matched data path (with header)",
        "Middleware can set the matcher in its config adds the header for a matched data path (without header)",
        "Middleware can set the matcher in its config adds the header for a matched path",
        "Middleware can set the matcher in its config adds the header for another matched data path",
        "Middleware can set the matcher in its config adds the header for another matched path",
        "Middleware can set the matcher in its config does add the header for root data request",
        "Middleware can set the matcher in its config does add the header for root request",
        "Middleware can set the matcher in its config should navigate correctly with matchers",
        "using a single matcher adds the header for a matched data path (without header)",
        "using a single matcher adds the header for a matched path",
        "using a single matcher adds the headers for a matched data path (with header)",
        "using a single matcher does not add the header for an unmatched path",
        "using a single matcher does not add the header for root data request",
        "using a single matcher does not add the header for root request",
        "using a single matcher with i18n and basePath and trailingSlash does not add the header for an unmatched path",
        "using a single matcher with i18n and basePath does not add the header for an unmatched path",
        "using a single matcher with i18n and trailingSlash does not add the header for an unmatched path",
        "using a single matcher with i18n does not add the header for an unmatched path",
        "using root matcher adds the header for a matched data path (with header)",
        "using root matcher adds the header for a matched data path (without header)",
        "using root matcher adds the header to the /"
      ],
      "failed": [
        "Middleware can set the matcher in its config should load matches in client matchers correctly",
        "using a single matcher with i18n adds the header for a matched path",
        "using a single matcher with i18n adds the header for a mathed root path with /index",
        "using a single matcher with i18n adds the headers for a matched data path",
        "using a single matcher with i18n and basePath adds the header for a matched path",
        "using a single matcher with i18n and basePath adds the header for a mathed root path with /index",
        "using a single matcher with i18n and basePath adds the headers for a matched data path",
        "using a single matcher with i18n and basePath and trailingSlash adds the header for a matched path",
        "using a single matcher with i18n and basePath and trailingSlash adds the header for a mathed root path with /index",
        "using a single matcher with i18n and basePath and trailingSlash adds the headers for a matched data path",
        "using a single matcher with i18n and trailingSlash adds the header for a matched path",
        "using a single matcher with i18n and trailingSlash adds the header for a mathed root path with /index",
        "using a single matcher with i18n and trailingSlash adds the headers for a matched data path",
        "using root matcher adds the header to the /index"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/middleware-redirects/test/index.test.ts": {
      "passed": [
        "Middleware Redirect /fr should redirect",
        "Middleware Redirect /fr should redirect (infinite-loop)",
        "Middleware Redirect /fr should redirect cleanly with the original url param",
        "Middleware Redirect /fr should redirect multiple times",
        "Middleware Redirect /fr should redirect to api route with locale",
        "Middleware Redirect /fr should redirect with a fragment",
        "Middleware Redirect does not include the locale in redirects by default",
        "Middleware Redirect should redirect",
        "Middleware Redirect should redirect (infinite-loop)",
        "Middleware Redirect should redirect cleanly with the original url param",
        "Middleware Redirect should redirect correctly with redirect in next.config.js",
        "Middleware Redirect should redirect multiple times",
        "Middleware Redirect should redirect to api route with locale",
        "Middleware Redirect should redirect to data urls with data requests and internal redirects",
        "Middleware Redirect should redirect to external urls with data requests and external redirects",
        "Middleware Redirect should redirect with a fragment"
      ],
      "failed": [
        "Middleware Redirect /fr should implement internal redirects",
        "Middleware Redirect should implement internal redirects"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/middleware-request-header-overrides/test/index.test.ts": {
      "passed": [
        "Middleware Request Headers Overrides Edge Functions Backend Adds new headers",
        "Middleware Request Headers Overrides Edge Functions Backend Deletes headers",
        "Middleware Request Headers Overrides Edge Functions Backend Updates headers",
        "Middleware Request Headers Overrides Serverless Functions Backend Adds new headers",
        "Middleware Request Headers Overrides Serverless Functions Backend Deletes headers",
        "Middleware Request Headers Overrides Serverless Functions Backend Updates headers",
        "Middleware Request Headers Overrides getServerSideProps Backend Adds new headers",
        "Middleware Request Headers Overrides getServerSideProps Backend Deletes headers",
        "Middleware Request Headers Overrides getServerSideProps Backend Updates headers"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/middleware-responses/test/index.test.ts": {
      "passed": [
        "Middleware Responses /fr responds with multiple cookies",
        "Middleware Responses /fr should not fail when returning a stream",
        "Middleware Responses /fr should not fail when returning a text body",
        "Middleware Responses /fr should respond appending headers headers",
        "Middleware Responses /fr should respond with a 401 status code",
        "Middleware Responses /fr should respond with one header",
        "Middleware Responses /fr should respond with two headers",
        "Middleware Responses responds with multiple cookies",
        "Middleware Responses should not fail when returning a stream",
        "Middleware Responses should not fail when returning a text body",
        "Middleware Responses should respond appending headers headers",
        "Middleware Responses should respond with a 401 status code",
        "Middleware Responses should respond with one header",
        "Middleware Responses should respond with two headers"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/middleware-rewrites/test/index.test.ts": {
      "passed": [
        "Middleware Rewrite /fr can rewrite from path with colon",
        "Middleware Rewrite /fr can rewrite from path with colon and retain query parameter",
        "Middleware Rewrite /fr can rewrite to path with colon",
        "Middleware Rewrite /fr can rewrite to path with colon and retain query parameter",
        "Middleware Rewrite /fr should add a cookie and rewrite to a/b test",
        "Middleware Rewrite /fr should clear query parameters",
        "Middleware Rewrite /fr should rewrite to Vercel",
        "Middleware Rewrite /fr should rewrite to about page",
        "Middleware Rewrite /fr should rewrite when not using localhost",
        "Middleware Rewrite /fr support colons in path",
        "Middleware Rewrite can rewrite from path with colon",
        "Middleware Rewrite can rewrite from path with colon and retain query parameter",
        "Middleware Rewrite can rewrite to path with colon",
        "Middleware Rewrite can rewrite to path with colon and retain query parameter",
        "Middleware Rewrite should add a cookie and rewrite to a/b test",
        "Middleware Rewrite should allow to rewrite keeping the locale in pathname",
        "Middleware Rewrite should allow to rewrite to a `afterFiles` rewrite config",
        "Middleware Rewrite should allow to rewrite to a `beforeFiles` rewrite config",
        "Middleware Rewrite should allow to rewrite to a different locale",
        "Middleware Rewrite should allow to switch locales",
        "Middleware Rewrite should behave consistently on recursive rewrites",
        "Middleware Rewrite should clear query parameters",
        "Middleware Rewrite should handle middleware rewrite with body correctly",
        "Middleware Rewrite should handle next.config.js rewrite with body correctly",
        "Middleware Rewrite should handle shallow navigation correctly (non-dynamic page)",
        "Middleware Rewrite should handle static dynamic rewrite from middleware correctly",
        "Middleware Rewrite should hard navigate on 404 for data request",
        "Middleware Rewrite should have props for afterFiles rewrite to SSG page",
        "Middleware Rewrite should not have un-necessary data request on rewrite",
        "Middleware Rewrite should not have unexpected errors",
        "Middleware Rewrite should not mix component cache when navigating between dynamic routes",
        "Middleware Rewrite should override with rewrite externally correctly",
        "Middleware Rewrite should override with rewrite internally correctly",
        "Middleware Rewrite should return HTML/data correctly for pre-rendered page",
        "Middleware Rewrite should rewrite correctly when navigating via history",
        "Middleware Rewrite should rewrite correctly when navigating via history after query update",
        "Middleware Rewrite should rewrite to Vercel",
        "Middleware Rewrite should rewrite to about page",
        "Middleware Rewrite should rewrite to data urls for incoming data request internally rewritten",
        "Middleware Rewrite should rewrite to the external url for incoming data request externally rewritten",
        "Middleware Rewrite should rewrite when not using localhost",
        "Middleware Rewrite support colons in path"
      ],
      "failed": [
        "Middleware Rewrite /fr should correctly rewriting to a different dynamic path",
        "Middleware Rewrite /fr should not call middleware with shallow push",
        "Middleware Rewrite /fr should rewrite without hard navigation",
        "Middleware Rewrite should allow to opt-out prefetch caching",
        "Middleware Rewrite should correctly rewriting to a different dynamic path",
        "Middleware Rewrite should handle catch-all rewrite correctly",
        "Middleware Rewrite should handle shallow navigation correctly (dynamic page)",
        "Middleware Rewrite should handle static rewrite from next.config.js correctly",
        "Middleware Rewrite should have correct query info for dynamic route after query hydration",
        "Middleware Rewrite should not call middleware with shallow push",
        "Middleware Rewrite should not prefetch non-SSG routes",
        "Middleware Rewrite should resolve dynamic route after rewrite correctly",
        "Middleware Rewrite should rewrite to fallback: true page successfully",
        "Middleware Rewrite should rewrite without hard navigation"
      ],
      "pending": [
        "Middleware Rewrite includes the locale in rewrites by default"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/middleware-shallow-link/index.test.ts": {
      "passed": [],
      "failed": ["browser-shallow-navigation should render the correct page"],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/middleware-trailing-slash/test/index.test.ts": {
      "passed": [
        "Middleware Runtime trailing slash should add a rewrite header on data requests for rewrites",
        "Middleware Runtime trailing slash should have correct dynamic route params for middleware rewrite to dynamic route",
        "Middleware Runtime trailing slash should have correct dynamic route params on client-transition to dynamic route",
        "Middleware Runtime trailing slash should have correct route params for chained rewrite from middleware to config rewrite",
        "Middleware Runtime trailing slash should have correct route params for rewrite from config dynamic route",
        "Middleware Runtime trailing slash should have correct route params for rewrite from config non-dynamic route",
        "Middleware Runtime trailing slash should have init header for NextResponse.redirect",
        "Middleware Runtime trailing slash should keep non data requests in their original shape",
        "Middleware Runtime trailing slash should normalize data requests into page requests",
        "Middleware Runtime trailing slash should not run middleware for on-demand revalidate",
        "Middleware Runtime trailing slash should redirect the same for direct visit and client-transition",
        "Middleware Runtime trailing slash should respond with 400 on decode failure",
        "Middleware Runtime trailing slash should rewrite correctly for non-SSG/SSP page",
        "Middleware Runtime trailing slash should trigger middleware for data requests",
        "Middleware Runtime trailing slash should validate & parse request url from any route",
        "Middleware Runtime trailing slash with .html extension should work using browser",
        "Middleware Runtime trailing slash with .html extension should work when navigating",
        "Middleware Runtime trailing slash with .html extension should work when requesting the page directly",
        "Middleware Runtime trailing slash without .html extension should work using browser",
        "Middleware Runtime trailing slash without .html extension should work when navigating",
        "Middleware Runtime trailing slash without .html extension should work when requesting the page directly"
      ],
      "failed": [
        "Middleware Runtime trailing slash allows shallow linking with middleware",
        "Middleware Runtime trailing slash should have correct files in manifest",
        "Middleware Runtime trailing slash should have correct query values for rewrite to ssg page",
        "Middleware Runtime trailing slash should have valid middleware field in manifest",
        "Middleware Runtime trailing slash should rewrite the same for direct visit and client-transition"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/module-layer/module-layer.test.ts": {
      "passed": [
        "module layer no server-only in server targets should log the build info properly",
        "module layer no server-only in server targets should render routes marked with restriction marks without errors /api/hello",
        "module layer no server-only in server targets should render routes marked with restriction marks without errors /api/hello-edge",
        "module layer no server-only in server targets should render routes marked with restriction marks without errors /api/mixed",
        "module layer no server-only in server targets should render routes marked with restriction marks without errors /app/client",
        "module layer no server-only in server targets should render routes marked with restriction marks without errors /app/client-edge",
        "module layer no server-only in server targets should render routes marked with restriction marks without errors /app/route",
        "module layer no server-only in server targets should render routes marked with restriction marks without errors /app/route-edge",
        "module layer no server-only in server targets should render routes marked with restriction marks without errors /app/server",
        "module layer no server-only in server targets should render routes marked with restriction marks without errors /app/server-edge",
        "module layer with server-only in server targets should log the build info properly",
        "module layer with server-only in server targets should render routes marked with restriction marks without errors /api/hello",
        "module layer with server-only in server targets should render routes marked with restriction marks without errors /api/hello-edge",
        "module layer with server-only in server targets should render routes marked with restriction marks without errors /api/mixed",
        "module layer with server-only in server targets should render routes marked with restriction marks without errors /app/client",
        "module layer with server-only in server targets should render routes marked with restriction marks without errors /app/client-edge",
        "module layer with server-only in server targets should render routes marked with restriction marks without errors /app/route",
        "module layer with server-only in server targets should render routes marked with restriction marks without errors /app/route-edge",
        "module layer with server-only in server targets should render routes marked with restriction marks without errors /app/server",
        "module layer with server-only in server targets should render routes marked with restriction marks without errors /app/server-edge"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/multi-zone/multi-zone.test.ts": {
      "passed": [
        "multi-zone should correctly respond for /",
        "multi-zone should correctly respond for /blog/post-1",
        "multi-zone should correctly respond for /guest",
        "multi-zone should correctly respond for /guest/another/post-1",
        "multi-zone should correctly respond for /guest/blog/post-1"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/new-link-behavior/child-a-tag-error.test.ts": {
      "passed": [
        "New Link Behavior with <a> child should throw error with <a> child"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/new-link-behavior/index.test.ts": {
      "passed": [
        "New Link Behavior should handle onclick",
        "New Link Behavior should handle preventdefault",
        "New Link Behavior should navigate to /about",
        "New Link Behavior should render link with <a>",
        "New Link Behavior should render link with classname",
        "New Link Behavior should render link with id",
        "New Link Behavior should render link with multiple children"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/new-link-behavior/material-ui.test.ts": {
      "passed": [
        "New Link Behavior with material-ui should render MuiLink with <a>"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/new-link-behavior/stitches.test.ts": {
      "passed": ["New Link Behavior with stitches should render <a>"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/new-link-behavior/typescript.test.ts": {
      "passed": [
        "New Link Behavior should apply ref on link",
        "New Link Behavior should render link with <a>"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/next-font/basepath.test.ts": {
      "passed": ["next/font/google basepath preload correct files"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/next-font/google-fetch-error.test.ts": {
      "passed": [],
      "failed": ["next/font/google fetch error should error when not in dev"],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/next-font/index.test.ts": {
      "passed": [
        "next/font app Fallback fontfaces google Fraunces",
        "next/font app Fallback fontfaces google Indie flower",
        "next/font app Fallback fontfaces local Fraunces",
        "next/font app Fallback fontfaces local Indie flower",
        "next/font app Fallback fontfaces local Roboto multiple weights and styles",
        "next/font app Fallback fontfaces local Roboto multiple weights and styles - variable 1",
        "next/font app Fallback fontfaces local Roboto multiple weights and styles - variable 2",
        "next/font app computed styles page using fallback fonts",
        "next/font app computed styles page using variables",
        "next/font app computed styles page with fonts",
        "next/font app import values Variable font without weight range",
        "next/font app import values page with font",
        "next/font app import values page with local fonts",
        "next/font app preload font without preloadable subsets",
        "next/font app preload font without size adjust",
        "next/font app preload google fonts with multiple weights/styles",
        "next/font app preload page with fonts",
        "next/font app preload page with local fonts",
        "next/font app preload page without fonts"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/next-font/with-font-declarations-file.test.ts": {
      "passed": [],
      "failed": [
        "next/font/google with-font-declarations-file preload correct files at /inter",
        "next/font/google with-font-declarations-file preload correct files at /local-font",
        "next/font/google with-font-declarations-file preload correct files at /roboto"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/next-font/with-proxy.test.ts": {
      "passed": [],
      "failed": [
        "next/font/google with proxy should use a proxy agent when proxy environment variable is set"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/next-font/without-preloaded-fonts.test.ts": {
      "passed": [
        "next/font/google no preloads with _app without fonts",
        "next/font/google no preloads with _app without preload",
        "next/font/google without-preloaded-fonts without _app without fonts",
        "next/font/google without-preloaded-fonts without _app without preload"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/next-head/index.test.ts": {
      "passed": [
        "next/head should have correct head tags after hydration",
        "next/head should have correct head tags from a fragment",
        "next/head should have correct head tags in initial document",
        "next/head should have current head tags from a _document getInitialProps",
        "next/head should place charset element at the top of <head>"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/next-image-forward-ref/index.test.ts": {
      "passed": [
        "next-image-forward-ref allows framer-motion to animate opacity"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/next-phase/index.test.ts": {
      "passed": ["next-phase should render page with next phase correctly"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/next-script/index.test.ts": {
      "passed": [
        "beforeInteractive in document Head Script is injected server-side",
        "beforeInteractive in document body Script is injected server-side"
      ],
      "failed": [],
      "pending": [
        "experimental.nextScriptWorkers experimental.nextScriptWorkers: false with no Partytown dependency Partytown snippet is not injected to head if not enabled in configuration",
        "experimental.nextScriptWorkers experimental.nextScriptWorkers: true with config override Partytown config script is overwritten",
        "experimental.nextScriptWorkers experimental.nextScriptWorkers: true with required Partytown dependency for external script Partytown snippets are injected to head if enabled in configuration",
        "experimental.nextScriptWorkers experimental.nextScriptWorkers: true with required Partytown dependency for external script Worker scripts are modified by Partytown to execute on a worker thread",
        "experimental.nextScriptWorkers experimental.nextScriptWorkers: true with required Partytown dependency for inline script Inline worker script through children is modified by Partytown to execute on a worker thread",
        "experimental.nextScriptWorkers experimental.nextScriptWorkers: true with required Partytown dependency for inline script Inline worker script through dangerouslySetInnerHtml is modified by Partytown to execute on a worker thread"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/no-eslint-warn-with-no-eslint-config/index.test.ts": {
      "passed": [
        "no-eslint-warn-with-no-eslint-config should not have eslint warnings when no eslint config",
        "no-eslint-warn-with-no-eslint-config should not warn with eslint config in package.json",
        "no-eslint-warn-with-no-eslint-config should render",
        "no-eslint-warn-with-no-eslint-config should warn with empty eslint config in package.json",
        "no-eslint-warn-with-no-eslint-config should warn with empty eslintrc"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/nonce-head-manager/index.test.ts": {
      "passed": [
        "nonce head manager should not re-execute the script when re-rendering",
        "nonce head manager should not re-execute the script when re-rendering with CSP header"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/og-api/index.test.ts": {
      "passed": [
        "og-api should respond from index",
        "og-api should work in app route",
        "og-api should work in app route in node runtime",
        "og-api should work in pages/api"
      ],
      "failed": ["og-api should copy files correctly"],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/opentelemetry/instrumentation-pages-app-only.test.ts": {
      "passed": [
        "instrumentation app should start and serve correctly",
        "instrumentation app src/ should start and serve correctly",
        "instrumentation pages should start and serve correctly",
        "instrumentation pages src/ should start and serve correctly"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/opentelemetry/opentelemetry.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "opentelemetry incoming context propagation app router should handle RSC with fetch",
        "opentelemetry incoming context propagation app router should handle RSC with fetch in RSC mode",
        "opentelemetry incoming context propagation app router should handle RSC with fetch on edge",
        "opentelemetry incoming context propagation app router should handle route handlers in app router",
        "opentelemetry incoming context propagation app router should handle route handlers in app router on edge",
        "opentelemetry incoming context propagation app router should trace middleware",
        "opentelemetry incoming context propagation pages should handle api routes in pages",
        "opentelemetry incoming context propagation pages should handle api routes in pages on edge",
        "opentelemetry incoming context propagation pages should handle getServerSideProps",
        "opentelemetry incoming context propagation pages should handle getServerSideProps on edge",
        "opentelemetry incoming context propagation pages should handle getStaticProps when fallback: 'blocking'",
        "opentelemetry root context app router should handle RSC with fetch",
        "opentelemetry root context app router should handle RSC with fetch in RSC mode",
        "opentelemetry root context app router should handle RSC with fetch on edge",
        "opentelemetry root context app router should handle route handlers in app router",
        "opentelemetry root context app router should handle route handlers in app router on edge",
        "opentelemetry root context app router should trace middleware",
        "opentelemetry root context pages should handle api routes in pages",
        "opentelemetry root context pages should handle api routes in pages on edge",
        "opentelemetry root context pages should handle getServerSideProps",
        "opentelemetry root context pages should handle getServerSideProps on edge",
        "opentelemetry root context pages should handle getStaticProps when fallback: 'blocking'",
        "opentelemetry with disabled fetch tracing root context app router with disabled fetch should handle RSC with disabled fetch"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/optimized-loading/test/index.test.ts": {
      "passed": [
        "Optimized loading page / should load scripts with defer in head",
        "Optimized loading page / should not have JS preload links",
        "Optimized loading page / should render the page /",
        "Optimized loading page /page1 should load scripts with defer in head",
        "Optimized loading page /page1 should not have JS preload links",
        "Optimized loading page /page1 should render the page /page1"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/pages-performance-mark/index.test.ts": {
      "passed": [
        "pages performance mark should render the page correctly without crashing with performance mark"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/postcss-config-cjs/index.test.ts": {
      "passed": ["postcss-config-cjs works with postcss.config.cjs files"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/prerender-crawler.test.ts": {
      "passed": [
        "Prerender crawler handling should block for crawler correctly",
        "Prerender crawler handling should return fallback for non-crawler correctly",
        "Prerender crawler handling should return prerendered page for correctly"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/prerender-native-module.test.ts": {
      "passed": [
        "prerender native module should render /blog/first correctly",
        "prerender native module should render index correctly"
      ],
      "failed": [
        "prerender native module should output traces",
        "prerender native module should render /blog/second correctly"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/prerender.test.ts": {
      "passed": [
        "Prerender outputs a prerender-manifest correctly",
        "Prerender outputs dataRoutes in routes-manifest correctly",
        "Prerender outputs prerendered files correctly",
        "Prerender should 404 for a missing catchall explicit route",
        "Prerender should 404 for an invalid data url",
        "Prerender should SSR blocking path correctly (blocking)",
        "Prerender should SSR blocking path correctly (pre-rendered)",
        "Prerender should SSR catch-all page with brackets in param as object",
        "Prerender should SSR catch-all page with brackets in param as string",
        "Prerender should SSR dynamic page with brackets in param as object",
        "Prerender should SSR dynamic page with brackets in param as string",
        "Prerender should SSR incremental page correctly",
        "Prerender should SSR normal page correctly",
        "Prerender should allow rewriting to SSG page with fallback: 'blocking'",
        "Prerender should allow rewriting to SSG page with fallback: false",
        "Prerender should automatically reset cache TTL when an error occurs and build cache was available",
        "Prerender should automatically reset cache TTL when an error occurs and runtime cache was available",
        "Prerender should handle de-duping correctly",
        "Prerender should handle fallback only page correctly data",
        "Prerender should handle on-demand revalidate for fallback: blocking",
        "Prerender should handle on-demand revalidate for fallback: false",
        "Prerender should handle revalidating HTML correctly",
        "Prerender should handle revalidating HTML correctly with blocking",
        "Prerender should handle revalidating HTML correctly with blocking and seed",
        "Prerender should handle revalidating JSON correctly",
        "Prerender should handle revalidating JSON correctly with blocking",
        "Prerender should handle revalidating JSON correctly with blocking and seed",
        "Prerender should have gsp in __NEXT_DATA__",
        "Prerender should navigate to a normal page and back",
        "Prerender should navigate to catch-all page with brackets in param as object",
        "Prerender should navigate to catch-all page with brackets in param as string",
        "Prerender should navigate to dynamic page with brackets in param as object",
        "Prerender should navigate to dynamic page with brackets in param as string",
        "Prerender should not error when flushing cache files",
        "Prerender should not fail to update incremental cache",
        "Prerender should not fetch prerender data on mount",
        "Prerender should not have attempted sending invalid payload",
        "Prerender should not have experimental undici warning",
        "Prerender should not have gsp in __NEXT_DATA__ for non-GSP page",
        "Prerender should not on-demand revalidate for fallback: blocking with onlyGenerated if not generated",
        "Prerender should not return data for fallback: false and missing dynamic page",
        "Prerender should not revalidate when set to false",
        "Prerender should not revalidate when set to false in blocking fallback mode",
        "Prerender should not show error for invalid JSON returned from getStaticProps on CST",
        "Prerender should not supply query values to params in /_next/data request",
        "Prerender should not supply query values to params or useRouter dynamic page SSR",
        "Prerender should not supply query values to params or useRouter non-dynamic page SSR",
        "Prerender should not throw error for on-demand revalidate for SSR path",
        "Prerender should of formatted build output correctly",
        "Prerender should on-demand revalidate for fallback: blocking with onlyGenerated if generated",
        "Prerender should on-demand revalidate for revalidate: false",
        "Prerender should on-demand revalidate that returns notFound: true",
        "Prerender should only show warning once per page when large amount of page data is returned",
        "Prerender should reload page on failed data request",
        "Prerender should respond for catch-all deep folder",
        "Prerender should respond with 405 for POST to static page",
        "Prerender should return data correctly",
        "Prerender should return data correctly for SSG pages that starts with api-docs",
        "Prerender should return data correctly for dynamic page",
        "Prerender should return data correctly for dynamic page (non-seeded)",
        "Prerender should revalidate on-demand revalidate with preview cookie",
        "Prerender should server prerendered path correctly for SSG pages that starts with api-docs",
        "Prerender should show warning when large amount of page data is returned",
        "Prerender should support prerendered catchall route",
        "Prerender should support prerendered catchall-explicit route (nested)",
        "Prerender should support prerendered catchall-explicit route (single)",
        "Prerender should use correct caching headers for a no-revalidate page",
        "Prerender should use correct caching headers for a revalidate page"
      ],
      "failed": [
        "Prerender should fetch /_next/data correctly with mismatched href and as",
        "Prerender should handle fallback only page correctly HTML",
        "Prerender should navigate between pages successfully",
        "Prerender should not error when rewriting to fallback dynamic SSG page",
        "Prerender should not show error for invalid JSON returned from getStaticProps on SSR",
        "Prerender should output traces",
        "Prerender should parse query values on mount correctly",
        "Prerender should render correctly for SSG pages that starts with api-docs",
        "Prerender should support lazy catchall route",
        "Prerender should support nested lazy catchall route"
      ],
      "pending": [
        "Prerender should reload page on failed data request, and retry"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/proxy-request-with-middleware/test/index.test.ts": {
      "passed": [
        "Requests not effected when middleware used should proxy GET request ",
        "Requests not effected when middleware used should proxy POST request with body"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/react-dnd-compile/react-dnd-compile.test.ts": {
      "passed": [
        "react-dnd-compile should work",
        "react-dnd-compile should work on react-dnd import page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/reload-scroll-backforward-restoration/index.test.ts": {
      "passed": [],
      "failed": [
        "reload-scroll-back-restoration should restore the scroll position on navigating back",
        "reload-scroll-back-restoration should restore the scroll position on navigating forward"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/repeated-forward-slashes-error/repeated-forward-slashes-error.test.ts": {
      "passed": [
        "repeated-forward-slashes-error should log error when href has repeated forward-slashes"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/skip-trailing-slash-redirect/index.test.ts": {
      "passed": [
        "skip-trailing-slash-redirect app dir - skip trailing slash redirect should navigate client side correctly",
        "skip-trailing-slash-redirect app dir - skip trailing slash redirect should not apply trailing slash redirect (with slash)",
        "skip-trailing-slash-redirect app dir - skip trailing slash redirect should not apply trailing slash redirect (without slash)",
        "skip-trailing-slash-redirect app dir - skip trailing slash redirect should preserve original trailing slashes to links on client",
        "skip-trailing-slash-redirect app dir - skip trailing slash redirect should respond to dynamic route correctly",
        "skip-trailing-slash-redirect app dir - skip trailing slash redirect should respond to index correctly",
        "skip-trailing-slash-redirect pages dir should not apply trailing slash redirect (with slash)",
        "skip-trailing-slash-redirect pages dir should not apply trailing slash redirect (without slash)",
        "skip-trailing-slash-redirect pages dir should respond to dynamic route correctly",
        "skip-trailing-slash-redirect pages dir should respond to index correctly",
        "skip-trailing-slash-redirect should allow response body from middleware with flag",
        "skip-trailing-slash-redirect should allow rewriting invalid buildId correctly",
        "skip-trailing-slash-redirect should apply config redirect correctly",
        "skip-trailing-slash-redirect should apply config rewrites correctly",
        "skip-trailing-slash-redirect should be able to redirect locale casing $1",
        "skip-trailing-slash-redirect should correct skip URL normalizing in middleware",
        "skip-trailing-slash-redirect should handle external rewrite correctly /chained-rewrite-ssg",
        "skip-trailing-slash-redirect should handle external rewrite correctly /chained-rewrite-ssr",
        "skip-trailing-slash-redirect should handle external rewrite correctly /chained-rewrite-static",
        "skip-trailing-slash-redirect should handle external rewrite correctly /docs-auto-static/first",
        "skip-trailing-slash-redirect should handle external rewrite correctly /docs-ssr/first",
        "skip-trailing-slash-redirect should handle external rewrite correctly /docs/first",
        "skip-trailing-slash-redirect should merge cookies from middleware and API routes correctly",
        "skip-trailing-slash-redirect should merge cookies from middleware and edge API routes correctly",
        "skip-trailing-slash-redirect should not apply trailing slash on load on client",
        "skip-trailing-slash-redirect should not have trailing slash redirects in manifest",
        "skip-trailing-slash-redirect should parse locale info for data request correctly",
        "skip-trailing-slash-redirect should provide original _next/data URL with skipMiddlewareUrlNormalize"
      ],
      "failed": [
        "skip-trailing-slash-redirect pages dir should navigate client side correctly",
        "skip-trailing-slash-redirect pages dir should preserve original trailing slashes to links on client"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/socket-io/index.test.js": {
      "passed": [
        "socket-io should support socket.io without falling back to polling"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/ssr-react-context/index.test.ts": {
      "passed": [
        "React Context should render a page with context",
        "React Context should render correctly with context consumer"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/streaming-ssr/index.test.ts": {
      "passed": [
        "react 18 streaming SSR in minimal mode with node runtime should generate html response by streaming correctly",
        "react 18 streaming SSR in minimal mode with node runtime should have generated a static 404 page",
        "streaming SSR with custom next configs should match more specific route along with dynamic routes",
        "streaming SSR with custom next configs should redirect paths without trailing-slash and render when slash is appended",
        "streaming SSR with custom next configs should render multi-byte characters correctly in streaming",
        "streaming SSR with custom next configs should render next/router correctly in edge runtime",
        "streaming SSR with custom next configs should render styled-jsx styles in streaming",
        "streaming SSR with custom server should render page correctly under custom server"
      ],
      "failed": [
        "react 18 streaming SSR in minimal mode with node runtime should pass correct nextRuntime values"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/styled-jsx/index.test.ts": {
      "passed": [
        "styled-jsx should contain styled-jsx styles during SSR",
        "styled-jsx should render styles during CSR",
        "styled-jsx should render styles during CSR (AMP)",
        "styled-jsx should render styles during SSR (AMP)"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/swc-warnings/index.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "can force swc should not have warning",
        "swc warnings by default should have warning"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/switchable-runtime/index.test.ts": {
      "passed": [
        "Switchable runtime Switchable runtime (prod) should build /api/hello and /api/edge as an api route with edge runtime",
        "Switchable runtime Switchable runtime (prod) should build /app-valid-runtime as a dynamic page with the edge runtime",
        "Switchable runtime Switchable runtime (prod) should build /edge as a dynamic page with the edge runtime",
        "Switchable runtime Switchable runtime (prod) should build /node-ssr as a dynamic page with the nodejs runtime",
        "Switchable runtime Switchable runtime (prod) should build /static as a static page with the nodejs runtime",
        "Switchable runtime Switchable runtime (prod) should support etag header in the web server"
      ],
      "failed": [],
      "pending": [
        "Switchable runtime Switchable runtime (prod) should build /edge-rsc as a dynamic page with the edge runtime",
        "Switchable runtime Switchable runtime (prod) should build /node as a static page with the nodejs runtime",
        "Switchable runtime Switchable runtime (prod) should build /node-rsc as a static page with the nodejs runtime",
        "Switchable runtime Switchable runtime (prod) should build /node-rsc-isr as an isr page with the nodejs runtime",
        "Switchable runtime Switchable runtime (prod) should build /node-rsc-ssg as a static page with the nodejs runtime",
        "Switchable runtime Switchable runtime (prod) should build /node-rsc-ssr as a dynamic page with the nodejs runtime",
        "Switchable runtime Switchable runtime (prod) should build /node-ssg as a static page with the nodejs runtime",
        "Switchable runtime Switchable runtime (prod) should display correct tree view with page types in terminal",
        "Switchable runtime Switchable runtime (prod) should prefetch data for static pages",
        "Switchable runtime Switchable runtime (prod) should support client side navigation to ssg rsc pages",
        "Switchable runtime Switchable runtime (prod) should support client side navigation to ssr rsc pages",
        "Switchable runtime Switchable runtime (prod) should support client side navigation to static rsc pages"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/test-template/{{ toFileName name }}/{{ toFileName name }}.test.ts": {
      "passed": [
        "{{name}} should work using browser",
        "{{name}} should work using cheerio",
        "{{name}} should work with fetch",
        "{{name}} should work with html"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/test-utils-tests/basic/basic.test.ts": {
      "passed": ["nextTestSetup should work"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/testmode/testmode.test.ts": {
      "passed": [
        "testmode app router should avoid fetch cache",
        "testmode app router should fetch real data when Next-Test-* headers are not present",
        "testmode app router should handle API with fetch in edge function",
        "testmode app router should handle API with fetch in serverless function",
        "testmode app router should handle API with http.get in serverless function",
        "testmode app router should handle RSC with fetch in edge function",
        "testmode app router should handle RSC with fetch in serverless function",
        "testmode app router should handle RSC with http.get in serverless function",
        "testmode middleware should intercept fetchs in middleware",
        "testmode page router should handle API with fetch",
        "testmode page router should handle API with http.get",
        "testmode page router should handle getServerSideProps with fetch",
        "testmode page router should handle getServerSideProps with http.get",
        "testmode rewrites should handle rewrites"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/third-parties/index.test.ts": {
      "passed": [
        "@next/third-parties basic usage renders GA",
        "@next/third-parties basic usage renders GTM",
        "@next/third-parties basic usage renders GoogleMapsEmbed",
        "@next/third-parties basic usage renders YoutubeEmbed"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/trailingslash-with-rewrite/index.test.ts": {
      "passed": [
        "trailingSlash:true with rewrites and getStaticProps should work"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/transpile-packages/index.test.ts": {
      "passed": [],
      "failed": [
        "transpile packages css should handle css modules imports inside transpiled modules",
        "transpile packages css should handle global css imports inside transpiled modules",
        "transpile packages css should handle global scss imports inside transpiled modules",
        "transpile packages css should handle scss modules imports inside transpiled modules",
        "transpile packages optional deps should hide dynammic module dependency errors from node_modules",
        "transpile packages optional deps should not throw an error when optional deps are not installed"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": true
    },
    "test/e2e/type-module-interop/index.test.ts": {
      "passed": [
        "Type module interop should render client-side",
        "Type module interop should render client-side with modules",
        "Type module interop should render server-side",
        "Type module interop should render server-side with modules"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/typescript-version-no-warning/typescript-version-no-warning.test.ts": {
      "passed": [
        "typescript-version-no-warning should not print warning when new typescript version is used with next build"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/typescript-version-warning/typescript-version-warning.test.ts": {
      "passed": [
        "typescript-version-warning should print warning when old typescript version is used with next build"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/undici-fetch/index.test.ts": {
      "passed": [
        "undici fetch undici global Headers should return true when undici is used",
        "undici fetch undici global Request should return true when undici is used",
        "undici fetch undici global Response should return true when undici is used",
        "undici fetch undici global fetch should return true when undici is used"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/useselectedlayoutsegment-s-in-pages-router/useselectedlayoutsegment-s-in-pages-router.test.ts": {
      "passed": [
        "useSelectedLayoutSegment(s) in Pages Router Should render with `useSelectedLayoutSegment(s) hooks"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/yarn-pnp/test/with-eslint.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "yarn PnP should compile and serve the index page correctly with-eslint"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/yarn-pnp/test/with-mdx.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "yarn PnP should compile and serve the index page correctly with-mdx"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/e2e/yarn-pnp/test/with-next-sass.test.ts": {
      "passed": [],
      "failed": [],
      "pending": [
        "yarn PnP should compile and serve the index page correctly with-next-sass"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/app-dir-edge-runtime-with-wasm/index.test.ts": {
      "passed": ["app-dir edge runtime with wasm should have built"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/app-dir-hide-suppressed-error-during-next-export/index.test.ts": {
      "passed": [
        "app-dir-hide-suppressed-error-during-next-export should not log suppressed error when exporting static page"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/app-dir-prefetch-non-iso-url/index.test.ts": {
      "passed": [
        "app-dir-prefetch-non-iso-url should go to iso url",
        "app-dir-prefetch-non-iso-url should go to non-iso url"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/app-dir-prevent-304-caching/index.test.ts": {
      "passed": ["app-dir-prevent-304-caching should not cache 304 status"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/app-dir/app-fetch-build-cache/app-fetch-build-cache.test.ts": {
      "passed": [
        "app fetch build cache should have done initial build",
        "app fetch build cache should not use stale data if present"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/app-dir/app-only-flag/app-only-flag.test.ts": {
      "passed": ["app-only-flag should serve app route"],
      "failed": ["app-only-flag should not serve about route"],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/app-dir/build-output/index.test.ts": {
      "passed": [
        "production - app dir - build output should always log version first then the rest jobs",
        "production - app dir - build output should match the expected output format",
        "production - app dir - build output should only log app routes"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/app-dir/client-components-tree-shaking/index.test.ts": {
      "passed": [],
      "failed": [
        "app-dir client-components-tree-shaking should only include imported components 3rd party package in browser bundle with direct imports",
        "app-dir client-components-tree-shaking should only include imported relative components in browser bundle with direct imports"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/app-dir/deopted-into-client-rendering-warning/deopted-into-client-rendering-warning.test.ts": {
      "passed": ["should not show deopted into client rendering warning"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/app-dir/revalidate/revalidate.test.ts": {
      "passed": [
        "app-dir revalidate should be able to revalidate the cache via pages/api"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/app-dir/subresource-integrity/subresource-integrity.test.ts": {
      "passed": [],
      "failed": [
        "Subresource Integrity does not include nonce when not enabled",
        "Subresource Integrity includes a nonce value with bootstrap scripts when Content-Security-Policy header is defined",
        "Subresource Integrity includes a nonce value with inline scripts when Content-Security-Policy header is defined",
        "Subresource Integrity includes a nonce value with inline scripts when Content-Security-Policy-Report-Only header is defined",
        "Subresource Integrity includes an integrity attribute on scripts",
        "Subresource Integrity throws when escape characters are included in nonce"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": true
    },
    "test/production/app-dir/symbolic-file-links/symbolic-file-links.test.ts": {
      "passed": [],
      "failed": [
        "symbolic-file-links should work using browser",
        "symbolic-file-links should work using cheerio",
        "symbolic-file-links should work with fetch",
        "symbolic-file-links should work with html"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/app-dir/typed-routes-with-webpack-worker/typed-routes-with-webpack-worker.test.ts": {
      "passed": [],
      "failed": [
        "app dir - typed-routes-with-webpack-worker builds successfully without errors",
        "app dir - typed-routes-with-webpack-worker builds with valid errors"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/app-dir/unexpected-error/unexpected-error.test.ts": {
      "passed": [
        "unexpected-error cannot change response status when streaming has started",
        "unexpected-error should set response status to 500 for unexpected errors in isr app route",
        "unexpected-error should set response status to 500 for unexpected errors in ssr app route"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/app-dir/worker-restart/worker-restart.test.ts": {
      "passed": [
        "worker-restart should properly exhaust all restart attempts and not fail with any worker errors"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/bfcache-routing/index.test.ts": {
      "passed": [],
      "failed": [
        "bfcache-routing should not suspend indefinitely when page is restored from bfcache after an mpa navigation"
      ]
    },
    "test/production/build-spinners/index.test.ts": {
      "passed": [],
      "failed": [
        "build-spinners should handle build spinners correctly app and pages",
        "build-spinners should handle build spinners correctly app dir - (compile workers)",
        "build-spinners should handle build spinners correctly app dir - basic",
        "build-spinners should handle build spinners correctly page dir",
        "build-spinners should handle build spinners correctly page dir (compile workers)"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/ci-missing-typescript-deps/index.test.ts": {
      "passed": [
        "ci-missing-typescript-deps should show missing TypeScript dependencies error in CI"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/custom-error-500/index.test.ts": {
      "passed": [
        "custom-error-500 should correctly use pages/500 and call Error.getInitialProps",
        "custom-error-500 should work correctly with pages/404 present"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/custom-server/custom-server.test.ts": {
      "passed": [
        "custom server can navigate to /a",
        "custom server can navigate to /b",
        "custom server can navigate to /c",
        "custom server with app dir should not render pages with react canary",
        "custom server with app dir should render app with react canary"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/dependencies-can-use-env-vars-in-middlewares/index.test.ts": {
      "passed": [
        "dependencies can use env vars in middlewares does not error from patching lockfile",
        "dependencies can use env vars in middlewares uses the environment variables"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/deployment-id-handling/deployment-id-handling.test.ts": {
      "passed": [
        "deployment-id-handling disabled should not append dpl query to all assets for /",
        "deployment-id-handling disabled should not append dpl query to all assets for /from-app",
        "deployment-id-handling disabled should not append dpl query to all assets for /from-app/edge",
        "deployment-id-handling disabled should not append dpl query to all assets for /pages-edge",
        "deployment-id-handling enabled with CUSTOM_DEPLOYMENT_ID should have deployment id env available",
        "deployment-id-handling enabled with NEXT_DEPLOYMENT_ID should have deployment id env available"
      ],
      "failed": [
        "deployment-id-handling enabled with CUSTOM_DEPLOYMENT_ID should append dpl query to all assets correctly for /",
        "deployment-id-handling enabled with CUSTOM_DEPLOYMENT_ID should append dpl query to all assets correctly for /from-app",
        "deployment-id-handling enabled with CUSTOM_DEPLOYMENT_ID should append dpl query to all assets correctly for /from-app/edge",
        "deployment-id-handling enabled with CUSTOM_DEPLOYMENT_ID should append dpl query to all assets correctly for /pages-edge",
        "deployment-id-handling enabled with NEXT_DEPLOYMENT_ID should append dpl query to all assets correctly for /",
        "deployment-id-handling enabled with NEXT_DEPLOYMENT_ID should append dpl query to all assets correctly for /from-app",
        "deployment-id-handling enabled with NEXT_DEPLOYMENT_ID should append dpl query to all assets correctly for /from-app/edge",
        "deployment-id-handling enabled with NEXT_DEPLOYMENT_ID should append dpl query to all assets correctly for /pages-edge"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/disable-fallback-polyfills/index.test.ts": {
      "passed": [
        "Disable fallback polyfills Fallback polyfills added by default",
        "Disable fallback polyfills Pass build without error if non-polyfilled module is unreachable"
      ],
      "failed": [
        "Disable fallback polyfills Reduced bundle size when polyfills are disabled"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/edge-config-validations/index.test.ts": {
      "passed": [],
      "failed": [
        "Edge config validations fails to build when unstable_allowDynamic is not a string"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/edge-dynamic-code-eval/index.test.ts": {
      "passed": [
        "Dynamic Code Evaluation (DCE) should not fail when \"function-bind\" package is used"
      ],
      "failed": [
        "Dynamic Code Evaluation (DCE) should show the user's import trace"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/edge-runtime-is-addressable/index.test.ts": {
      "passed": [
        "Edge Runtime can be set to the production provider EdgeRuntime evaluates to a string",
        "Edge Runtime is addressable EdgeRuntime evaluates to a string"
      ],
      "failed": [
        "Edge Runtime is addressable removes the undefined branch with dead code elimination"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/emit-decorator-metadata/index.test.ts": {
      "passed": [
        "emitDecoratorMetadata SWC option should compile with emitDecoratorMetadata enabled"
      ],
      "failed": [
        "emitDecoratorMetadata SWC option should compile with emitDecoratorMetadata enabled for API"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/enoent-during-require/index.test.ts": {
      "passed": [],
      "failed": ["ENOENT during require should show ENOENT error correctly"],
      "pending": [],
      "flakey": [],
      "runtimeError": true
    },
    "test/production/error-hydration/error-hydration.test.ts": {
      "passed": [
        "error-hydration should log no error messages for server-side errors",
        "error-hydration should not invoke the error page getInitialProps client-side for server-side errors"
      ],
      "failed": [
        "error-hydration invokes _error's getInitialProps for client-side errors",
        "error-hydration should log an message for client-side errors, including the full, custom error"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/escheck-output/index.test.ts": {
      "passed": [],
      "failed": ["ES Check .next output should emit ES2020 with default"],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/eslint-plugin-deps/index.test.ts": {
      "passed": ["eslint plugin deps should work"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/export/index.test.ts": {
      "passed": [
        "static export API routes export Should throw if a route is matched",
        "static export Dynamic routes export Should throw error not matched route",
        "static export Render via SSR Should render dynamic files with query",
        "static export Render via SSR Should serve public files",
        "static export Render via SSR Should serve static files",
        "static export Render via SSR should give empty object for query if there is no query",
        "static export Render via SSR should render _error on /404/index.html",
        "static export Render via SSR should render _error on 404.html even if not provided in exportPathMap",
        "static export Render via SSR should render a dynamically rendered custom url page",
        "static export Render via SSR should render a page with getInitialProps",
        "static export Render via SSR should render links correctly",
        "static export Render via SSR should render pages with dynamic imports",
        "static export Render via SSR should render paths with extensions",
        "static export Render via SSR should render the about page",
        "static export Render via SSR should render the home page",
        "static export Render via browser should add trailing slash on Link",
        "static export Render via browser should do run client side javascript",
        "static export Render via browser should navigate even if used a button inside <Link />",
        "static export Render via browser should not add any slash on hash Link",
        "static export Render via browser should not add trailing slash on Link when disabled",
        "static export Render via browser should preserve hash symbol on empty hash Link",
        "static export Render via browser should preserve question mark on empty query Link",
        "static export Render via browser should render 404 when visiting a page that returns notFound from gsp",
        "static export Render via browser should render dynamic import components in the client",
        "static export Render via browser should render dynamic pages with custom urls",
        "static export Render via browser should render pages using getInitialProps",
        "static export Render via browser should render the home page",
        "static export exportTrailingSlash is not ignored",
        "static export should delete existing exported files",
        "static export should handle trailing slash in getStaticPaths",
        "static export should honor trailingSlash for 404 page",
        "static export should not duplicate /index with trailingSlash",
        "static export should only output 404.html without trailingSlash"
      ],
      "failed": [
        "static export Render via browser pages in the nested level: level1 should render the about page",
        "static export Render via browser pages in the nested level: level1 should render the home page",
        "static export Render via browser should do navigations via Link",
        "static export Render via browser should do navigations via Router",
        "static export Render via browser should render pages with url hash correctly",
        "static export Render via browser should support client side navigation",
        "static export Render via browser should update query after mount"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/exported-runtimes-value-validation/index.test.ts": {
      "passed": [
        "Exported runtimes value validation fails to build on malformed input"
      ],
      "failed": [
        "Exported runtimes value validation warns on unrecognized runtimes value"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/fallback-export-error/index.test.ts": {
      "passed": [
        "fallback export error should error with invalid exportPathMap",
        "fallback export error should have built",
        "fallback export error should not error with default exportPathMap",
        "fallback export error should not error with valid exportPathMap"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/fatal-render-errror/index.test.ts": {
      "passed": [
        "fatal-render-errror should render page without error correctly"
      ],
      "failed": [
        "fatal-render-errror should handle fatal error in _app and _error without loop on client-transition",
        "fatal-render-errror should handle fatal error in _app and _error without loop on direct visit"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/generate-middleware-source-maps/index.test.ts": {
      "passed": [],
      "failed": [
        "Middleware source maps generates a source map for Edge API",
        "Middleware source maps generates a source map for Middleware"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/graceful-shutdown/index.test.ts": {
      "passed": [
        "Graceful Shutdown development (next dev) should shut down child immediately",
        "Graceful Shutdown production (next start) should not accept new requests during shutdown cleanup when request is made before shutdown",
        "Graceful Shutdown production (next start) should not accept new requests during shutdown cleanup when there is no activity",
        "Graceful Shutdown production (next start) should wait for requests to complete before exiting"
      ],
      "failed": [
        "Graceful Shutdown production (standalone mode) should not accept new requests during shutdown cleanup when request is made before shutdown",
        "Graceful Shutdown production (standalone mode) should not accept new requests during shutdown cleanup when there is no activity",
        "Graceful Shutdown production (standalone mode) should wait for requests to complete before exiting"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/handle-already-sent-response/handle-already-sent-response.test.ts": {
      "passed": ["handle already sent response should work with fetch"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/ipc-forbidden-headers/ipc-forbidden-headers.test.ts": {
      "passed": [
        "ipc-forbidden-headers should not error if expect header is included",
        "ipc-forbidden-headers should not error on content-length: 0 if request shouldn't contain a payload"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/jest/index.test.ts": {
      "passed": [],
      "failed": ["next/jest should work"],
      "pending": [],
      "flakey": [],
      "runtimeError": true
    },
    "test/production/jest/new-link-behavior.test.ts": {
      "passed": ["next/jest newLinkBehavior should use new link behavior"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/jest/next-image-preload/next-image-preload.test.ts": {
      "passed": ["next/jest Should not throw preload is undefined error"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/jest/relay/relay-jest.test.ts": {
      "passed": [],
      "failed": ["next/jest should work"],
      "pending": [],
      "flakey": [],
      "runtimeError": true
    },
    "test/production/jest/remove-react-properties/remove-react-properties-jest.test.ts": {
      "passed": [],
      "failed": ["next/jest data-testid should be removed in production"],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/jest/rsc/lib/utils.test.js": {
      "passed": ["works with server-only code"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/jest/transpile-packages.test.ts": {
      "passed": ["next/jest should work"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/middleware-typescript/test/index.test.ts": {
      "passed": [],
      "failed": ["middleware-typescript should have built and started"],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/next-font/babel-unsupported.test.ts": {
      "passed": [],
      "failed": ["@next/fon babel unsupported Build error when using babel"],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/next-font/telemetry-old.test.ts": {
      "passed": [],
      "failed": [
        "@next/font unused telemetry should not send @next/font/google and @next/font/local usage event",
        "@next/font used telemetry should send @next/font/google and @next/font/local usage event"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/next-font/telemetry.test.ts": {
      "passed": [],
      "failed": [
        "next/font unused telemetry should not send next/font/google and next/font/local usage event",
        "next/font used telemetry should send next/font/google and next/font/local usage event"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/pages-dir/production/test/index.test.ts": {
      "passed": [],
      "failed": [
        "Production Usage API routes does not work with pages/api/readfile-dirname.js",
        "Production Usage API routes should work with dynamic params and search string",
        "Production Usage API routes should work with pages/api/hello.js",
        "Production Usage API routes should work with pages/api/index.js",
        "Production Usage API routes should work with pages/api/readfile-processcwd.js",
        "Production Usage Dynamic import custom loading should render custom loading on the server side when `ssr:false` and `loading` is provided",
        "Production Usage Dynamic import custom loading should render the component on client side",
        "Production Usage Dynamic import default behavior should bundle two css modules for nested components into one css file",
        "Production Usage Dynamic import default behavior should bundle two css modules for one dynamically imported component into one css file",
        "Production Usage Dynamic import default behavior should not remove css styles for same css file between page transitions",
        "Production Usage Dynamic import default behavior should output two css files even in case of three css module files while one is shared across files",
        "Production Usage Dynamic import default behavior should render dynamic import components",
        "Production Usage Dynamic import default behavior should render even there are no physical chunk exists",
        "Production Usage Dynamic import default behavior should render one dynamically imported component and load its css files",
        "Production Usage Dynamic import default behavior should render one dynamically imported component without any css files",
        "Production Usage Dynamic import default behavior should render three dynamically imported components and load their css files",
        "Production Usage Dynamic import ssr:false option should not render loading on the server side",
        "Production Usage Dynamic import ssr:false option should render the component on client side",
        "Production Usage Dynamic import ssr:true option should render the component on client side",
        "Production Usage Dynamic import ssr:true option should render the component on the server side",
        "Production Usage Misc It does not add a timestamp to link tags with prefetch attribute",
        "Production Usage Misc Should allow access to public files",
        "Production Usage Misc should add autoExport for auto pre-rendered pages",
        "Production Usage Misc should add prefetch tags when Link prefetch prop is used",
        "Production Usage Misc should allow to access /static/ and /_next/",
        "Production Usage Misc should handle already finished responses",
        "Production Usage Misc should have default runtime values when not defined",
        "Production Usage Misc should not add autoExport for non pre-rendered pages",
        "Production Usage Misc should not have runtimeConfig in __NEXT_DATA__",
        "Production Usage Misc should reload the page on page script error",
        "Production Usage Misc should reload the page on page script error with prefetch",
        "Production Usage Runtime errors should call getInitialProps on _error page during a client side component error",
        "Production Usage Runtime errors should render a client side component error",
        "Production Usage Runtime errors should render a server side error on the client side",
        "Production Usage With Security Related Issues should handle encoded / value for trailing slash correctly",
        "Production Usage With Security Related Issues should handle encoded value in the pathname correctly %",
        "Production Usage With Security Related Issues should handle encoded value in the pathname correctly /",
        "Production Usage With Security Related Issues should handle encoded value in the pathname correctly \\",
        "Production Usage With Security Related Issues should handle encoded value in the pathname to query correctly (/)",
        "Production Usage With Security Related Issues should handle encoded value in the query correctly",
        "Production Usage With Security Related Issues should not allow accessing files outside .next/static directory",
        "Production Usage With Security Related Issues should not execute script embedded inside svg image, even if dangerouslyAllowSVG=true",
        "Production Usage With Security Related Issues should not leak the user's home directory into the build",
        "Production Usage With Security Related Issues should only access files inside .next directory",
        "Production Usage With Security Related Issues should prevent URI based XSS attacks",
        "Production Usage With Security Related Issues should prevent URI based XSS attacks using double quotes",
        "Production Usage With Security Related Issues should prevent URI based XSS attacks using querystring",
        "Production Usage With Security Related Issues should prevent URI based XSS attacks using querystring and quotes",
        "Production Usage With Security Related Issues should prevent URI based XSS attacks using semicolons and double quotes",
        "Production Usage With Security Related Issues should prevent URI based XSS attacks using semicolons and single quotes",
        "Production Usage With Security Related Issues should prevent URI based XSS attacks using single quotes",
        "Production Usage With Security Related Issues should prevent URI based XSS attacks using src",
        "Production Usage With basic usage should allow etag header support",
        "Production Usage With basic usage should allow etag header support with getStaticProps",
        "Production Usage With basic usage should block special pages",
        "Production Usage With basic usage should have X-Powered-By header support",
        "Production Usage With basic usage should not contain customServer in NEXT_DATA",
        "Production Usage With basic usage should polyfill Node.js modules",
        "Production Usage With basic usage should render 200 for POST on page",
        "Production Usage With basic usage should render 404 even if the HTTP method is not GET or HEAD",
        "Production Usage With basic usage should render 404 for /_next/static route",
        "Production Usage With basic usage should render 404 for POST on missing page",
        "Production Usage With basic usage should render 404 for _next routes that do not exist",
        "Production Usage With basic usage should render 404 for dotfiles in /static",
        "Production Usage With basic usage should render 404 for routes that do not exist",
        "Production Usage With basic usage should render the page",
        "Production Usage With basic usage should return 200 on static file if If-Unmodified-Since is invalid date",
        "Production Usage With basic usage should return 405 method on static then GET and HEAD",
        "Production Usage With basic usage should return 412 on static file when If-Unmodified-Since is provided and file is modified",
        "Production Usage With basic usage should set Cache-Control header",
        "Production Usage With basic usage should set Content-Length header",
        "Production Usage With basic usage should set correct Cache-Control header for static 404s",
        "Production Usage With navigation should navigate to nested index via client side",
        "Production Usage With navigation should navigate via client side",
        "Production Usage With navigation should reload page successfully (on bad data fetch)",
        "Production Usage With navigation should reload page successfully (on bad link)",
        "Production Usage process.browser should eliminate client only code on the server",
        "Production Usage process.browser should eliminate server only code on the client",
        "Production Usage process.env should set process.env.NODE_ENV in production",
        "Production Usage should change query correctly",
        "Production Usage should clear all core performance marks",
        "Production Usage should contain generated page count in output",
        "Production Usage should contain the Next.js version in window export",
        "Production Usage should handle AMP correctly in IE",
        "Production Usage should handle failed param decoding",
        "Production Usage should handle query/hash correctly during query updating ## $search",
        "Production Usage should handle query/hash correctly during query updating ##? $search",
        "Production Usage should handle query/hash correctly during query updating ##hello $search",
        "Production Usage should handle query/hash correctly during query updating ##hello? $search",
        "Production Usage should handle query/hash correctly during query updating #? $search",
        "Production Usage should handle query/hash correctly during query updating #a ?hello",
        "Production Usage should handle query/hash correctly during query updating #a ?hello=",
        "Production Usage should handle query/hash correctly during query updating #a ?hello=world",
        "Production Usage should handle query/hash correctly during query updating #hello? $search",
        "Production Usage should handle query/hash correctly during query updating #hello?world $search",
        "Production Usage should have defer on all script tags",
        "Production Usage should navigate through history after query update",
        "Production Usage should navigate to external site and back",
        "Production Usage should navigate to external site and back (with query)",
        "Production Usage should navigate to page with CSS and back",
        "Production Usage should not clear custom performance marks",
        "Production Usage should not contain amp, rsc APIs in main chunk",
        "Production Usage should not contain currentScript usage for publicPath",
        "Production Usage should not emit stats",
        "Production Usage should not expose the compiled page file in development",
        "Production Usage should not put backslashes in pages-manifest.json",
        "Production Usage should not replace non-static pages with HTML files",
        "Production Usage should not show target deprecation warning",
        "Production Usage should only have one DOCTYPE",
        "Production Usage should output traces",
        "Production Usage should preserve query when hard navigating from page 404",
        "Production Usage should remove placeholder for next/image correctly",
        "Production Usage should replace static pages with HTML files",
        "Production Usage should respond with 405 for POST to static page",
        "Production Usage should warn when prefetch is true"
      ],
      "pending": [
        "Production Usage With Security Related Issues should handle invalid URL properly",
        "Production Usage With basic usage should allow etag header support with getServerSideProps"
      ],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/pnpm-support/index.test.ts": {
      "passed": [],
      "failed": [
        "pnpm support should build with dependencies installed via pnpm",
        "pnpm support should execute client-side JS on each page in output: \"standalone\""
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/postcss-plugin-config-as-string/index.test.ts": {
      "passed": ["PostCSS plugin config as string should work"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/prerender-prefetch/index.test.ts": {
      "passed": [
        "Prerender prefetch with optimisticClientCache disabled should handle failed data fetch and empty cache correctly",
        "Prerender prefetch with optimisticClientCache disabled should not revalidate during prefetching",
        "Prerender prefetch with optimisticClientCache disabled should trigger revalidation after navigation",
        "Prerender prefetch with optimisticClientCache disabled should update cache using prefetch with unstable_skipClientCache",
        "Prerender prefetch with optimisticClientCache enabled should handle failed data fetch and empty cache correctly",
        "Prerender prefetch with optimisticClientCache enabled should not revalidate during prefetching",
        "Prerender prefetch with optimisticClientCache enabled should trigger revalidation after navigation",
        "Prerender prefetch with optimisticClientCache enabled should update cache using prefetch with unstable_skipClientCache"
      ],
      "failed": [
        "Prerender prefetch with optimisticClientCache disabled should not attempt client cache update on link hover/touch start",
        "Prerender prefetch with optimisticClientCache disabled should update cache using router.push with unstable_skipClientCache",
        "Prerender prefetch with optimisticClientCache enabled should attempt cache update on link hover/touch start",
        "Prerender prefetch with optimisticClientCache enabled should update cache using router.push with unstable_skipClientCache"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/reading-request-body-in-middleware/index.test.ts": {
      "passed": [
        "reading request body in middleware passes the body greater than 64KiB to the api endpoint",
        "reading request body in middleware passes the body greater than 64KiB to the api endpoint when no body is consumed on middleware",
        "reading request body in middleware passes the body to the api endpoint",
        "reading request body in middleware passes the body to the api endpoint when no body is consumed on middleware",
        "reading request body in middleware rejects with 400 for get requests",
        "reading request body in middleware returns root: true for root calls"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/sharp-basic/sharp-basic.test.ts": {
      "passed": ["sharp support with hasNextSupport should work using cheerio"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/standalone-mode/basic/index.test.ts": {
      "passed": [
        "standalone mode - metadata routes should handle correctly not-found.js",
        "standalone mode - metadata routes should handle metadata icons correctly",
        "standalone mode - metadata routes should handle pages rendering correctly",
        "standalone mode - metadata routes should handle private _next unmatched route correctly"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/standalone-mode/ipv6/index.test.ts": {
      "passed": [],
      "failed": [
        "standalone mode: ipv6 hostname should load the page without any errors"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/standalone-mode/no-app-routes/index.test.ts": {
      "passed": [
        "standalone mode - no app routes should handle pages rendering correctly"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/standalone-mode/optimizecss/index.test.ts": {
      "passed": ["standalone mode and optimizeCss should work"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/standalone-mode/required-server-files/required-server-files-app.test.ts": {
      "passed": [],
      "failed": [
        "required server files app router should not fail caching",
        "required server files app router should not send cache tags in minimal mode for SSR",
        "required server files app router should not send invalid soft tags to cache handler",
        "required server files app router should properly handle fallback for bot request",
        "required server files app router should properly handle prerender for bot request",
        "required server files app router should send cache tags in minimal mode for ISR"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/standalone-mode/required-server-files/required-server-files-i18n.test.ts": {
      "passed": [],
      "failed": [
        "required server files i18n should bubble error correctly for API page",
        "required server files i18n should bubble error correctly for gip page",
        "required server files i18n should bubble error correctly for gsp page",
        "required server files i18n should bubble error correctly for gssp page",
        "required server files i18n should handle bad request correctly with rewrite",
        "required server files i18n should have the correct asPath for fallback page",
        "required server files i18n should have the correct asPath for fallback page locale",
        "required server files i18n should match the index page correctly",
        "required server files i18n should match the root dyanmic page correctly",
        "required server files i18n should normalize catch-all rewrite query values correctly",
        "required server files i18n should normalize optional values correctly for API page",
        "required server files i18n should normalize optional values correctly for SSG page",
        "required server files i18n should normalize optional values correctly for SSG page with encoded slash",
        "required server files i18n should normalize optional values correctly for SSP page",
        "required server files i18n should normalize optional values correctly for nested optional SSG page",
        "required server files i18n should not apply locale redirect in minimal mode",
        "required server files i18n should not apply trailingSlash redirect",
        "required server files i18n should output required-server-files manifest correctly",
        "required server files i18n should render SSR page correctly",
        "required server files i18n should render SSR page correctly with x-matched-path",
        "required server files i18n should render dynamic SSR page correctly",
        "required server files i18n should render dynamic SSR page correctly with x-matched-path",
        "required server files i18n should render fallback optional catch-all route correctly with x-matched-path and routes-matches",
        "required server files i18n should render fallback page correctly",
        "required server files i18n should render fallback page correctly with x-matched-path and routes-matches",
        "required server files i18n should return data correctly with x-matched-path",
        "required server files i18n should return data correctly with x-matched-path for optional catch-all route",
        "required server files i18n should set correct SWR headers with notFound gsp",
        "required server files i18n should set correct SWR headers with notFound gssp"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": true
    },
    "test/production/standalone-mode/required-server-files/required-server-files-ppr.test.ts": {
      "passed": [],
      "failed": [
        "required server files app router middleware rewrite should work with a dynamic path",
        "required server files app router should handle RSC requests",
        "required server files app router should handle prefetch RSC requests",
        "required server files app router should not fail caching",
        "required server files app router should not send cache tags in minimal mode for SSR",
        "required server files app router should not send invalid soft tags to cache handler",
        "required server files app router should properly handle fallback for bot request",
        "required server files app router should properly handle prerender for bot request",
        "required server files app router should properly stream resume",
        "required server files app router should send cache tags in minimal mode for ISR"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/standalone-mode/required-server-files/required-server-files.test.ts": {
      "passed": [],
      "failed": [
        "required server files `cacheHandler` should have correct path",
        "required server files `cacheMaxMemorySize` should be disabled by setting to 0",
        "required server files `compress` should be `false` in nextEnv",
        "required server files should bubble error correctly for API page",
        "required server files should bubble error correctly for gip page",
        "required server files should bubble error correctly for gsp page",
        "required server files should bubble error correctly for gssp page",
        "required server files should cap de-dupe previousCacheItem expires time",
        "required server files should correctly handle a mismatch in buildIds when normalizing next data",
        "required server files should de-dupe HTML/data requests",
        "required server files should favor valid route params over routes-matches",
        "required server files should favor valid route params over routes-matches optional",
        "required server files should handle bad request correctly with rewrite",
        "required server files should have correct asPath on dynamic SSG page correctly",
        "required server files should have correct asPath on dynamic SSG page fallback correctly",
        "required server files should have correct cache-control for notFound no revalidate",
        "required server files should have correct cache-control for notFound with revalidate",
        "required server files should have correct cache-control for redirect no revalidate",
        "required server files should have correct cache-control for redirect with revalidate",
        "required server files should have correct resolvedUrl from dynamic route",
        "required server files should have correct resolvedUrl from rewrite",
        "required server files should have correct resolvedUrl from rewrite with added query",
        "required server files should have the correct cache-control for props with no revalidate",
        "required server files should match the index page correctly",
        "required server files should match the root dynamic page correctly",
        "required server files should normalize catch-all rewrite query values correctly",
        "required server files should normalize index optional values correctly for API page",
        "required server files should normalize optional revalidations correctly for SSG page",
        "required server files should normalize optional values correctly for API page",
        "required server files should normalize optional values correctly for SSG page",
        "required server files should normalize optional values correctly for SSG page with encoded slash",
        "required server files should normalize optional values correctly for SSP page",
        "required server files should not 404 for onlyGenerated on-demand revalidate in minimal mode",
        "required server files should not apply trailingSlash redirect",
        "required server files should output middleware correctly",
        "required server files should output required-server-files manifest correctly",
        "required server files should read .env files and process.env",
        "required server files should render SSR page correctly",
        "required server files should render SSR page correctly with x-matched-path",
        "required server files should render dynamic SSR page correctly",
        "required server files should render dynamic SSR page correctly with x-matched-path",
        "required server files should render fallback optional catch-all route correctly with x-matched-path and routes-matches",
        "required server files should render fallback page correctly",
        "required server files should render fallback page correctly with x-matched-path and routes-matches",
        "required server files should resolve correctly when a redirect is returned",
        "required server files should return data correctly with x-matched-path",
        "required server files should return data correctly with x-matched-path for optional catch-all route",
        "required server files should run middleware correctly (without minimalMode, with wasm)",
        "required server files should set correct SWR headers with notFound gsp",
        "required server files should set correct SWR headers with notFound gssp",
        "required server files should show invariant when an automatic static page is requested",
        "required server files should warn when \"next\" is imported directly"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": true
    },
    "test/production/standalone-mode/response-cache/index.test.ts": {
      "passed": [],
      "failed": [
        "minimal-mode-response-cache app router revalidate should work with previous response cache",
        "minimal-mode-response-cache app router revalidate should work with previous response cache dynamic",
        "minimal-mode-response-cache should have correct \"Started server on\" log",
        "minimal-mode-response-cache should have correct responses"
      ],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/standalone-mode/type-module/index.test.ts": {
      "passed": [],
      "failed": ["type-module should work"],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/supports-module-resolution-nodenext/supports-moduleresolution-nodenext.test.ts": {
      "passed": [
        "Does not override tsconfig moduleResolution field during build boots and renders without throwing an error"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/terser-class-static-blocks/terser-class-static-blocks.test.ts": {
      "passed": ["terser-class-static-blocks should work using cheerio"],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/transpile-packages/transpile-packages.test.ts": {
      "passed": [
        "app fetch build cache should bundle @aws-sdk/client-s3 as a transpiled package",
        "app fetch build cache should render page with dependencies"
      ],
      "failed": [],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    },
    "test/production/typescript-basic/index.test.ts": {
      "passed": [
        "TypeScript basic have built and started correctly",
        "TypeScript basic should not have eslint setup started"
      ],
      "failed": ["TypeScript basic should work with babel"],
      "pending": [],
      "flakey": [],
      "runtimeError": false
    }
  },
  "rules": {
    "include": [
      "test/e2e/**/*.test.{t,j}s{,x}",
      "test/production/**/*.test.{t,j}s{,x}"
    ],
    "exclude": []
  }
}
